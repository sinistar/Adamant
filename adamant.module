<?php

require_once "highlightSQL.inc.php";

/**
 * Implements hook_help().
 */
function adamant_help($path, $arg) {
  switch ($path) {
    case 'admin/help#adamant':
      $path = drupal_get_path('module', 'adamant');
      $output  = '<p>' . t("Read the <a href='@url'>README.txt</a> file in the adamant module directory.", array('@url' => "/$path/README.txt")) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function adamant_menu() {
  $items = array();

  // Add our own autocomplete callback to pass also the group and
  // vocabulary info.
  $items['adamant'] = array(
    'title' => 'Adamant',
    'page callback' => 'adamant_adamant',
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/akten'] = array(
    'title' => 'Auftragsliste',
    'page callback' => 'adamant_akten',
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/akten/%'] = array(
    'title' => 'Auftragsliste',
    'page callback' => 'adamant_akten',
    'page arguments' => array(2),
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/akte/%'] = array(
    'title' => 'Einzelner Auftrag',
    'page callback' => 'adamant_akte',
    'page arguments' => array(2),
    'access arguments' => array('access adamant database'),
  );

  $items['adamant/query/predefined/%'] = array(
    'title' => 'Adamant',
    'page callback' => 'adamant_predefined',
    'page arguments' => array(3),
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/query/custom/%'] = array(
    'title' => 'Adamant',
    'page callback' => 'adamant_custom',
    'page arguments' => array(3),
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/query/builder'] = array(
    'title' => 'Adamant Query Builder',
    'page callback' => 'adamant_query_builder',
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/query/builder/%'] = array(
    'title' => 'Adamant Query Builder',
    'page callback' => 'adamant_query_builder',
    'page arguments' => array(3),
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/query/edit/%'] = array(
    'title' => 'Edit Query',
    'page callback' => 'adamant_query_edit',
    'page arguments' => array(3),
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/query/delete/%'] = array(
    'title' => 'Delete Query',
    'page callback' => 'adamant_query_delete',
    'page arguments' => array(3),
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/query/fav/%'] = array(
    'page callback' => 'adamant_query_fav',
    'page arguments' => array(3),
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/query/unfav/%'] = array(
    'page callback' => 'adamant_query_unfav',
    'page arguments' => array(3),
    'access arguments' => array('access adamant database'),
  );
  $items['adamant/query/sql'] = array(
    'title' => 'Adamant Query Builder',
    'page callback' => 'adamant_query_sql',
    'access arguments' => array('access adamant database'),
  );

  return $items;
}

function adamant_permission() {
  return array(
    'access adamant database' => array(
        'title' => t('Access Adamant database'),
        'description' => t('Access and download statistical data as tables and charts.')
      ),
  );
}

function adamant_adamant() {
  global $base_url;
  $mod_url = $base_url . '/' . drupal_get_path('module', 'adamant');
  drupal_add_css(drupal_get_path('module', 'adamant') .'/css/adamant.css', 'file');

  $output = '';

  $categories = array(
    0 => "Unsortiert",
    1 => "Zwischenbericht",
    2 => "Tätigkeitsbericht",
    3 => "Internetpräsenz",
    4 => "Sachbearbeiter",
    5 => "Controlling",
  );
  $tag = '';
  $saved = db_select('adamant_custom', 'a')
    ->fields('a')
    ->orderBy('tag')
    ->orderBy('fav', 'DESC')
    ->orderBy('title')
    ->execute();
  while ($q = $saved->fetchAssoc()) {
    if ($tag !== $q['tag']) {
      if ($tag != '') {
        $output .= '</table>';
      }
      $tag = $q['tag'];
      if ($tag != '' && is_numeric($tag)) {
        $output .= '<h2>'.$categories[$tag].'</h2><table><tr><th>Title</th><th>Typ</th><th width="30%">Aktion</th></tr>';
      }
    }

    $output .= '<tr><td><a href="'.$base_url.'/adamant/query/custom/'.$q['qid'].'">'.$q['title'].'</a></td><td><img class="icon" src="'.$mod_url.'/images/chart_'.$q['chart'].'.png" height="12" />&nbsp;&ndash;&nbsp;'.$q['type'].'</td><td>';
    $output .= $q['fav'] == 1 ? '<a class="button" href="'.$base_url.'/adamant/query/unfav/'.$q['qid'].'"><img src="'.$mod_url.'/images/star_fav.png" height="12" /></a>' : '<a class="button" href="'.$base_url.'/adamant/query/fav/'.$q['qid'].'"><img class="icon" src="'.$mod_url.'/images/star_no.png" height="12" /></a>';
    $output .= '<a class="button" href="'.$base_url.'/adamant/query/edit/'.$q['qid'].'">Bearbeiten</a>';
    $output .= '<a class="button" href="'.$base_url.'/adamant/query/delete/'.$q['qid'].'">Löschen</a>';
    $output .= '</td></tr>';
  }
  if ($tag != '' && is_numeric($tag)) {
    $output .= '</table>';
  }
  return $output;
}

function adamant_dbconn() {
  global $user;
  $roles = $user->roles;
  if (in_array('adamantadmin', $roles)) {
    $dbc = 'adamantadmin';
  }
  elseif (in_array('adamantpfleger', $roles)) {
    $dbc = 'adamantpfleger';
  }
  elseif (in_array('adamantnutzer', $roles)) {
    $dbc = 'adamantnutzer';
  }
  else {
    return false;
  }
  return $dbc;
}

function adamant_sqlhl($sql) {
  $obj = new highlightSQL;
  $sql = $obj->highlight($sql);
  return $sql;
}

function adamant_sqlph($arg) {
  if (count($arg) == 0) {
    return '';
  }
  $txt = '<pre><ul>';
  foreach ($arg AS $k => $v) {
    $txt .= '<li><span style="color:#099;">' . $k . '</span> => <span style="color:#033;">' . (!is_int($v) ? '"' : '') . $v . (!is_int($v) ? '"' : '') . '</span></li>';
  }
  $txt .= '</ul></pre>';
  return $txt;
}

function adamant_query_display($query) {
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
  return '<fieldset class="query-box collapsible collapsed"><legend><span class="fieldset-legend">SQL Query</span></legend><div class="fieldset-wrapper"><pre>'.adamant_sqlhl($query->__toString()).'</pre>'.adamant_sqlph($query->arguments()).'</div></fieldset>';
}
function adamant_sql_display($sql) {
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
  return '<fieldset class="query-box collapsible collapsed"><legend><span class="fieldset-legend">SQL Query</span></legend><div class="fieldset-wrapper"><pre>'.adamant_sqlhl($sql).'</pre></div></fieldset>';
}

function adamant_table_display($data, $closed = 0) {
  drupal_add_js('misc/form.js');
  drupal_add_js('misc/collapse.js');
  $output = '<table>';
  $i = 0;
  foreach ($data AS $row) {
    if ($i == 0) {
      $output .= '<tr>';
      foreach ($row AS $id => $value) {
        $output .= '<th>'.$id.'</th>';
      }
      $output .= '</tr>';
    }
    $output .= '<tr>';
    foreach ($row AS $id => $value) {
      $output .= '<td>'.$value.'</td>';
    }
    $output .= '</tr>';
    $i++;
  }
  $output .= '</table>';
  return '<fieldset class="query-box ' . ($closed ? 'collapsed' : '') . ' collapsible"><legend><span class="fieldset-legend">Table Data</span></legend><div class="fieldset-wrapper">'.$output.'</div></fieldset>';
}

function adamant_chart_display($data, $options = array()) {
  $output = '';
  #$output .= print_r(adamant_check_data_for_charts($data),1);
  $chart_type = isset($options['chart']) ? $options['chart'] : 3; //adamant_check_data_for_charts($data);
  switch ($chart_type) {
    case 1: // Tortendiagramm
    {
      #$output .= "TORTE: " . print_r($data,1) . "<br><br>";
      $values = $labels = array();
      $i = 0;
      $sample = $data[0];
      if ($i = array_search('cnt', array_keys($sample))) {
        $pie_type = $i;
      }
      elseif (is_numeric(array_values($sample)[0]) && !is_numeric(array_values($sample)[1])) {
        $pie_type = 0;
      }
      elseif (!is_numeric(array_values($sample)[0]) && is_numeric(array_values($sample)[1])) {
        $pie_type = 1;
      }
      else {
        $pie_type = 1;
      }
      foreach ($data AS $set) {
        if ($pie_type == 0) {
          $values[$i] = array_shift($set);
          $labels[$i] = array_shift($set);
        }
        elseif ($pie_type == 1) {
          $labels[$i] = array_shift($set);
          $values[$i] = array_shift($set);
        }
        $i++;
      }
      #$output .= "LABELS: " . print_r($labels,1) . "<br><br>";
      #$output .= "VALUES: " . print_r($values,1) . "<br><br>";
      $ccid = isset($options['ccid']) ? $options['ccid'] : md5(microtime());
      $options['ccid'] = $ccid;
      $output .= '<canvas id="canvaschart_'.$ccid.'" width="800" height="400">[No canvas support]</canvas>';
      $output .= adamant_create_chart_pie($values, $labels, $options);
      #$output .= adamant_c3_chart_pie($c3data, $options);
      #$output .= adamant_dimple_chart_pie($dimpledata, $options);
      #$output .= adamant_c3_chart_bar($c3data, $options);
      break;
    }
    case 2:
    case 3: // Balkendiagramm
    {
      $values = $labels = array();
      $i = 0;
      // check for order of fields
      $types = adamant_check_data_fields($data);
      foreach ($data AS $set) {
        if (in_array($types[0]['type'], array('int', 'float'))) {
          $values[$i] = array_shift($set);
          $labels[$i] = array_shift($set);
        }
        else {
          $labels[$i] = array_shift($set);
          $values[$i] = array_shift($set);
        }
        if (preg_match('#(\d{4})\s*?Q\s*?(\d)#', $labels[$i], $matches)) {
          $labels[$i] = adamant_romanic_number($matches[2]) . ' ' . $matches[1];
          $options['label_below'] = true;
        }
        $i++;
      }
      #$output .= "LABELS: " . print_r($labels,1) . "<br><br>";
      #$output .= "VALUES: " . print_r($values,1) . "<br><br>";
      $ccid = isset($options['ccid']) ? $options['ccid'] : md5(microtime());
      $options['ccid'] = $ccid;
      $output .= '<canvas id="canvaschart_'.$ccid.'" width="800" height="400">[No canvas support]</canvas>';
      $output .= adamant_create_chart_bar($values, $labels, $options);
      #$output .= adamant_c3_chart_bar($c3data, $options);
      #$output .= adamant_dimple_chart_bar($dimpledata, $options);
      break;
    }
  }
  return '<fieldset class="query-box collapsible"><legend><span class="fieldset-legend">Chart</span></legend><div class="fieldset-wrapper">'.$output.'</div></fieldset>';
}

function adamant_dimple_chart_pie($data, $options = array()) {
  drupal_add_js('http://d3js.org/d3.v3.min.js', 'external');
  drupal_add_js('http://dimplejs.org/dist/dimple.v2.1.0.min.js', 'external');

  $output = '<div id="dimple"></div>';

  $output .= '<script>var svg = dimple.newSvg("#dimple", 800, 500);
    var data = '.json_encode($data).';
    var chart = new dimple.chart(svg, data);
    chart.addMeasureAxis("p", "y");
    chart.addSeries(["x"], dimple.plot.pie);
    chart.addLegend(0, 20, 90, 300, "left");
    chart.draw();</script>';

  return $output;
}

function adamant_dimple_chart_bar($data, $options = array()) {
  drupal_add_js('http://d3js.org/d3.v3.min.js', 'external');
  drupal_add_js('http://dimplejs.org/dist/dimple.v2.1.0.min.js', 'external');

  $output = '<div id="dimple"></div>';

  $output .= '<script>var svg = dimple.newSvg("#dimple", 800, 500);
    var data = '.json_encode($data).';
    var chart = new dimple.chart(svg, data);
    chart.addMeasureAxis("p", "y");
    chart.addSeries(["x"], dimple.plot.bar);
    chart.addLegend(0, 20, 90, 300, "left");
    chart.draw();</script>';

  return $output;
}

function adamant_c3_chart_pie($data, $options = array()) {
  drupal_add_js('http://d3js.org/d3.v3.min.js', 'external');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/c3/c3.min.js', 'file');
  drupal_add_css(drupal_get_path('module', 'adamant') .'/c3/c3.min.css', 'file');

  $output = '<div id="pie_'.$options['ccid'].'"></div>';

  $output .= "<script>var pie_".$options['ccid']." = c3.generate({
      bindto: '#pie_".$options['ccid']."',
      size: {
        width: 500,
        height: 500
      },
      data: {
        columns: ".json_encode($data).",
        type: 'pie'
      }
  });</script>";

  return $output;
}

function adamant_c3_chart_bar($data, $options = array()) {
  drupal_add_js('http://d3js.org/d3.v3.min.js', 'external');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/c3/c3.min.js', 'file');
  drupal_add_css(drupal_get_path('module', 'adamant') .'/c3/c3.min.css', 'file');

  $output = '<div id="bar_'.$options['ccid'].'"></div>';

  $output .= "<script>var bar_".$options['ccid']." = c3.generate({
      bindto: '#bar_".$options['ccid']."',
      size: {
        width: 500,
        height: 500
      },
      data: {
        columns: ".json_encode($data).",
        type: 'bar',
        x: 0
      }
  });</script>";

  return $output;
}

function adamant_create_chart_pie($values, $labels = array(), $options = array()) {
  if (!isset($options['nosort'])) {
    ksort($values);
    ksort($labels);
  }
  #var_dump($labels);
  $count = count($values);
  $total = array_sum($values);
  foreach ($values AS $ind => $val) {
    $percent = round($val/$total*100);
    $tooltipps[$ind] = $labels[$ind] . ': ' . $val . ' (' . $percent . '%)';
    $percentages[$ind] = $percent;
  }
  // percentages clean up
  $percent = array();
  $last_value = $last_action = 0;
  foreach ($percentages AS $i => $p) {
    if (($p < 4 && $last_action == 0 && $last_value < 4) || $p < 1) {
      $percent[$i] = null;
      $last_action = 1;
    }
    else {
      $percent[$i] = $p . '%';
      $last_action = 0;
    }
    $last_value = $p;
  }
  // colors
  $base_colors = array(
    '#a9c30c',
    '#1a33b0',
    '#fcea14',
    '#fc0303',
    '#400135',
    '#ABD874',
    '#E18D87',
    '#599FD9',
    '#F4AD7C',
    '#D5BBE5',
    '#f5eba1',
    '#f4c3ea',
    '#97e8e1',
    '#9de7b2',
    '#ee7ea6',
    '#b0b1fd',
    '#fc8787',
    '#f3d07b',
    '#8fcaec',
    '#ac8c8c',
    '#c0d7b6',
    '#cccccc'
  );
  $colors = array_slice($base_colors, 0, $count);
  $output = isset($options['noscripttag']) ? '' : "<script>";
  $output .=  "var pie" . $options['ccid'] . " = new RGraph.Pie('canvaschart_" . $options['ccid'] . "', [" . implode(',',$values) . "]);
    RGraph.Clear(pie" . $options['ccid'] . ".canvas);
    pie" . $options['ccid'] . "
      .set('colors', ['" . implode("','", $colors) . "'])
      .set('shadow', false)
      .set('labels', ['" . implode("','", $percent) . "'])
      .set('labels.sticks', false)
      .set('tooltips', ['" . implode("','", $tooltipps) . "'])
      .set('key', ['" . implode("','", $labels) . "'])
      .set('key.colors', ['" . implode("','", $colors) . "'])
      .set('key.color.shape', 'circle')
      .set('key.interactive', true)
      .set('key.position.y', 100)
      .set('key.position.x', 0)
      .set('key.linewidth', .0001)
      .set('key.strokestyle', 'rgba(255,255,255,1)')
      .set('highlight.style', 'explode')
      .set('strokestyle', 'rgba(255,255,255,1)')
      .set('linewidth', 1)
      .set('radius', 175)
      .set('gutter.left', 400)
      .set('contextmenu', [['Diagramm als Bild', RGraph.showPNG],null,['Abbruch', function () {}]])
      .draw();";
  $output .= isset($options['noscripttag']) ? '' : "</script>";
  return $output;
}

function adamant_create_chart_bar($values, $labels = array(), $options = array()) {
  $output = '';
  if (isset($options['order']) && isset($options['grouped'])) {
    $chartlabels = array();
    foreach ($options['order'] AS $gid) {
      $group = $options['groups'][$gid];
      $chartlabels[] = $group;
      $tooltipps_gid = array();
      foreach ($values[$gid] AS $ind => $val) {
        $tooltipps_gid[$ind] = $group . '<br>' . $labels[$ind].': '.$val;
      }
      $tooltipps[$gid] = $tooltipps_gid;
    }
  }
  elseif (isset($options['grouped'])) {
    foreach ($options['groups'] AS $gid => $group) {
      foreach ($values[$gid] AS $ind => $val) {
        $tooltipps[$gid][$ind] = $group . '<br>' . $labels[$ind].': '.$val;
      }
    }
    $chartlabels = $options['groups'];
  }
  elseif (isset($options['order'])) {
    foreach ($options['order'] AS $ind) {
      $val = $values[$ind];
      $chartlabels[$ind] = $labels[$ind];
      $tooltipps[$ind] = $labels[$ind].': '.$val;
    }
  }
  else {
    ksort($values);
    ksort($labels);
    foreach ($values AS $ind => $val) {
      $chartlabels[$ind] = $labels[$ind];
      $tooltipps[$ind] = $labels[$ind].': '.$val;
    }
  }
  // colors
  if (isset($options['colors'])) {
    $colors = $options['colors'];
  }
  elseif (isset($options['grouped']) && $options['grouped'] == true) {
    $colors = array(
     '#a9c30c',
    '#1a33b0',
    '#fcea14',
    '#fc0303',
    '#400135',

    '#ABD874',
      '#E18D87',
      '#599FD9',
      '#F4AD7C',
      '#D5BBE5',
      '#f5eba1',
      '#f4c3ea',
      '#97e8e1',
      '#9de7b2',
      '#ee7ea6',
      '#b0b1fd',
      '#fc8787',
      '#f3d07b',
      '#8fcaec',
      '#ac8c8c',
      '#c0d7b6',
      '#cccccc'
    );
    if (isset($options['colorful']) && $options['colorful'] == true) {
      $colors_temp = $colors;
      while (count($colors) < count($options['groups']) * count($labels)) {
        shuffle($colors_temp);
        $colors = array_merge($colors, $colors_temp);
      }
    }
    else {
      $colors_temp = array_slice($colors, 0, count($labels));
      $colors = $colors_temp;
      for ($i = 1; $i < count($options['groups']); $i++) {
        $colors = array_merge($colors, $colors_temp);
      }
    }
  }
  else {
    if (isset($options['colorful']) && $options['colorful'] == true) {
      $colors = array(
       '#a9c30c',
    '#1a33b0',
    '#fcea14',
    '#fc0303',
    '#400135',

    '#ABD874',
        '#E18D87',
        '#599FD9',
        '#F4AD7C',
        '#D5BBE5',
        '#f5eba1',
        '#f4c3ea',
        '#97e8e1',
        '#9de7b2',
        '#ee7ea6',
        '#b0b1fd',
        '#fc8787',
        '#f3d07b',
        '#8fcaec',
        '#ac8c8c',
        '#c0d7b6',
        '#cccccc'
      );
    }
    else {
      $colors = array(
        '#ABD874'
      );
    }
  }
  if (isset($options['order']) && isset($options['grouped'])) {
    $canvas_values_groups = $canvas_tooltipps_groups = $canvas_chartlabels_groups = array();
    foreach ($options['order'] AS $gid) {
      $gname = $options['groups'][$gid];
      $canvas_values_groups[] = "[".implode(',',$values[$gid])."]";
      $canvas_tooltipps_groups[] = "'".implode("', '",$tooltipps[$gid])."'";
    }
    $canvas_values = "[".implode(',',$canvas_values_groups)."]";
    $canvas_tooltipps = "[".implode(',',$canvas_tooltipps_groups)."]";
    $canvas_chartlabels = "['".implode("', '",$chartlabels)."']";
  }
  elseif (isset($options['grouped'])) {
    $canvas_values_groups = $canvas_tooltipps_groups = $canvas_chartlabels_groups = array();
    foreach ($options['groups'] AS $gid => $gname) {
      $canvas_values_groups[] = "[".implode(',',$values[$gid])."]";
      $canvas_tooltipps_groups[] = "'".implode("', '",$tooltipps[$gid])."'";
    }
    $canvas_values = "[".implode(',',$canvas_values_groups)."]";
    $canvas_tooltipps = "[".implode(',',$canvas_tooltipps_groups)."]";
    $canvas_chartlabels = "['".implode("', '",$chartlabels)."']";
  }
  else {
    $canvas_values = "[".implode(',',$values)."]";
    $canvas_tooltipps = "['".implode("', '",$tooltipps)."']";
    $canvas_chartlabels = "['".implode("', '",$chartlabels)."']";
  }
  $colors = array('#cccccc');
  $cid = $options['ccid'];
  $output .= "<script>var bar".$cid." = new RGraph.Bar('canvaschart_".$cid."', ".$canvas_values.");
          RGraph.Clear(bar".$cid.".canvas);
          bar".$cid.".set('shadow', false)".
                (isset($options['label_below']) ?
                ".set('text.angle', 45)
                .set('hmargin', 6)
                .set('xlabels.offset', 10)
                .set('gutter.bottom', ".(isset($options['gutter.bottom'])?$options['gutter.bottom']:135).")"  :
                (isset($options['label_straight']) ?
                ".set('text.angle', 0)
                .set('xlabels.offset', 20)
                .set('gutter.bottom', ".(isset($options['gutter.bottom'])?$options['gutter.bottom']:135).")"  :
                ".set('text.angle', -90)
                .set('xlabels.offset', -20)")).
                ".set('background.grid.autofit.numvlines', ".(isset($options['grouped'])?count($options['groups']):count($labels)).")
                .set('background.grid.vlines', false)
                .set('colors', ['".implode("','", $colors)."'])
                .set('colors.sequential', true)
                .set('tooltips', ".$canvas_tooltipps.")
                .set('labels', ".$canvas_chartlabels.")
                .set('strokestyle', 'rgba(204,204,204,0)')
                .set('text.font', 'Garamond')
                .set('text.size', 8)
                .set('text.color', '#000000')
                .set('axis.color', '#cccccc')
                .set('gutter.right', ".(isset($options['gutter.right']) ? (int) $options['gutter.right'] : 5).")
                .set('gutter.left', ".(isset($options['gutter.left']) ? (int) $options['gutter.left'] : 50).")
                ".(isset($options['key.position.x'])?".set('key.position.x', {$options['key.position.x']})":'')."
                ".(isset($options['key.position.y'])?".set('key.position.y', {$options['key.position.y']})":'')."
                ".(isset($options['grouped'])?".set('key', ['".implode("', '",$labels)."']).set('key.interactive', true)":'')."
                .set('contextmenu', [['Diagramm als Bild', RGraph.showPNG],null,['Abbruch', function () {}]])
                ".(isset($options['ymax'])?".set('ymax', {$options['ymax']})":'')."
                .draw();

        var text = new RGraph.Drawing.Text({
            id: 'canvaschart_".$cid."',
            x: 730,
            y: 10,
            text: 'Clearingstelle EEG, ".date("d.m.Y")."',
            options: {
                valign: 'top',
                halign: 'center',
                marker: false,
                size: 8,
                font: 'Garamond',
                bounding: false,
                colors: ['#999999']
            }
        }).draw();
    </script>";
    #$output .= "<pre>".print_r($values,1)."</pre>";
    #
    /*
    ".($title?".set('title','{$title}').set('title.size','16').set('gutter.top', '40')":'')."
                ".(1==0 && isset($axes['x'])?".set('title.xaxis','{$axes["x"]}').set('gutter.bottom', '40')":'')."
                ".(isset($axes['y'])?".set('title.yaxis','{$axes["y"]}').set('gutter.left', '40')":'')."


     */
    return $output;
}

function adamant_result_data($result) {
  $data = array();
  while ($row = $result->fetchAssoc()) {
    $set = array();
    #var_dump($row);
    foreach ($row AS $id => $value) {
      if (ctype_digit((string) $value)) { $value = (int) $value; }
      $set[$id] = $value;
    }
    $data[] = $set;
  }
  #var_dump($data);
  return $data;
}

function adamant_check_data_for_charts($data) {
  $maxcols = 0;
  $types = array();
  foreach($data AS $set) {
    $maxcols = max(count($set), $maxcols);
    $i = 0;
    foreach ($set AS $id => $value) {
      $types[$i] = array(
        'id' => $id,
        'type' => gettype($value),
      );
      if ((int) $value == $value) {
        $types[$i]['type'] = 'int';
      }
      elseif ((float) $value == $value) {
        $types[$i]['type'] = 'float';
      }
      $i++;
    }
  }
  #var_dump($maxcols, $types);
  if ($maxcols == 2 && in_array($types[1]['type'], array('integer', 'double', 'float'))) {
    return 1; // Tortendiagramm (key-val)
  }
  elseif ($maxcols == 2 && in_array($types[0]['type'], array('integer', 'double', 'float'))) {
    return 2; // Tortendiagramm (val-key)
  }
  return 0; // no type defined yet
}

function adamant_check_data_fields($data) {
  $maxcols = 0;
  $types = array();
  foreach($data AS $set) {
    $maxcols = max(count($set), $maxcols);
    $i = 0;
    foreach ($set AS $id => $value) {
      $types[$i] = array(
        'id' => $id,
        'type' => gettype($value),
      );
      if ((string)(int)$value === (string)$value) {
        $types[$i]['type'] = 'int';
      }
      elseif ((string)(float)$value == (string)$value) {
        $types[$i]['type'] = 'float';
      }
      else {
        $types[$i]['type'] = 'string';
      }
      if (in_array($types[$i]['type'], array('int','float'))) {
        if (!isset($types[$i]['min'])) {
          $types[$i]['min'] = $value;
        }
        else {
          $types[$i]['min'] = min($types[$i]['min'], $value);
        }
        if (!isset($types[$i]['max'])) {
          $types[$i]['max'] = $value;
        }
        else {
          $types[$i]['max'] = min($types[$i]['max'], $value);
        }
      }
      $i++;
    }
  }
  #var_dump($types);
  return $types; // no type defined yet
}

function adamant_romanic_number($integer, $upcase = true) {
  $table = array('M'=>1000, 'CM'=>900, 'D'=>500, 'CD'=>400, 'C'=>100, 'XC'=>90, 'L'=>50, 'XL'=>40, 'X'=>10, 'IX'=>9, 'V'=>5, 'IV'=>4, 'I'=>1);
  $return = '';
  while($integer > 0) {
      foreach($table as $rom=>$arb) {
          if($integer >= $arb) {
              $integer -= $arb;
              $return .= $rom;
              break;
          }
      }
  }
  return $return;
}

function adamant_akten($page = 0) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }
  global $base_url;
  drupal_add_css(drupal_get_path('module', 'adamant') .'/css/adamant.css', 'file');
  if (isset($_GET['page'])) {
    $page = (int) $_GET['page'];
  }
  $epp = 25;
  $offset = $epp * $page;

  $output = '';

  $count_akten = Database::getConnection('default', $dbc)
    ->select('"tabAktenSBDaten"', 'asb')
    ->fields('asb')
    ->countQuery()
    ->execute()
    ->fetchField();
  #$output .= print_r($count_akten, 1);

  if ($offset > $count_akten) {
    $offset = $count_akten - $epp;
    $page = floor($offset / $epp);
  }

  $output .= adamant_akten_pager($page, $count_akten, $epp);

  $values = array();
  $query = Database::getConnection('default', $dbc)
    ->select('"tabAktenSBDaten"', 'asb');
  $query->join('"tabAktenStammdaten"', 'asd', 'asd."IDAkte" = asb."IDAkte"');
  $query->join('"tabSB"', 'sb', 'sb."IDSB" = asd."Sachbearbeiter"');
  $query->join('"tabEEKateg"', 'eek', 'eek."IDEEKategorie" = asb."EE-Kategorie"');
  $query->join('"tabProbleme"', 'pro', 'pro."IDProblem" = asb."Problem"');
  $query
    ->fields('asb', array('"IDAkte"', '"Erstkontakt"'))
    ->fields('asd', array('"Aktenzeichen"'))
    ->fields('sb', array('"SB-Kürzel"'))
    ->fields('pro', array('"Problem"'))
    ->fields('eek', array('"EE-Kategorie"'))
    ->range($offset, $epp);
  $result = $query->execute();
  $output .= adamant_query_display($query);
  $output .= '<table>';
  $i = 0;
  while ($row = $result->fetchAssoc()) {
    if ($i == 0) {
      $output .= '<tr>';
      foreach ($row AS $id => $value) {
        $output .= '<th>'.$id.'</th>';
      }
      $output .= '</tr>';
    }
    $output .= '<tr>';
    foreach ($row AS $id => $value) {
      if ($id == 'IDAkte') {
        $output .= '<td><a href="'.$base_url.'/adamant/akte/'.$value.'">'.$value.'</a></td>';
      }
      else {
        $output .= '<td>'.$value.'</td>';
      }
    }
    $output .= '</tr>';
    $i++;
  }
  $output .= '</table>';

  return $output;
}

function adamant_akten_pager($page, $total, $epp) {
  $max = ceil($total / $epp);
  $p = '';
  for ($n = 1; $n <= $max; $n++) {
    if ($n < 4 || ($n > $page - 2 && $n < $page + 4) || $n > $max - 4) {
      if ($n == $page + 1) {
        $p .= '<span class="adamant-pager-item adamant-pager-item-current">' . $n . '</span>';
      }
      else {
        $p .= '<a class="adamant-pager-item" href="/adamant/akten/' . ($n - 1) . '">' . $n . '</a>';
      }
      $les = true;
    }
    else {
      if ($les) {
        $p .= '…';
        $les = false;
      }
    }
  }
  return $p;
}

function adamant_akte($aid) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }
  $output = '';
  $values = array();
  $query = Database::getConnection('default', $dbc)
    ->select('"tabAktenSBDaten"', 'asb');
  $query->join('"tabAktenStammdaten"', 'asd', 'asd."IDAkte" = asb."IDAkte"');
  $query->join('"tabSB"', 'sb', 'sb."IDSB" = asd."Sachbearbeiter"');
  $query->join('"tabEEKateg"', 'eek', 'eek."IDEEKategorie" = asb."EE-Kategorie"');
  $query->join('"tabProbleme"', 'pro', 'pro."IDProblem" = asb."Problem"');
  $query
    ->fields('asb', array('"IDAkte"', '"Erstkontakt"'))
    ->fields('asd', array('"Aktenzeichen"'))
    ->fields('sb', array('"SB-Kürzel"'))
    ->fields('pro', array('"Problem"'))
    ->fields('eek', array('"EE-Kategorie"'))
    ->condition('asb."IDAkte"', $aid);
  $result = $query->execute();

  $output .= adamant_query_display($query);

  $output .= '<table>';
  if ($row = $result->fetchAssoc()) {
    $output .= '<tr>';
    foreach ($row AS $id => $value) {
      $output .= '<th>'.$id.'</th>';
    }
    $output .= '</tr>';

    $output .= '<tr>';
    foreach ($row AS $id => $value) {
      $output .= '<td>'.$value.'</td>';
    }
    $output .= '</tr>';
  }
  $output .= '</table>';

  return $output;
}

function adamant_predefined($qid) {
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.core.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.dynamic.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.tooltips.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.context.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.effects.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.key.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.rect.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.text.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.pie.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.bar.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.hbar.js', 'file');

  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }
  global $base_url;

  $output = '';

  switch ($qid) {
    case 1:
    {
      $title = 'Ablagegründe Gesamt seit 2007';
      $subquery = Database::getConnection('default', $dbc)
        ->select('"tabAktenSBDaten"', 'asb');
      $subquery
        ->join('"tabAktenStammdaten"', 'asd', 'asd."IDAkte" = asb."IDAkte"');
      $subquery
        ->join('"tabAblGruende"', 'abl', 'abl."IDAblGrund" = asb."IDAblGrund"');
      $subquery
        ->fields('asd', array('"Aktenzeichen"'))
        ->fields('asb', array('"Abschl_formal"'))
        ->fields('abl', array('"Ablagegrund"'))
        ->isNotNull('abl."Ablagegrund"')
        ->condition('asd."Aktenzeichen"', 'S-%', 'NOT LIKE');
      $subquery
        ->orderBy('abl."Ablagegrund"');

      $query = Database::getConnection('default', $dbc)
        ->select($subquery, 'sub');
      $query
        ->fields('sub', array('"Ablagegrund"'))
        ->groupBy('sub."Ablagegrund"')
        ->addExpression('count(sub."Abschl_formal")::integer', '"Anzahl"');
      $query
        ->orderBy('sub."Ablagegrund"');
      break;
    }
    case 2:
    {
      $title = 'Ablagegründe je Quartal';
      $subquery = Database::getConnection('default', $dbc)
        ->select('"tabAktenSBDaten"', 'asb');
      $subquery
        ->join('"tabAktenStammdaten"', 'asd', 'asd."IDAkte" = asb."IDAkte"');
      $subquery
        ->join('"tabAblGruende"', 'abl', 'abl."IDAblGrund" = asb."IDAblGrund"');
      $subquery
        ->join('"tabVerfArten"', 'vfa', 'vfa."IDVerfArt" = asb."Verfahrensart"');
      $subquery
        ->join('"tabVerfStaende"', 'vfs', 'vfs."IDVerfStand" = asb."Verfahrensstand"');
      $subquery
        ->fields('asd', array('"Anfragedatum"','"Aktenzeichen"','"Bezeichnung"'))
        ->fields('vfa', array('"Verfahrensart"'))
        ->fields('vfs', array('"Verfahrensstand"'))
        ->fields('asb', array('"Abschl_formal"'))
        ->fields('abl', array('"Ablagegrund"'))
        ->isNotNull('abl."Ablagegrund"')
        ->condition('asd."Aktenzeichen"', 'S-%', 'NOT LIKE');
      $subquery
        ->addExpression('extract(quarter FROM "Abschl_formal")', '"Q"');
      $subquery
        ->addExpression('extract(year FROM "Abschl_formal")', '"Jahr"');
      $subquery
        ->orderBy('"Jahr"')
        ->orderBy('"Q"')
        ->orderBy('abl."Ablagegrund"');

      $query = Database::getConnection('default', $dbc)
        ->select($subquery, 'sub');
      $query
        ->fields('sub', array('"Jahr"','"Q"','"Ablagegrund"'))
        ->groupBy('sub."Jahr"')
        ->groupBy('sub."Q"')
        ->groupBy('sub."Ablagegrund"')
        ->addExpression('count(sub."Abschl_formal")', '"Anzahl"');
      $query
        ->orderBy('"Jahr"')
        ->orderBy('"Q"')
        ->orderBy('"Ablagegrund"');
      break;
    }
  }

  $output .= adamant_query_display($query);
  #$output .= adamant_query_display($subquery);
  #return $output;
  $result = $query->execute();
  drupal_set_title($title);

  $data = adamant_result_data($result);

  $output .= adamant_table_display($data);
  $output .= adamant_chart_display($data);

  return $output;
}

function adamant_custom($qid) {
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.core.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.dynamic.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.tooltips.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.context.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.effects.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.key.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.rect.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.text.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.pie.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.bar.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.hbar.js', 'file');

  $query = db_select('adamant_custom', 'a')
    ->fields('a')
    ->condition('qid', $qid)
    ->execute()
    ->fetchAssoc();

  if ($query) {
    $data = $query['query'];
    $title = $query['title'];
    $type = $query['type'];
    $chart = $query['chart'];
  }
  else {
    return 'Unbekannte ID.';
  }

  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }
  global $base_url;

  $output = '';

  $output .= '<p><a href="/adamant/query/edit/'.$qid.'">Edit this query</a></p>';

  if ($type == 'sql') {
    $sql = $data;
    $output .= adamant_sql_display($sql);
    $result = Database::getConnection('default', $dbc)->query($sql);
  }
  elseif ($type == 'pdo') {
    $sql = adamant_query_builder_form_convert_sql(json_decode($data, true));
    $output .= adamant_sql_display($sql);
    $result = Database::getConnection('default', $dbc)->query($sql);
  }
  else {
    return 'Unbekannter Typ.';
  }

  drupal_set_title($title);

  $data = adamant_result_data($result);

  $output .= adamant_table_display($data, $chart);
  if ($chart > 0) {
    $output .= adamant_chart_display($data, array('chart' => $chart));
  }

  return $output;
}

function adamant_query_sql($stored_query_id = null) {
  return drupal_get_form('adamant_query_sql_form', $stored_query_id);
}

function adamant_query_sql_form($form, &$form_state, $stored_query_id = null) {
  $sql = 'SELECT * FROM "tabAktenSBDaten"';
  $savename = '';
  $ct = 0;
  if (!is_null($stored_query_id)) {
    $query = db_select('adamant_custom', 'a')
      ->fields('a')
      ->condition('qid', $stored_query_id)
      ->condition('type', 'sql')
      ->execute()
      ->fetchAssoc();

    if ($query && isset($query['query'])) {
      $sql = $query['query'];
      $savename = $query['title'];
      $ct = $query['chart'];
      $form_state['stored_query_id'] = $stored_query_id;
    }
  }

  $form['#tree'] = TRUE;

  // Add a wrapper div that will be used by the Form API to update the form using AJAX
  $form['#prefix'] = '<div id="adamant_query_sql_form">';
  $form['#suffix'] = '</div>';

  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $form['savename'] =  array(
    '#type' => 'textfield',
    '#title' => 'Titel',
    '#prefix' => '<div class="db-title-wrapper">',
    '#suffix' => '</div>',
    '#default_value' => $savename,
    '#description' => 'Unter dieser Bezeichnung wird die Datenbankabfrage in der Liste der gespeicherten Abfragen angezeigt.',
  );

  $form['sql'] = array(
    '#title' => t('SQL'),
    '#type' => 'textarea',
    '#default_value' => $sql,
    '#description' => 'Bitte alle Feld- und Tabellennamen mit doppelten Anführungszeichen versehen.',
  );

  $ct_options = array(
    0 => 'Keine Grafik, nur tabellarische Daten.',
    1 => 'Kreisdiagramm',
    2 => 'Säulendiagramm',
    3 => 'Balkendiagramm',
  );
  $form['chart'] = array(
    '#title' => t('Chart Typ'),
    '#type' => 'select',
    '#default_value' => $ct,
    '#options' => $ct_options,
    '#description' => 'Bitte den bevorzugten Charttypen für diese Abfrage wählen.',
  );

  // Create a container for our buttons
  $form['buttons'] = array
  (
    '#type' => 'container',
    '#weight' => 99,
  );

  $form['buttons']['submit'] = array
  (
    '#type' => 'submit',
    '#value' => 'Speichern',
  );

  return $form;
}

function adamant_query_sql_form_submit($form, &$form_state) {
  // First we determine which step we are on, and save the
  // submitted values to $form_state['storage']. This will
  // allow our submitted values to persist.
  $savename = $form_state['values']['savename'];
  $data = array(
    'title' => $form_state['values']['savename'],
    'type' => 'sql',
    'query' => $form_state['values']['sql'],
    'chart' => $form_state['values']['chart']
  );

  if (isset($form_state['stored_query_id'])) {
    $qid = db_update('adamant_custom')
      ->fields($data)->condition('qid', $form_state['stored_query_id'])->execute();
    if ($qid) { $qid = $form_state['stored_query_id']; }
  }
  else {
    $qid = db_insert('adamant_custom')
      ->fields($data)->execute();
  }
  if ($qid) {
    drupal_set_message('Die Abfrage <strong>'.$savename.'</strong> wurde gespeichert. Die <a href="/adamant/query/custom/'.$qid.'">vollständige Ansicht der Ergebnisse</a> ist ab sofort verfügbar.', 'status', FALSE);
    $form_state['step'] = 1;
    $form_state['multistep_values'] = array();
  }
  else {
    drupal_set_message(t('Error'), 'error', FALSE);
  }

  $form_state['rebuild'] = TRUE;
}

function adamant_query_edit($stored_query_id = null) {
  if (!is_null($stored_query_id)) {
    $query = db_select('adamant_custom', 'a')
      ->fields('a')
      ->condition('qid', $stored_query_id)
      ->execute()
      ->fetchAssoc();

    if ($query && isset($query['type'])) {
      switch ($query['type']) {
        case 'sql': $path = 'query/sql/'.$stored_query_id; break;
        case 'pdo': $path = 'query/builder/'.$stored_query_id; break;
        default: $path = ''; break;
      }
      drupal_goto('adamant/'.$path);
    }
  }

  return drupal_get_form('adamant_query_builder_multistep_form', $stored_query_id);
}

function adamant_query_builder($stored_query_id = null) {
  return drupal_get_form('adamant_query_builder_multistep_form', $stored_query_id);
}

function adamant_query_builder_multistep_form($form, &$form_state, $stored_query_id = null) {
  $steps = 5;
  drupal_add_css(drupal_get_path('module', 'adamant') .'/css/query_builder.css', 'file');

  if (!isset($form_state['step']) && !is_null($stored_query_id)) {
    $query = db_select('adamant_custom', 'a')
      ->fields('a')
      ->condition('qid', $stored_query_id)
      ->condition('type', 'pdo')
      ->execute()
      ->fetchAssoc();

    if ($query && isset($query['query'])) {
      $form_state['multistep_values'] = json_decode($query['query'], true);
      $form_state['stored_query_id'] = $stored_query_id;
    }
  }

  // If $form_state['step'] is not set, we set it to 1
  $form_state['step'] = isset($form_state['step']) ? $form_state['step'] : 1;
  if ($form_state['step'] > $steps) {
    $commands = array();
    $commands[] = array
    (
      // Note: we will use this command in the .js file
      'command' => 'redirectUser',
      // The path the user is directed to is given here
      'path' => '/adamant/query/result?query=' . urlencode($form_state['values']['step_5']['query']),
    );
    return array('#type' => 'ajax', '#commands' => $commands);
    drupal_exit();
  }

  $form['#tree'] = TRUE;

  // Add a wrapper div that will be used by the Form API to update the form using AJAX
  $form['#prefix'] = '<div id="adamant_query_builder_multistep_form">';
  $form['#suffix'] = '</div>';

  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $form_function = 'adamant_query_builder_multistep_form_step_' . $form_state['step'];
  $form_function($form, $form_state);

  // Create a container for our buttons
  $form['buttons'] = array
  (
    '#type' => 'container',
    '#weight' => 99,
  );
  // If we are on step 1, we do not want a back button
  if($form_state['step'] !== 1)
  {
    $form['buttons']['back'] = array
    (
      '#type' => 'submit',
      '#value' => 'Zurück',
      // Setting #limit_validation_errors to an empty array
      // ensures that the form fields are not validated when
      // the back button is used. Otherwise, we will get errors
      '#limit_validation_errors' => array(),
      // We need to create a #submit function for this button, or else
      // #limit_validation_errors has no effect. So we create a submit
      // function specifically for this submit button.
      '#submit' => array('adamant_query_builder_multistep_form_back_submit'),
      '#ajax' => array
      (
        // We pass in the wrapper we created at the start of the form
        'wrapper' => 'adamant_query_builder_multistep_form',
        // We pass a callback function we will use later to render the form for the user
        'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
      ),
    );
  }
  // We only want a forward button if we are not on the last step of the form
  if($form_state['step'] !== $steps)
  {
    $form['buttons']['next'] = array
    (
      '#type' => 'submit',
      '#value' => 'Weiter',
      '#ajax' => array
      (
        // We pass in the wrapper we created at the start of the form
        'wrapper' => 'adamant_query_builder_multistep_form',
        // We pass a callback function we will use later to render the form for the user
        'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
      ),
    );
  }
  // We only want a submit button if we are on the last step of the form
  else
  {
    $form['buttons']['submit_sql'] = array
    (
      '#type' => 'submit',
      '#value' => 'SQL Speichern',
      '#ajax' => array
      (
        // We pass in the wrapper we created at the start of the form
        'wrapper' => 'adamant_query_builder_multistep_form',
        // We pass a callback function we will use later to render the form for the user
        'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
      ),
    );
    $form['buttons']['submit_pdo'] = array
    (
      '#type' => 'submit',
      '#value' => 'PDO Speichern',
      '#ajax' => array
      (
        // We pass in the wrapper we created at the start of the form
        'wrapper' => 'adamant_query_builder_multistep_form',
        // We pass a callback function we will use later to render the form for the user
        'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
      ),
    );
    $form['explanation'] = array('#markup' => '<p>Reine SQL-Abfragen können später nicht mehr bearbeitet werden. PDO-Objekte dagegen werden so gespeichert, dass sie in dieses Formular geladen und editiert werden können.</p>', '#weight' => 98);
  }

  $form['#attached']['js'][] = array
  (
    'type' => 'file',
    'data' => drupal_get_path('module', 'adamant') . '/js/query_builder_form.js',
  );

  return $form;
}

function adamant_query_builder_multistep_form_validate($form, &$form_state) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  switch ($form_state['step']) {
    case "1":
    {
      $tables = $form_state['values']['step_1']['table'];
      $basetable = array_shift($tables);
      $bases = array($basetable);
      $i = 1;
      foreach ($tables AS $table) {
        if ($table != '0') {
          $q = "SELECT
              tc.constraint_name, tc.table_name, kcu.column_name,
              ccu.table_name AS foreign_table_name,
              ccu.column_name AS foreign_column_name
            FROM
              information_schema.table_constraints AS tc
              JOIN information_schema.key_column_usage AS kcu
                ON tc.constraint_name = kcu.constraint_name
              JOIN information_schema.constraint_column_usage AS ccu
                ON ccu.constraint_name = tc.constraint_name
            WHERE constraint_type = 'FOREIGN KEY' AND ccu.table_name='".$table."'
              AND tc.table_name IN ('".implode("','",$bases)."')";
          $result = Database::getConnection('default', $dbc)->query($q);

          $data = adamant_result_data($result);
          if ($data) {
            $bases[] = $table;
          }
          else {
            $q2 = "SELECT
                tc.constraint_name, tc.table_name, kcu.column_name,
                ccu.table_name AS foreign_table_name,
                ccu.column_name AS foreign_column_name
              FROM
                information_schema.table_constraints AS tc
                JOIN information_schema.key_column_usage AS kcu
                  ON tc.constraint_name = kcu.constraint_name
                JOIN information_schema.constraint_column_usage AS ccu
                  ON ccu.constraint_name = tc.constraint_name
              WHERE constraint_type = 'FOREIGN KEY' AND ccu.table_name='".$table."'
                ";
            $result2 = Database::getConnection('default', $dbc)->query($q2);
            $data2 = adamant_result_data($result2);
            if ($data2) {
              $fktables = array();
              foreach ($data2 AS $fk) {
                $fktables[] = '<strong>`'.$fk['table_name'].'`</strong>';
              }
              form_set_error('step_1][table]['.$i, 'Bitte auf die Reihenfolge der Tabellen achten! Die Tabelle <strong>`'.$table.'`</strong> hat keinen Bezug zu vorher ausgewählten Tabellen, es gibt aber FOREIGN KEYS zu folgenden Tabellen: '.(implode(', ', $fktables)).'.');
            }
            else {
              form_set_error('step_1][table]['.$i, 'Bitte auf die Reihenfolge der Tabellen achten! Die Tabelle <strong>`'.$table.'`</strong> hat keinen Bezug zu vorher ausgewählten Tabellen, es konnten auch keine FOREIGN KEYS zu anderen Tabellen gefunden werden.');
            }
          }
        }
        $i++;
      }
      // Check that the first value is alphabetic
      #if (!preg_match('/^[a-zA-Z]+$/', $form_state['values']['step_1'])) {
        #form_set_error('step_1', t('Alphabetic characters only please'));
      #}

      break;
    }
    case "2":
    {
      // Check that the second value is numeric
      #if (preg_match('/\D/', $form_state['values']['step_2'])) {
        #form_set_error('step_2', t('Numeric characters only please'));
      #}

      break;
    }
    case "3":
    {
      // Check that the third value is alphanumeric
      #if (!preg_match('/^[a-zA-Z0-9]+$/', $form_state['values']['step_3'])) {
        #form_set_error('step_3', t('Alphanumeric characters only please'));
      #}

      break;
    }
  }
}

function adamant_query_builder_multistep_form_back_submit($form, &$form_state) {
  $form_state['step']--;

  // Because this is a multi-step form, we always need to rebuild the form
  // on every step, even after submission. This allows our form to be completely
  // Ajaxified without ever requiring a page load.
  $form_state['rebuild'] = TRUE;
}

function adamant_query_builder_multistep_form_submit($form, &$form_state) {
  // First we determine which step we are on, and save the
  // submitted values to $form_state['storage']. This will
  // allow our submitted values to persist.
  $step = $form_state['step'];
  $form_state['multistep_values']['step_' . $step] = $form_state['values']['step_' . $step];

  // Check to see if the next/forward button was clicked
  #var_dump($form_state['values']['buttons']['next']);
  #var_dump($form_state['values']['op']);
  if (isset($form_state['values']['buttons']['next']) && $form_state['values']['op'] == $form_state['values']['buttons']['next']) {
    // Increase the step by one, to move on to the next step
    $form_state['step']++;
  }
  // Check to see if the final step has been submitted
  elseif (isset($form_state['values']['buttons']['back']) && $form_state['values']['op'] == $form_state['values']['buttons']['back']) {
    // Increase the step by one, to move on to the next step
    $form_state['step']--;
  }
  // Check to see if the final step has been submitted
  elseif (isset($form_state['values']['buttons']['submit_sql']) && $form_state['values']['op'] == $form_state['values']['buttons']['submit_sql']) {
    // Here we will collect the data and show the submitted values to the user in a message.
    // In a real-world application of this form, you would use the submitted values to complete the
    // purpose of the form - save them to the database and/or send an email and/or display something
    // to the user etc. The following is just s simple example to show how the values can be used.
    $sql = $form_state['multistep_values']['step_5']['query'];
    $savename = $form_state['multistep_values']['step_5']['savename'];
    $chart = $form_state['multistep_values']['step_5']['chart'];
    $tag = $form_state['multistep_values']['step_5']['tag'];
    #array($form_state['multistep_values']['step_1'], $form_state['multistep_values']['step_2'], $form_state['multistep_values']['step_3']);
    #drupal_set_message(t('You submitted the following values: !values', array('!values' => theme('item_list', array('items' => $items)))));
    $data = array(
      'title' => $savename,
      'type' => 'sql',
      'query' => $sql,
      'chart' => $chart,
      'tag' => $tag,
    );
    drupal_set_message("COPY? [" . print_r($form_state['multistep_values']['step_5']['copy'],1) . "]", 'status');
    if (isset($form_state['stored_query_id']) && !$form_state['multistep_values']['step_5']['copy']) {
      $qid = db_update('adamant_custom')
        ->fields($data)->condition('qid', $form_state['stored_query_id'])->execute();
      if ($qid) { $qid = $form_state['stored_query_id']; }
    }
    else {
      $qid = db_insert('adamant_custom')
        ->fields($data)->execute();
    }
    if ($qid) {
      drupal_set_message('Die Abfrage <strong>'.$savename.'</strong> wurde gespeichert. Die <a href="/adamant/query/custom/'.$qid.'">vollständige Ansicht der Ergebnisse</a> ist ab sofort verfügbar.', 'status', FALSE);
      $form_state['step'] = 1;
      $form_state['multistep_values'] = array();
    }
    else {
      drupal_set_message(t('Error'), 'error', FALSE);
    }
    // The form has been completed, so we want to return the user to step 1
    // as well as clear any saved values.

  }
  elseif (isset($form_state['values']['buttons']['submit_pdo']) && $form_state['values']['op'] == $form_state['values']['buttons']['submit_pdo']) {
    // Here we will collect the data and show the submitted values to the user in a message.
    // In a real-world application of this form, you would use the submitted values to complete the
    // purpose of the form - save them to the database and/or send an email and/or display something
    // to the user etc. The following is just s simple example to show how the values can be used.
    $pdo = json_encode($form_state['multistep_values']);
    $savename = $form_state['multistep_values']['step_5']['savename'];
    $chart = $form_state['multistep_values']['step_5']['chart'];
    $tag = $form_state['multistep_values']['step_5']['tag'];
    #array($form_state['multistep_values']['step_1'], $form_state['multistep_values']['step_2'], $form_state['multistep_values']['step_3']);
    #drupal_set_message(t('You submitted the following values: !values', array('!values' => theme('item_list', array('items' => $items)))));
    #var_dump($pdo);
    $data = array(
      'title' => $savename,
      'type' => 'pdo',
      'query' => $pdo,
      'chart' => $chart,
      'tag' => $tag,
    );
    drupal_set_message("COPY? [" . print_r($form_state['multistep_values']['step_5']['copy'],1) . "]", 'status');
    if (isset($form_state['stored_query_id']) && !$form_state['multistep_values']['step_5']['copy']) {
      $qid = db_update('adamant_custom')
        ->fields($data)->condition('qid', $form_state['stored_query_id'])->execute();
      if ($qid) { $qid = $form_state['stored_query_id']; }
    }
    else {
      $qid = db_insert('adamant_custom')
        ->fields($data)->execute();
    }
    if ($qid) {
      drupal_set_message('Die Abfrage <strong>'.$savename.'</strong> wurde gespeichert. Die <a href="/adamant/query/custom/'.$qid.'">vollständige Ansicht der Ergebnisse</a> ist ab sofort verfügbar. Eine <a href="/adamant/query/builder/'.$qid.'">spätere Bearbeitung</a> ist ebenfalls möglich.', 'status', FALSE);
      $form_state['step'] = 1;
      $form_state['multistep_values'] = array();
    }
    else {
      drupal_set_message(t('Error'), 'error', FALSE);
    }
    // The form has been completed, so we want to return the user to step 1
    // as well as clear any saved values.

  }

  // As in ajax_form_multistep_form_back_submit(), we need to set
  // $form_state['rebuild'] to TRUE, in able to ensure that our
  // our form is rebuilt, allowing for the multi-step process
  $form_state['rebuild'] = TRUE;
}

function adamant_query_builder_multistep_form_step_1(&$form, &$form_state) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $values = isset($form_state['values']['step_1']) ? $form_state['values']['step_1'] : (isset($form_state['multistep_values']['step_1']) ? $form_state['multistep_values']['step_1'] : array());

  // Get available tables
  $tables = array(0 => '---');
  $result = Database::getConnection('default', $dbc)->query("SELECT tablename FROM pg_tables WHERE tableowner='adamantadmin' ORDER BY tablename");
  $data = adamant_result_data($result);
  foreach ($data AS $row) {
    $tables[$row['tablename']] = $row['tablename'];
  }

  $tables_real_num = 0;
  #if (isset($form_state['values']['tables']['table'])) {
  if (isset($values['table'])) {
    $tables_values = $values['table'];
    $i = 0;
    $tables_real_values = array();
    foreach ($tables_values AS $t => $data) {
      if ($tables_values[$t] != '0') {
        $tables_real_num++;
        $tables_real_values[$i] = $values['table'][$t];
        $i++;
      }
    }
    #$form_state['values']['tables']['table'] = $tables_real_values;
  }

  $form['step_1'] = array(
    '#type' => 'fieldset',
    '#title' => 'Tabellen',
    '#weight' => 2,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="tables-wrapper">',
    '#suffix' => '</div>',
    '#description' => 'Wählen Sie die Tabelle(n) für Ihre Abfrage aus.',
  );

  $form_state['num_tables'] = $tables_real_num ? $tables_real_num + 1 : 1;

  $i = 0;
  if (isset($values['table'])) {
    foreach ($values['table'] AS $tablename) {
      if ($tablename != '0') {
        $form['step_1']['table'][$i] = array(
          '#type' => 'select',
          '#title' => 'Tabelle #' . ($i + 1),
          '#options' => $tables,
          '#default_value' => array($tablename),
          '#description' => ($i == 0 ? '<strong>Diese Tabelle wird die Basistabelle Ihrer Abfrage.</strong>' : '<em>Diese Tabelle wird über einen JOIN mit der Basistabelle verknüpft.</em>'),
          '#ajax' => array(
            'event' => 'change',
            'wrapper' => 'adamant_query_builder_multistep_form', //'tables-wrapper',
            'callback' => 'adamant_query_builder_multistep_form_ajax_callback', //'adamant_qb_tables_ajax_callback',
            'method' => 'replace',
          ),
        );
        $i++;
      }
    }
  }
  $form['step_1']['table'][$i] = array(
    '#type' => 'select',
    '#title' => 'Tabelle #' . ($i + 1),
    '#options' => $tables,
    '#description' => ($i == 0 ? '<strong>Diese Tabelle wird die Basistabelle Ihrer Abfrage.</strong>' : '<em>Diese Tabelle wird über einen JOIN mit der Basistabelle verknüpft.</em>'),
    '#ajax' => array(
      'event' => 'change',
      'wrapper' => 'adamant_query_builder_multistep_form', //'tables-wrapper',
      'callback' => 'adamant_query_builder_multistep_form_ajax_callback', //'adamant_qb_tables_ajax_callback',
      'method' => 'replace',
    ),
  );


  #return $form;
}

function adamant_query_builder_multistep_form_step_2(&$form, &$form_state) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $values = isset($form_state['values']['step_2']) ? $form_state['values']['step_2'] : (isset($form_state['multistep_values']['step_2']) ? $form_state['multistep_values']['step_2'] : array());

  $form['step_2'] = array(
    '#type' => 'fieldset',
    '#title' => 'Felder',
    '#weight' => 3,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="fields-wrapper">',
    '#suffix' => '</div>',
    '#description' => 'Wählen Sie die auszugebenden Felder für Ihre Abfrage aus.',
  );

  $tables = $form_state['multistep_values']['step_1']['table'];

  $i = 0;
  foreach ($tables AS $table) {
    if ($table != '0') {
      $fields = array();
      $result = Database::getConnection('default', $dbc)->query("SELECT *
        FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name   = '{$table}'");
      $data = adamant_result_data($result);
      foreach ($data AS $row) {
        $fields[$row['table_name'].'.'.$row['column_name']] = $row['column_name'] . ' (' . $row['data_type'] . ')';
      }
      $form['step_2']['field'][$table] = array(
        '#type' => 'checkboxes',
        '#title' => 'Felder auswählen für Tabelle "'.$table.'"',
        '#options' => $fields,
        '#default_value' => $values['field'][$table],
        '#prefix' => '<div class="db-field-selector-wrapper">',
        '#suffix' => '</div>',
      );
      $i++;
    }
  }

  $specials = array(
    'COUNT',
    'CUSTOM',
  );

  foreach ($specials AS $special) {
    $form['step_2']['specials'][$special] = array(
      '#type' => 'checkbox',
      '#title' => $special,
      '#default_value' => $values['specials'][$special],
      '#prefix' => '<div class="db-special-selector-wrapper">',
      '#suffix' => '</div>',
    );
    if ($special == 'CUSTOM') {
      $form['step_2']['specials']['custom_container'] = array(
        '#type' => 'container',
        '#states' => array(
          'invisible' => array(
            'input[name="step_2[specials][CUSTOM]"]' => array('checked' => FALSE),
          ),
        ),
      );
      $form['step_2']['specials']['custom_container']['expression'] =  array(
        '#type' => 'textarea',
        '#title' => '',
        '#default_value' => $values['specials']['custom_container']['expression'],
        '#prefix' => '<div class="db-special-custom-selector-wrapper">',
        '#suffix' => '</div>',
      );
    }
  }
  #$form['step_2']['debug'] = array('#markup' => '<h4>Debug Info</h4><pre>' . print_r($values, 1) . '</pre>');
}

function adamant_query_builder_multistep_form_step_3(&$form, &$form_state) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $values = isset($form_state['values']['step_3']) ? $form_state['values']['step_3'] : (isset($form_state['multistep_values']['step_3']) ? $form_state['multistep_values']['step_3'] : array());

  $form['step_3'] = array(
    '#type' => 'fieldset',
    '#title' => 'Bedingungen - Felder',
    '#weight' => 4,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="condition-fields-wrapper">',
    '#suffix' => '</div>',
    '#description' => 'Wählen Sie die Felder aus, auf die Sie Beschränkungen legen wollen.',
  );

  $tables = $form_state['multistep_values']['step_1']['table'];

  $i = 0;
  foreach ($tables AS $table) {
    if ($table != '0') {
      $fields = array();
      $result = Database::getConnection('default', $dbc)->query("SELECT *
        FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name   = '{$table}'");
      $data = adamant_result_data($result);
      foreach ($data AS $row) {
        $fields[$row['table_name'].'.'.$row['column_name']] = $row['column_name'] . ' (' . $row['data_type'] . ')';
      }
      $form['step_3']['field'][$table] = array(
        '#type' => 'checkboxes',
        '#title' => 'Felder auswählen für Tabelle "'.$table.'"',
        '#options' => $fields,
        '#default_value' => $values['field'][$table],
        '#prefix' => '<div class="db-field-selector-wrapper">',
        '#suffix' => '</div>',
      );
      $i++;
    }
  }
}

function adamant_query_builder_multistep_form_step_4(&$form, &$form_state) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $debug = array();

  $values = isset($form_state['values']['step_4']) ? $form_state['values']['step_4'] : (isset($form_state['multistep_values']['step_4']) ? $form_state['multistep_values']['step_4'] : array());

  $form['step_4'] = array(
    '#type' => 'fieldset',
    '#title' => 'Bedingungen - Logik',
    '#weight' => 5,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="condition-logic-wrapper">',
    '#suffix' => '</div>',
    '#description' => 'Geben Sie die zu beachtenden Bedingungen an.',
  );

  $condition_fields = $form_state['multistep_values']['step_3']['field'];

  $operator_options = array(
    'EQ' => '=',
    'GT' => '>',
    'LT' => '<',
    'GTE' => '>=',
    'LTE' => '<=',
    'IN' => 'IN',
    'BET' => 'BETWEEN',
    'NULL' => 'IS NULL',
    'EMP' => 'IS EMPTY',
    'LIKE' => 'LIKE',
  );

  if (count($condition_fields) > 0) {
    $form['step_4']['logic'] = array(
      '#type' => 'fieldset',
      '#title' => 'Feldbedingungen',
      '#weight' => 5,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#prefix' => '<div id="condition-logic-wrapper">',
      '#suffix' => '</div>',
    );
  }

  $debug[] = $condition_fields;
  $i = 0;
  foreach ($condition_fields AS $tableid => $fields) {
    $debug[] = $fields;
    $fields = array_filter($fields);
    $debug[] = $fields;
    foreach ($fields AS $field) {
      $field_name = explode('.', $field);
      $result = Database::getConnection('default', $dbc)->query("SELECT *
        FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name   = '{$field_name[0]}'
          AND column_name = '{$field_name[1]}'");
      $data = adamant_result_data($result);
      $debug[] = $field;
      $form['step_4']['logic'][$field] = array(
        '#type' => 'fieldset',
        '#title' => $field,
        '#weight' => $i,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        '#prefix' => '<div id="condition-logic-wrapper">',
        '#suffix' => '</div>',
        '#description' => 'Datentyp: ' . $data[0]['data_type'],
      );
      $tree = array('step_4', 'logic', $field);
      adamant_query_operator_form_constructor($form, $form_state, $tree, $data[0]);
      $i++;
    }
  }

  $tables = $form_state['multistep_values']['step_1']['table'];

  $fields = array(0 => '');
  foreach ($tables AS $table) {
    if ($table != '0') {
      $result = Database::getConnection('default', $dbc)->query("SELECT *
        FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name   = '{$table}'");
      $data = adamant_result_data($result);
      foreach ($data AS $row) {
        $fields[$row['table_name'].'.'.$row['column_name']] = $row['table_name'].'.'.$row['column_name'];
      }
    }
  }
  $fields['custom'] = 'CUSTOM';

  $i = 0;
  $group_bys = $values['group_by'];
  $specials = $form_state['multistep_values']['step_2']['specials'];
  $desc = '';
  if ($specials['COUNT'] == TRUE) {
    $desc = '<span style="font-weight:bold;color:#c00;">Sie haben bei den auszugebenden Feldern die Option "COUNT" angegeben, das kann nur in Verbindung mit einer Gruppierung funktionieren. Bitte mindestens ein Feld angeben.</span>';
  }
  $form['step_4']['group_by'] = array(
    '#type' => 'fieldset',
    '#title' => 'Gruppierung',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="condition-logic-groupby-wrapper">',
    '#suffix' => '</div>',
    '#weight' => 6,
    '#description' => 'Geben sie die Felder an, nach denen die Ergebnisse gruppiert werden sollen. ' . $desc,
  );
  foreach ($group_bys AS $group_by) {
    if ($values['group_by'][$i]['field'] != '0') {
      $form['step_4']['group_by'][$i]['field'] = array(
        '#type' => 'select',
        '#title' => 'Feld #' . ($i + 1),
        '#options' => $fields,
        '#default_value' => $values['group_by'][$i]['field'] ? $values['group_by'][$i]['field'] : 0,
        '#prefix' => '<div class="db-groupby-field-selector-wrapper">',
        '#suffix' => '</div>',
        '#ajax' => array(
          'event' => 'change',
          'wrapper' => 'adamant_query_builder_multistep_form',
          'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
          'method' => 'replace',
        ),
      );
      if ($values['group_by'][$i]['field'] == 'custom') {
        $form['step_4']['group_by'][$i]['custom_group_by'] =  array(
          '#type' => 'textfield',
          '#title' => '',
          '#default_value' => $values['group_by'][$i]['custom_group_by'] ? $values['group_by'][$i]['custom_group_by'] : '',
          '#prefix' => '<div class="db-special-custom-groupby-wrapper">',
          '#suffix' => '</div>',
        );
      }
      $i++;
    }
  }
  $form['step_4']['group_by'][$i]['field'] = array(
    '#type' => 'select',
    '#title' => 'Feld #' . ($i + 1),
    '#options' => $fields,
    '#default_value' => 0,
    '#prefix' => '<div class="db-groupby-field-selector-wrapper">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'event' => 'change',
      'wrapper' => 'adamant_query_builder_multistep_form',
      'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
      'method' => 'replace',
    ),
  );

  $i = 0;
  if ($specials['COUNT'] == TRUE) {
    $fields['cnt'] = 'COUNT';
  }
  $order_bys = $values['order_by'];
  $form['step_4']['order_by'] = array(
    '#type' => 'fieldset',
    '#title' => 'Sortierung',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="condition-logic-orderby-wrapper">',
    '#suffix' => '</div>',
    '#weight' => 7,
    '#description' => 'Geben sie die Felder an, nach denen die Ergebnisse sortiert werden sollen.',
  );
  foreach ($order_bys AS $order_by) {
    if ($values['order_by'][$i]['field'] != '0') {
      $form['step_4']['order_by'][$i]['field'] = array(
        '#type' => 'select',
        '#title' => 'Feld #' . ($i + 1),
        '#options' => $fields,
        '#default_value' => $values['order_by'][$i]['field'] ? $values['order_by'][$i]['field'] : 0,
        '#prefix' => '<div class="db-orderby-field-selector-wrapper">',
        '#suffix' => '</div>',
        '#ajax' => array(
          'event' => 'change',
          'wrapper' => 'adamant_query_builder_multistep_form',
          'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
          'method' => 'replace',
        ),
      );
      if ($values['order_by'][$i]['field'] == 'custom') {
        $form['step_4']['order_by'][$i]['custom_order_by'] =  array(
          '#type' => 'textfield',
          '#title' => '',
          '#default_value' => $values['order_by'][$i]['custom_order_by'] ? $values['order_by'][$i]['custom_order_by'] : '',
          '#prefix' => '<div class="db-special-custom-orderby-wrapper">',
          '#suffix' => '</div>',
        );
      }
      if (isset($values['order_by'][$i]['field']) && $values['order_by'][$i]['field'] !== 0) {
        $form['step_4']['order_by'][$i]['sort'] = array(
          '#type' => 'select',
          '#title' => 'Sortierungsrichtung für <em>' . $values['order_by'][$i]['field'] . '</em>',
          '#options' => array('ASC' => 'ASC', 'DESC' => 'DESC'),
          '#default_value' => $values['order_by'][$i]['sort'] ? $values['order_by'][$i]['sort'] : 'ASC',
          '#prefix' => '<div class="db-orderby-sort-selector-wrapper">',
          '#suffix' => '</div>',
        );
      }
      $i++;
    }
  }
  $form['step_4']['order_by'][$i]['field'] = array(
    '#type' => 'select',
    '#title' => 'Feld #' . ($i + 1),
    '#options' => $fields,
    '#default_value' => 0,
    '#prefix' => '<div class="db-orderby-field-selector-wrapper">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'event' => 'change',
      'wrapper' => 'adamant_query_builder_multistep_form',
      'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
      'method' => 'replace',
    ),
  );
  #$form['step_4']['debug'] = array('#markup' => '<pre>' . print_r($debug,1) . '</pre>');
}

function adamant_query_builder_multistep_form_step_5(&$form, &$form_state) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $form['step_5'] = array(
    '#type' => 'fieldset',
    '#title' => 'SQL Query',
    '#weight' => 6,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="condition-logic-wrapper">',
    '#suffix' => '</div>',
    '#description' => 'Hier können Sie das resultierende SQL Query prüfen.',
  );

  // ### SQL
  $query = adamant_query_builder_form_convert_sql($form_state['multistep_values']);

  $form['step_5']['query'] = array('#type' => 'hidden', '#value' => $query);
  $form['step_5']['savename'] =  array(
      '#type' => 'textfield',
      '#title' => 'Titel',
      '#prefix' => '<div class="db-title-wrapper">',
      '#suffix' => '</div>',
      '#required' => true,
      '#default_value' => isset($form_state['multistep_values']['step_5']['savename']) ? $form_state['multistep_values']['step_5']['savename'] : '',
      '#description' => 'Unter dieser Bezeichnung wird die Datenbankabfrage in der Liste der gespeicherten Abfragen angezeigt.',
    );
  $form['step_5']['copy'] = array(
    '#type' => 'checkbox',
    '#title' => "Als neue Kopie speichern?",
    '#default_value' => false,
    '#prefix' => '<div class="db-copy-wrapper">',
    '#suffix' => '</div>',
  );

  $ct_options = array(
    0 => 'Keine Grafik, nur tabellarische Daten.',
    1 => 'Kreisdiagramm',
    2 => 'Säulendiagramm',
    3 => 'Balkendiagramm',
  );

  $form['step_5']['chart'] = array(
    '#title' => t('Chart Typ'),
    '#type' => 'select',
    '#default_value' => isset($form_state['multistep_values']['step_5']['chart']) ? $form_state['multistep_values']['step_5']['chart'] : 0,
    '#options' => $ct_options,
    '#description' => 'Bitte den bevorzugten Charttypen für diese Abfrage wählen.',
  );
  $categories = array(
    0 => "Unsortiert",
    1 => "Zwischenbericht",
    2 => "Tätigkeitsbericht",
    3 => "Internetpräsenz",
    4 => "Sachbearbeiter",
    5 => "Controlling",
  );

  $form['step_5']['tag'] = array(
    '#title' => t('Kategorie'),
    '#type' => 'select',
    '#default_value' => isset($form_state['multistep_values']['step_5']['tag']) ? $form_state['multistep_values']['step_5']['tag'] : 0,
    '#options' => $categories,
    '#description' => 'Die Kategorisierung dient nur der Organisation der Auswahlseite.',
  );
  $form['step_5']['sql'] = array('#markup' => '<h4>Resultierendes SQL aus Direktübersetzung</h4><pre>' . adamant_sqlhl($query) . '</pre>');

  // ### PDO
  $pdo_query = adamant_query_builder_form_convert_pdo($form_state['multistep_values']);

  $form['step_5']['pdo'] = array('#markup' => '<h4>Resultierendes SQL aus PDO-Objekt</h4><pre>' . adamant_sqlhl($pdo_query->__toString()) . '</pre>'.adamant_sqlph($pdo_query->arguments()).'');

}

function adamant_query_builder_form_convert_sql($formdata) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $tables = $query_tables = array_filter($formdata['step_1']['table']);
  $fields = $formdata['step_2']['field'];
  $specials = $formdata['step_2']['specials'];
  $condition_fields = $formdata['step_3']['field'];
  $conditions = $formdata['step_4']['logic'];
  $groups = $formdata['step_4']['group_by'];
  $orders = $formdata['step_4']['order_by'];
  $basetable = array_shift($query_tables);
  $bases = array($basetable);
  $query = '';
  $query_fields = $where = $debug = array();
  $group_by_required = false;

  // ### SQL
  foreach ($fields AS $field) {
    $field = array_filter($field);
    if (count($field) > 0) {
      $query_fields[] = str_replace('.', '"."', '"' . implode('", "', $field) . '"');
    }
  }
  if ($specials['COUNT'] == true) {
    $query_fields[] = 'COUNT(*) AS cnt';
    $group_by_required = true;
  }
  if ($specials['CUSTOM'] == true) {
    $query_fields[] = str_replace("\n", ", ", $specials['custom_container']['expression']);
  }
  $operators = array(
    'EQ' => '=',
    'GT' => '>',
    'LT' => '<',
    'GTE' => '>=',
    'LTE' => '<=',
    'IN' => 'IN',
    'BETWEEN' => 'BETWEEN',
    'NULL' => 'IS NULL',
    'EMP' => 'IS EMPTY',
    'LIKE' => 'LIKE',
  );
  foreach ($conditions AS $field => $condition) {
    $con = '';
    $field_parts = explode('.', $field);
    if ($condition['negate'] == true) {
      $con .= 'NOT ';
    }
    $con .= '"' . $field_parts[0] . '"."' . $field_parts[1] . '" ' . $operators[$condition['operator']] . ' ';
    switch ($condition['operator']) {
      case 'BETWEEN':
      {
        $con .= (is_numeric($condition['comparison']) ? '' : "'") . $condition['comparison'] . (is_numeric($condition['comparison']) ? '' : "'") . ' AND ' . (is_numeric($condition['comparison']) ? '' : "'") . $condition['comparison2'] . (is_numeric($condition['comparison']) ? '' : "'") . ' ';
        break;
      }
      case 'IN':
      {
        $con .= "('" . implode("', '", $condition['comparison']) . "') ";
        break;
      }
      case 'LIKE':
      {
        $con .= "'%" . trim($condition['comparison']) . "%' ";
        break;
      }
      case 'NULL':
      {
        break;
      }
      case 'EMP':
      {
        $con .= "IS EMPTY ";
        break;
      }
      default:
      {
        $con .= (is_numeric($condition['comparison']) ? '' : "'") . $condition['comparison'] . (is_numeric($condition['comparison']) ? '' : "'") . ' ';
        break;
      }
    }
    $where[] = $con;
  }

  $query .= 'SELECT ' . implode(', ', $query_fields) . ' FROM "' . $basetable . '" ';

  foreach ($query_tables AS $table) {
    if ($table != '0') {
      $q = "SELECT
          tc.constraint_name, tc.table_name, kcu.column_name,
          ccu.table_name AS foreign_table_name,
          ccu.column_name AS foreign_column_name
        FROM
          information_schema.table_constraints AS tc
          JOIN information_schema.key_column_usage AS kcu
            ON tc.constraint_name = kcu.constraint_name
          JOIN information_schema.constraint_column_usage AS ccu
            ON ccu.constraint_name = tc.constraint_name
        WHERE constraint_type = 'FOREIGN KEY' AND ccu.table_name='".$table."'
          AND tc.table_name IN ('".implode("','",$bases)."')";
      $result = Database::getConnection('default', $dbc)->query($q);

      $data = adamant_result_data($result);

      if ($data) {
        $query .= 'INNER JOIN "' . $table . '" ON "' . $data[0]['foreign_table_name'] . '"."' . $data[0]['foreign_column_name'] . '" = "' . $data[0]['table_name'] . '"."' . $data[0]['column_name'] . '" ';
        $bases[] = $table;
      }
    }
  }

  $query .= count($where) > 0 ? ' WHERE ' . implode(' AND ', $where) : '';

  if ($group_by_required || count($groups) > 0) {
    $group_by = array();
    foreach ($groups AS $group) {
      if ($group['field'] != '0') {
        if ($group['field'] == 'custom') {
          $group_by[] = $group['custom_group_by'];
        }
        else {
          $field_parts = explode('.', $group['field']);
          $group_by[] = '"' . $field_parts[0] . '"."' . $field_parts[1] . '"';
        }
      }
    }
    if (count($group_by) > 0) {
      $query .= 'GROUP BY ' . implode(', ', $group_by) . ' ';
    }
  }

  if (count($orders) > 0) {
    $order_by = array();
    foreach ($orders AS $order) {
      if ($order['field'] == 'cnt') {
        $order_by[] = 'cnt ' . $order['sort'];
      }
      elseif ($order['field'] == 'custom') {
        $order_by[] =  $order['custom_order_by'] . ' ' . $order['sort'];
      }
      elseif ($order['field'] != '0') {
        $field_parts = explode('.', $order['field']);
        $order_by[] = '"' . $field_parts[0] . '"."' . $field_parts[1] . '" ' . $order['sort'];
      }
    }
    if (count($order_by) > 0) {
      $query .= 'ORDER BY ' . implode(', ', $order_by) . ' ';
    }
  }
  return $query;
}

function adamant_query_builder_form_convert_pdo($formdata) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $tables = $query_tables = array_filter($formdata['step_1']['table']);
  $fields = $formdata['step_2']['field'];
  $specials = $formdata['step_2']['specials'];
  $condition_fields = $formdata['step_3']['field'];
  $conditions = $formdata['step_4']['logic'];
  $groups = $formdata['step_4']['group_by'];
  $orders = $formdata['step_4']['order_by'];
  $basetable = array_shift($query_tables);
  $bases = array($basetable);
  $query = '';
  $query_fields = $where = $debug = array();
  $group_by_required = false;

  $pdo_query = Database::getConnection('default', $dbc)
    ->select('"' . $basetable . '"');
  if (isset($fields[$basetable]) && count(array_filter($fields[$basetable])) > 0) {
    $t_fields = array();
    foreach(array_filter($fields[$basetable]) AS $f) {
      $field_parts = explode('.', $f);
      $t_fields[] = '"' . $field_parts[1] . '"';
    }
    $pdo_query->fields('"' . $basetable . '"', $t_fields);
  }
  $t++;
  // joins
  foreach ($query_tables AS $table) {
    if ($table != '0') {
      $q = "SELECT
          tc.constraint_name, tc.table_name, kcu.column_name,
          ccu.table_name AS foreign_table_name,
          ccu.column_name AS foreign_column_name
        FROM
          information_schema.table_constraints AS tc
          JOIN information_schema.key_column_usage AS kcu
            ON tc.constraint_name = kcu.constraint_name
          JOIN information_schema.constraint_column_usage AS ccu
            ON ccu.constraint_name = tc.constraint_name
        WHERE constraint_type = 'FOREIGN KEY' AND ccu.table_name='".$table."'
          AND tc.table_name IN ('".implode("','",$bases)."')";
      $result = Database::getConnection('default', $dbc)->query($q);

      $data = adamant_result_data($result);

      if ($data) {
        $pdo_query->join('"' . $table . '"', '"' . $table . '"', '"' . $data[0]['foreign_table_name'] . '"."' . $data[0]['foreign_column_name'] . '" = "' . $data[0]['table_name'] . '"."' . $data[0]['column_name'] . '"');
        $bases[] = $table;

        if (isset($fields[$table]) && count(array_filter($fields[$table])) > 0) {
          $t_fields = array();
          foreach(array_filter($fields[$table]) AS $f) {
            $field_parts = explode('.', $f);
            $t_fields[] = '"' . $field_parts[1] . '"';
          }
          $pdo_query->fields('"' . $table . '"', $t_fields);
        }
      }
    }
  }

  if ($specials['CUSTOM'] == true) {
    $expressions = explode("\n", $specials['custom_container']['expression']);
    foreach ($expressions AS $expression) {
      if (strpos($expression, " AS ") !== FALSE) {
        $exp_parts = explode(' AS ', $expression);
        $pdo_query->addExpression($exp_parts[0], $exp_parts[1]);
      }
      elseif (strpos($expression, " as ") !== FALSE) {
        $exp_parts = explode(' as ', $expression);
        $pdo_query->addExpression($exp_parts[0], $exp_parts[1]);
      }
      else {
        $pdo_query->addExpression($expression);
      }
    }

  }

  if ($specials['COUNT'] == true) {
    $pdo_query->addExpression('COUNT(*)::integer', 'cnt');
  }


  if (count($groups) > 0) {
    $g = 0;
    foreach($groups AS $group) {
      $debug[] = 'FOREACH: ' . $group['field'];
      if ($group['field'] != "0") {
        if ($group['field'] == "custom") {
          #$pdo_query->groupBy($group['custom_group_by']);
          $groupby = &$pdo_query->getGroupBy();
          $groupby[$g] = $group['custom_group_by'];
        }
        else {
          $debug[] = 'IF: ' . $group['field'];
          $field_parts = explode('.', $group['field']);
          $query_field_name = '"' . $field_parts[0] . '"."' . $field_parts[1] . '"';
          $pdo_query->groupBy($query_field_name);
                  }
        $g++;
      }
    }
  }

  if (count($orders) > 0) {
    $o = 0;
    $order_by = array();
    foreach ($orders AS $order) {
      if ($order['field'] == 'cnt') {
        $pdo_query->orderBy('cnt', $order['sort']);
      }
      elseif ($order['field'] == 'custom') {
        #$pdo_query->orderBy($order['custom_order_by'], $order['sort']);
        $orderby = &$pdo_query->getOrderBy();
        $orderby[$order['custom_order_by']] = $order['sort'];
      }
      elseif ($order['field'] != '0') {
        $field_parts = explode('.', $order['field']);
        $pdo_query->orderBy('"' . $field_parts[0] . '"."' . $field_parts[1] . '"', $order['sort']);
      }
      $o++;
    }
  }

  $operators = array(
    'EQ' => '=',
    'GT' => '>',
    'LT' => '<',
    'GTE' => '>=',
    'LTE' => '<=',
    'IN' => 'IN',
    'BETWEEN' => 'BETWEEN',
    'NULL' => 'IS NULL',
    'EMP' => 'IS EMPTY',
    'LIKE' => 'LIKE',
  );


  foreach ($conditions AS $field => $condition) {
    //->condition('asd."Aktenzeichen"', 'S-%', 'NOT LIKE');
    $field_parts = explode('.', $field);
    $query_field_name = '"' . $field_parts[0] . '"."' . $field_parts[1] . '"';
    $neg = false;
    if ($condition['negate'] == true) {
      $neg = true;
    }

    switch ($condition['operator']) {
      case 'BETWEEN':
      {
        $pdo_query->condition($query_field_name, array($condition['comparison'], $condition['comparison2']), ($neg ? 'NOT ' : '') . 'BETWEEN');
        break;
      }
      case 'IN':
      {
        $pdo_query->condition($query_field_name, $condition['comparison'], ($neg ? 'NOT ' : '') . 'IN');
        break;
      }
      case 'LIKE':
      {
        $pdo_query->condition($query_field_name, "%" . trim($condition['comparison']) . "%", ($neg ? 'NOT ' : '') . 'LIKE');
        break;
      }
      case 'NULL':
      {
        if ($neg) {
          $pdo_query->isNotNull($query_field_name);
        }
        else {
          $pdo_query->isNull($query_field_name);
        }
        break;
      }
      case 'EMP':
      {
        break;
      }
      default:
      {
        $cop = $op = $operators[$condition['operator']];
        if ($neg) {
          switch ($cop) {
            case '=': $op = '!='; break;
            case '>': $op = '<='; break;
            case '<': $op = '>='; break;
            case '>=': $op = '<'; break;
            case '<=': $op = '>'; break;
          }
        }
        $pdo_query->condition($query_field_name, $condition['comparison'], $op);
        break;
      }
    }
  }
  return $pdo_query;
}

function adamant_query_operator_form_constructor(&$form, &$form_state, $tree, $data) {
  $dbc = adamant_dbconn();
  if (!$dbc) {
    return t('Connection to Adamant DB could not be established.');
  }

  $values = isset($form_state['values'][$tree[0]]) ? $form_state['values'][$tree[0]] : (isset($form_state['multistep_values'][$tree[0]]) ? $form_state['multistep_values'][$tree[0]] : array());

  switch ($data['data_type']) {
    case 'integer':
    case 'smallint':
    case 'bigint':
    case 'real':
    case 'date':
    {
      $operator_options = array(
        'EQ' => '=',
        'GT' => '>',
        'LT' => '<',
        'GTE' => '>=',
        'LTE' => '<=',
        'IN' => 'IN',
        'BETWEEN' => 'BETWEEN',
        'NULL' => 'IS NULL',
      );
      $value_type = 'textfield';
      break;
    }
    case 'character':
    case 'character varying':
    case 'name':
    case 'text':
    {
      $operator_options = array(
        'EQ' => '=',
        'IN' => 'IN',
        'NULL' => 'IS NULL',
        'LIKE' => 'LIKE',
      );
      $value_type = 'textfield';
      break;
    }
    case 'boolean':
    {
      $operator_options = array(
        'IS' => 'IS',
        'NOT' => 'IS NOT',
      );
      $value_type = 'select';
      $value_options = array(
        'TRUE' => 'TRUE',
        'FALSE' => 'FALSE',
      );
      break;
    }
    default:
    {
      $operator_options = array(
        'EQ' => '=',
        'GT' => '>',
        'LT' => '<',
        'GTE' => '>=',
        'LTE' => '<=',
        'IN' => 'IN',
        'BETWEEN' => 'BETWEEN',
        'NULL' => 'IS NULL',
      );
      $value_type = 'textfield';
      break;
    }
  }
  array_unshift($operator_options, null);
  $form[$tree[0]][$tree[1]][$tree[2]]['operator'] =  array(
    '#type' => 'select',
    '#title' => 'Operator',
    '#default_value' => isset($values[$tree[1]][$tree[2]]['operator']) ? $values[$tree[1]][$tree[2]]['operator'] : array(),
    '#options' => $operator_options,
    '#prefix' => '<div class="db-logic-operator-wrapper">',
    '#suffix' => '</div>',
    '#weight' => 3,
    '#ajax' => array(
      'event' => 'change',
      'wrapper' => 'adamant_query_builder_multistep_form',
      'callback' => 'adamant_query_builder_multistep_form_ajax_callback',
      'method' => 'replace',
    ),
  );

  $q = 'SELECT "' . $data["column_name"] . '" AS dbval FROM "' . $data["table_name"] . '" t GROUP BY "'. $data["column_name"] . '" ORDER BY "'. $data["column_name"] . '"';
    #var_dump($q);
  $result = Database::getConnection('default', $dbc)->query($q);
  $db_values = adamant_result_data($result);
  $value_options = array();
  foreach ($db_values AS $db_value) {
    $value_options[$db_value['dbval']] = $db_value['dbval'] ? $db_value['dbval'] : 0;
  }
  if (in_array($data['data_type'], array('integer', 'real', 'smallint', 'bigint', 'date'))) {
    $min = min($value_options);
    $max = max($value_options);
    $cnt = count($value_options);
    if ($cnt > 1 && $max != $min) {
      $form[$tree[0]][$tree[1]][$tree[2]]['range'] = array('#markup' => 'In der Datenbank sind ' . $cnt . ' verschiedene Werte zwischen <strong>' . $min . '</strong> und <strong>' . $max . '</strong> gespeichert.', '#weight' => 2);
    }
    else {
      $form[$tree[0]][$tree[1]][$tree[2]]['range'] = array('#markup' => 'In der Datenbank ist nur ein Wert (<strong>' . $max . '</strong>) gespeichert.', '#weight' => 2);
    }
  }
  if (in_array($values[$tree[1]][$tree[2]]['operator'], array('EQ', 'IN', 'IS', 'NOT'))) {
    $form[$tree[0]][$tree[1]][$tree[2]]['comparison'] =  array(
      '#type' => 'select',
      '#title' => 'Vergleichswert' . $values[$tree[1]][$tree[2]]['operator'] == 'IN' ? '(e)' : '',
      '#default_value' => isset($values[$tree[1]][$tree[2]]['comparison']) ? $values[$tree[1]][$tree[2]]['comparison'] : array(),
      '#multiple' => $values[$tree[1]][$tree[2]]['operator'] == 'IN' ? true : false,
      '#options' => $value_options,
      '#prefix' => '<div class="db-logic-comparison-wrapper">',
      '#suffix' => '</div>',
      '#weight' => 4,
    );
  }
  elseif (in_array($values[$tree[1]][$tree[2]]['operator'], array('GT', 'GTE', 'LT', 'LTE', 'LIKE', 'BETWEEN'))) {
    $form[$tree[0]][$tree[1]][$tree[2]]['comparison'] =  array(
      '#type' => 'textfield',
      '#title' => 'Vergleichswert' . ($values[$tree[1]][$tree[2]]['operator'] == 'BETWEEN' ? ' - von' : ''),
      '#default_value' => isset($values[$tree[1]][$tree[2]]['comparison']) ? $values[$tree[1]][$tree[2]]['comparison'] : '',
      '#multiple' => true,
      '#prefix' => '<div class="db-logic-comparison-wrapper">',
      '#suffix' => '</div>',
    '#weight' => 4,
    );
  }
  if (in_array($values[$tree[1]][$tree[2]]['operator'], array('BETWEEN'))) {
    $form[$tree[0]][$tree[1]][$tree[2]]['comparison2'] =  array(
      '#type' => 'textfield',
      '#title' => 'Vergleichswert' . ($values[$tree[1]][$tree[2]]['operator'] == 'BETWEEN' ? ' - bis' : ''),
      '#default_value' => isset($values[$tree[1]][$tree[2]]['comparison2']) ? $values[$tree[1]][$tree[2]]['comparison2'] : '',
      '#multiple' => true,
      '#prefix' => '<div class="db-logic-comparison-wrapper">',
      '#suffix' => '</div>',
      '#weight' => 5,
    );
  }
  $form[$tree[0]][$tree[1]][$tree[2]]['negate'] = array(
      '#type' => 'checkbox',
      '#title' => 'Bedingung negieren?',
      '#default_value' => $values[$tree[1]][$tree[2]]['negate'],
      '#prefix' => '<div class="db-logic-negate-wrapper">',
      '#suffix' => '</div>',
      '#weight' => 6,
    );
  /*$form['debug'] = array('#markup' => '<pre>' . adamant_sqlhl($q) . '</pre>'
    . '<pre>' . print_r($db_values,1) . '</pre>'
    . '<pre>' . print_r($value_options,1) . '</pre>');*/
}
function adamant_query_fav($stored_query_id = null) {
  if ($stored_query_id != null) {
    $data = array(
      'fav' => 'true',
    );
    $qid = db_update('adamant_custom')
      ->fields($data)->condition('qid', $stored_query_id)->execute();
  }
  #return $qid;
  drupal_goto('/adamant');
}
function adamant_query_unfav($stored_query_id = null) {
  if ($stored_query_id != null) {
    $data = array(
      'fav' => 'false',
    );
    $qid = db_update('adamant_custom')
      ->fields($data)->condition('qid', $stored_query_id)->execute();
  }
  #return $qid;
  drupal_goto('/adamant');
}


function adamant_junk() {
/*
  $form['base'] = array(
    '#type' => 'fieldset',
    '#title' => 'Basisdaten',
    '#weight' => 1,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['base']['basetable'] = array(
    '#type' => 'select',
    '#title' => 'Basistabelle',
    '#options' => $tables,
    '#description' => 'Wählen Sie die Basistabelle für Ihre Abfrage aus.',
    '#ajax' => array(
      'event' => 'change',
      'wrapper' => 'basetable_fields',
      'callback' => 'adamant_basetable_fields_ajax_callback',
      'method' => 'replace',
    ),
  );

  $basetable = isset($form_state['values']['base']['basetable']) ? $form_state['values']['base']['basetable'] : 0;

  if ($basetable !== 0) {
    $fields = array();
    $result = Database::getConnection('default', $dbc)->query("SELECT *
    FROM information_schema.columns
    WHERE table_schema = 'public'
      AND table_name   = '{$basetable}'");
    $data = adamant_result_data($result);
    $i = 0;
    foreach ($data AS $row) {
      $fields[$row['table_name'].'.'.$row['column_name']] = $row['column_name'];
    }

    $form['base']['basetable_fields'] = array(
      '#type' => 'checkboxes',
      '#title' => 'Felder auswählen',
      '#options' => $fields,
      '#prefix' => '<div id="basetable_fields" class="db-field-selector-wrapper">',
      '#suffix' => '</div>',
    );
  }
  else {
    $form['base']['basetable_fields'] = array(
      '#markup'=> 'Bitte die Basistabelle wählen.',
    '#prefix' => '<div id="basetable_fields">',
    '#suffix' => '</div>'
    );
  }
  */

   /*
  $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => 'Tabellen',
    '#weight' => 2,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#prefix' => '<div id="tables-wrapper">',
    '#suffix' => '</div>',
    '#description' => 'Wählen Sie die Tabelle(n) für Ihre Abfrage aus.',
  );
  */
/*
    $jointable = isset($form_state['values']['joins']['join'][$i]['jointable']) ? $form_state['values']['joins']['join'][$i]['jointable'] : 0;

    if ($jointable !== 0) {
      $fields = array();
      $result = Database::getConnection('default', $dbc)->query("SELECT *
      FROM information_schema.columns
      WHERE table_schema = 'public'
        AND table_name   = '{$jointable}'");
      $data = adamant_result_data($result);
      $i = 0;
      foreach ($data AS $row) {
        $fields[$row['table_name'].'.'.$row['column_name']] = $row['column_name'];
      }

      $form['joins']['join'][$i]['jointable_fields'] = array(
        '#type' => 'checkboxes',
        '#title' => 'Felder auswählen',
        '#options' => $fields,
        '#prefix' => '<div id="jointable_'.$i.'_fields" class="db-field-selector-wrapper">',
        '#suffix' => '</div>',
      );
    }
    else {
      $form['joins']['join'][$i]['jointable_fields'] = array(
        '#markup'=> 'Bitte eine Tabelle wählen.',
      '#prefix' => '<div id="jointable_'.$i.'_fields">',
      '#suffix' => '</div>'
      );
    }
*/


/*
  $form['joins']['add_join'] = array(
    '#type' => 'submit',
    '#value' => 'Weitere Tabelle hinzufügen',
    '#submit' => array('adamant_jointable_add_more_add_one'),
    '#ajax' => array(
      'callback' => 'adamant_jointable_add_more_ajax_callback',
      'wrapper' => 'joins-wrapper',
    ),
  );
  if ($form_state['num_joins'] > 1) {
    $form['joins']['remove_join'] = array(
      '#type' => 'submit',
      '#value' => 'Letzte Tabelle entfernen',
      '#submit' => array('adamant_jointable_add_more_remove_one'),
      '#ajax' => array(
        'callback' => 'adamant_jointable_add_more_ajax_callback',
        'wrapper' => 'joins-wrapper',
      ),
    );
  }
  */
}

function adamant_query_builder_multistep_form_ajax_callback($form, &$form_state) {
  return $form;
}


function adamant_qb_tables_ajax_callback($form, &$form_state) {
  return $form;
}

function adamant_basetable_fields_ajax_callback($form, &$form_state) {
  return $form['base']['basetable_fields'];
}
function adamant_jointable_add_more_add_one($form, &$form_state) {
  $form_state['num_joins']++;
  $form_state['rebuild'] = TRUE;
}
function adamant_jointable_add_more_remove_one($form, &$form_state) {
  if ($form_state['num_joins'] > 1) {
    $form_state['num_joins']--;
  }
  $form_state['rebuild'] = TRUE;
}
function adamant_jointable_add_more_ajax_callback($form, $form_state) {
  return $form['joins'];
}
function adamant_jointable_fields_ajax_callback($form, $form_state) {
  $i = $form_state['triggering_element']['parameters']['join_index'];
  return $form['joins']['join'][$i]['jointable_fields'];
}














function adamant_components() {
  $cids = array(13,14, 12,16,23,11,15,24,9,10,1,70,71,72,6,74,17,20,21,26,67,28,29,30,31,32,33,35,37,38,40,68,42,44,45,69,48,49,50,51,52,54,55,56,59,57,60);
  // 58,61 = Email
  $output = '';
  $values = array();
  $query = " SELECT * FROM webform_component WHERE cid IN (".implode(',',$cids).")";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $values[$record['cid']] = $record;
  }
  $output .= '<table>';
  foreach ($cids AS $cid) {
    $component = $values[$cid];
    if ($component['type'] == 'fieldset') {
      if ($cid == 1) {
        $output .= '<tr><th colspan="3"><h4>'.$component['name'].'</h4></th><th><a href="/adamant/complex/'.$cid.'/categorize/0">Probleme kategorisieren</a></th></tr>';
      }
      else {
        $output .= '<tr><th colspan="4"><h4>'.$component['name'].'</h4></th></tr>';
      }
    }
    else {
      $output .= '<tr><td>'.$cid.'</td><td>'.$component['name'].'</td><td><a href="/adamant/component/'.$cid.'/0">Antworten ansehen</a></td><td>';
      $query = " SHOW TABLES LIKE 'adamant_component_".$cid."'";
      $result = db_query($query);
      if ($record = $result->fetchAssoc()) {
        $output .= '<a href="/adamant/component/'.$cid.'/categorize/0">Antworten kategorisieren</a>';
      }
      $output .= '</td></tr>';
    }
  }
  $output .= '</table>';

  return $output;
}

function adamant_component($cid, $offset) {
  $cids = array(13,14, 12,16,23, 11,15,24, 9,10, 1,70,71,72,6,74, 17,20,21, 26,67, 28,29,30, 31,32,33, 35,37,38, 40,68,42, 44,45,69, 48,49,50, 51,52, 54,55, 56,59,57,60);
  // 58,61 = Email
  if (!in_array($cid, $cids)) {
    return "Ungültige CID";
  }
  $output = '';
  $values = $component = array();
  $query = " SELECT * FROM webform_component WHERE nid = 89 AND cid = {$cid} ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $component = $record;
  }
  $query = " SELECT COUNT(DISTINCT(sid)) AS total FROM webform_submitted_data WHERE cid = {$cid} AND TRIM(data) <> '' ";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $total = $record['total'];
  }
  $sids = array();
  $query = " SELECT DISTINCT(sid) FROM webform_submitted_data WHERE cid = {$cid} AND data <>'' ";
  if ($offset) {
    $query .= " LIMIT {$offset}, 10 ";
  }
  else {
   $query .= " LIMIT 10 ";
  }
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $sids[] = $record['sid'];
  }
  $query = " SELECT * FROM webform_submitted_data WHERE cid = {$cid} AND data <>'' AND sid IN (".(implode(",",$sids)).") ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $values[$record['sid']][$record['cid']][$record['no']] = $record;
  }
  $output .= '<h2>' . ucfirst($component['type']) . ': ' . $component['name'] . '</h2><h3>' . $total . ' Antworten insgesamt zu dieser Frage</h3>';
  switch ($component['type']) {
    case 'select':
      $extra = unserialize($component['extra']);
      $options_code = explode("\n",$extra['items']);
      $options = array();
      foreach ($options_code AS $option_code) {
        $kv = explode("|",$option_code);
        $options[$kv[0]] = $kv[1];
      }
      foreach ($options AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      break;
    case 'textfield':
      #$output .= 'Freitext (einzeilig)';
      break;
    case 'textarea':
      #$output .= 'Freitext (mehrzeilig)';
      break;
    case 'email':
      #$output .= 'E-Mail';
      break;
    case 'number':
      #$output .= 'Zahl';
      break;
    case 'grid':
      #$output .= 'Grid';
      #$output .= '<pre>' . print_r($component,1) . '</pre>';
      #$output .= '<pre>' . print_r($component['extra'],1) . '</pre>';
      $extra = unserialize($component['extra']);
      $options_code = explode("\n",$extra['options']);
      $options = array();
      foreach ($options_code AS $option_code) {
        $kv = explode("|",$option_code);
        if (count($kv) == 2) {
          $options[$kv[0]] = $kv[1];
        }
      }
      $questions_code = explode("\n",$extra['questions']);
      $questions = array();
      foreach ($questions_code AS $question_code) {
        $kv = explode("|",$question_code);
        if (count($kv) == 2) {
          $questions[$kv[0]] = $kv[1];
        }
      }
      $output .= "<u>Fragen</u><br>";
      foreach ($questions AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      $output .= "<u>Antworten</u><br>";
      foreach ($options AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      break;
    case 'fieldset':
      #$output .= '<h4>' . $component['name'] . '</h4>';
  }
  $output .= '<table>';
  foreach ($values AS $sid => $sdata) {
    if (!in_array($component['type'],array('markup','pagebreak'))) {
      $output .= '<tr><td><strong><a href="/adamant/submission/'.$sid.'">'.$sid.'</a></strong>';
      $output .= '</td><td>';
      if (isset($values[$sid][$cid])) {
        $acount = 0;
        $output .= '<ul>';
        foreach($values[$sid][$cid] AS $answer) {
          if (!isset($answer['data']) || is_null($answer['data']) || $answer['data'] == '') {
            continue;
          }
          $acount++;
          $output .= '<li>';
          #$output .= $answer['no'] . ': ';
          if (strpos($answer['no'],'#') !== FALSE) {
            $multi_no = explode('#', $answer['no']);
            $no = array_pop($multi_no);
            $multi_par = explode('|',array_pop($multi_no));
            $multi_index = array_shift($multi_par);
            $output .= "<strong>[" . $multi_index . "]</strong> ";
          }
          elseif ($cid == 6) {
            $no = $answer['no'];
            $output .= "<strong>[" . $no . "]</strong> ";
          }
          else {
            $no = $answer['no'];
          }
          switch ($component['type']) {
            case 'select':
              $output .= $options[$answer['data']] . '<br>';
              break;
            case 'grid':
              $output .= $questions[$no] . '<br><em>' . $options[$answer['data']] . '</em><br>';
              break;
            default:
              $output .= $answer['data'] . '<br>';
          }
          $output .= '</li>';
        }
      }
      $output .= '</td>';
      $output .= '</tr>';
    }
  }
  $output .= '</table>';

  // pager
  $output .= adamant_pager($total, $offset, 10, "/adamant/component/[cid]/[offset]", array('cid' => $cid));

  return $output;
}

function adamant_component_categorize($cid, $offset = 0) {
  if (in_array($cid, array())) {
    return adamant_component_categorize_single($cid, $offset);
  }
  elseif (in_array($cid, array(21,23,24,30,33,42,50,69))) {
    return adamant_component_categorize_multi($cid, $offset);
  }
  elseif (in_array($cid, array(38))) {
    return adamant_component_categorize_duplex($cid, $offset);
  }
  else {
    return 'Für diese Komponente steht noch keine Auswertung zur Verfügung';
  }
}
function adamant_component_categorize_single($cid, $offset = 0) {
  $output = '';
  $offset = 10 * floor($offset / 10);
  $values = $component = array();
  $query = " SELECT * FROM webform_component WHERE nid = 89 AND cid = {$cid} ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $component = $record;
  }
  $showform = false;
  $query = " SHOW TABLES LIKE 'adamant_component_".$cid."'";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $showform = true;
  }
  $query = " SELECT COUNT(*) AS total FROM webform_submitted_data WHERE cid = {$cid} AND TRIM(data) <> '' ";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $total = $record['total'];
  }
  $query = " SELECT * FROM webform_submitted_data WHERE cid = {$cid} AND TRIM(data) <> '' ";
  if ($offset) {
    $query .= " LIMIT {$offset}, 10 ";
  }
  else {
   $query .= " LIMIT 10 ";
  }
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $values[$record['sid']][$record['cid']][$record['no']] = $record;
  }
  $output .= '<h2>' . ucfirst($component['type']) . ': ' . $component['name'] . '</h2>';
  switch ($component['type']) {
    case 'select':
      $extra = unserialize($component['extra']);
      $options_code = explode("\n",$extra['items']);
      $options = array();
      foreach ($options_code AS $option_code) {
        $kv = explode("|",$option_code);
        $options[$kv[0]] = $kv[1];
      }
      foreach ($options AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      break;
    case 'textfield':
      #$output .= 'Freitext (einzeilig)';
      break;
    case 'textarea':
      #$output .= 'Freitext (mehrzeilig)';
      break;
    case 'email':
      #$output .= 'E-Mail';
      break;
    case 'number':
      #$output .= 'Zahl';
      break;
    case 'grid':
      #$output .= 'Grid';
      #$output .= '<pre>' . print_r($component,1) . '</pre>';
      $extra = unserialize($component['extra']);
      $options_code = explode("\n",$extra['options']);
      $options = array();
      foreach ($options_code AS $option_code) {
        $kv = explode("|",$option_code);
        $options[$kv[0]] = $kv[1];
      }
      $questions_code = explode("\n",$extra['questions']);
      $questions = array();
      foreach ($questions_code AS $question_code) {
        $kv = explode("|",$question_code);
        $questions[$kv[0]] = $kv[1];
      }
      $output .= "<u>Fragen</u><br>";
      foreach ($questions AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      $output .= "<u>Antworten</u><br>";
      foreach ($options AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      break;
    case 'fieldset':
      #$output .= '<h4>' . $component['name'] . '</h4>';
  }
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  $output .= '<form id="adamant-form-component-categorize-'.$cid.'" class="adamant-form-component-categorize" method="post" action="/adamant/form/submit/component/categorize/'.$cid.'">';
  $output .= '<input type="hidden" name="offset" value="'.$offset.'" />';
  $output .= '<table>';
  foreach ($values AS $sid => $sdata) {
    if (!in_array($component['type'],array('markup','pagebreak'))) {
      $output .= '<tr>';
      #$output .= '<td><strong><a href="/adamant/submission/'.$sid.'">'.$sid.'</a></strong></td>';
      $output .= '<td>';
      if (isset($values[$sid][$cid])) {
        $acount = 0;
        $output .= '<table>';
        foreach($values[$sid][$cid] AS $answer) {
          if (!isset($answer['data']) || is_null($answer['data']) || $answer['data'] == '') {
            continue;
          }
          $acount++;
          $output .= '<tr class="cc-original">';
          #$output .= '<td rowspan="2">' . $answer['no'] . '</td>';
          $output .= '<td width="20%"><strong>Originalantwort</strong></td><td width="80%">';
          #$output .= $answer['no'] . ': ';
          if (strpos($answer['no'],'#') !== FALSE) {
            $multi_no = explode('#', $answer['no']);
            $no = array_pop($multi_no);
            $multi_par = explode('|',array_pop($multi_no));
            $multi_index = array_shift($multi_par);
            $output .= "<strong>[" . $multi_index . "]</strong> ";
          }
          elseif ($cid == 6) {
            $no = $answer['no'];
            $output .= "<strong>[" . $no . "]</strong> ";
          }
          else {
            $no = $answer['no'];
          }
          switch ($component['type']) {
            case 'select':
              $output .= $options[$answer['data']] . '<br>';
              break;
            case 'grid':
              $output .= $questions[$no] . '<br><em>' . $options[$answer['data']] . '</em><br>';
              break;
            default:
              $output .= $answer['data'] . '<br>';
          }

          $options = array();
          $dbid = 0;
          $simplified = '';
          $query = " SELECT id, simplified FROM adamant_component_{$cid} WHERE sid = {$sid} AND no = {$no} ";
          $result = db_query($query);
          if ($record = $result->fetchAssoc()) {
            $options[$record['id']] = $record['simplified'];
            $dbid = $record['id'];
            $simplified = $record['simplified'];
          }
          $query = " SELECT id, simplified FROM adamant_component_{$cid} WHERE simplified <> :simplified GROUP BY simplified ORDER BY simplified ASC ";
          $dbv = array(
            ':simplified' => $simplified
          );
          $result = db_query($query, $dbv);
          while ($record = $result->fetchAssoc()) {
            $options[$record['id']] = $record['simplified'];
          }
          $output .= '</td><td><a href="/adamant/submission/'.$sid.'">' . $sid . '</a>';
          $output .= '<input type="hidden" name="values['.$sid.'][sid]" value="'.$sid.'" />';
          $output .= '<input type="hidden" name="values['.$sid.'][no]" value="'.$answer['no'].'" />';
          $output .= '<input type="hidden" name="values['.$sid.'][original]" value="'.$answer['data'].'" />';
          $output .= '<input type="hidden" name="values['.$sid.'][dbid]" value="'.$dbid.'" />';
          $output .= '<input type="hidden" name="values['.$sid.'][db_simplified]" value="'.$simplified.'" />';
          $output .= '</td></tr><tr class="cc-simple"><td width="20%"><strong>Vereinfachte Antwort</strong>';
          if ($dbid) {
            $output .= '<br><span class="dbinfo saved">Datensatz bereits in der Datenbank.</span><br><img src="/misc/message-24-ok.png" />';
          }
          else {
            $output .= '<br><span class="dbinfo not-saved">Datensatz noch nicht in der Datenbank.</span><br><img src="/misc/message-24-error.png" />';
          }
          $output .= '</td><td width="80%" colspan="2">';
          $output .= '<em>Neuen Kategorisierungsbegriff anlegen</em><br><input type="text" name="values['.$sid.'][simplified]" value="'.($dbid?$simplified:'').'" /><br><em>- oder -</em><br><select name="values['.$sid.'][simplified_select]"><option value="0">Existierenden Kategorisierungsbegriff auswählen</option><option value="0">Neuen Kategorisierungsbegriff eingeben</option><option value="0" disabled="disabled">---</option><option value="-1">Kategorisierungsbegriff löschen</option><option value="0" disabled="disabled">---</option>';
          foreach ($options AS $id => $simple) {
            $output .= '<option value="'.$id.'"'.($simple == $simplified ? ' selected="selected"':'').'>'.$simple.'</option>';
          }
          $output .= '</select>';
          $output .= '</td></tr>';
        }
        $output .= '</table>';
      }
      $output .= '</td>';
      $output .= '</tr>';
    }
  }
  $output .= '</table>';
  $output .= '<input type="checkbox" name="gotonext" value="1"> Nach dem Speichern zur nächsten Seite wechseln<br><input type="submit" value="Speichern" /></form>';

  // pager
  $output .= adamant_pager($total, $offset, 10, "/adamant/component/[cid]/categorize/[offset]", array('cid' => $cid));

  return $output;
}

function adamant_component_categorize_multi($cid, $offset = 0) {
  $output = '';
  $offset = 10 * floor($offset / 10);
  $values = $component = array();
  $query = " SELECT * FROM webform_component WHERE nid = 89 AND cid = {$cid} ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $component = $record;
  }
  $showform = false;
  $query = " SHOW TABLES LIKE 'adamant_component_".$cid."'";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $showform = true;
  }
  $query = " SELECT COUNT(*) AS total FROM webform_submitted_data WHERE cid = {$cid} AND TRIM(data) <> '' ";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $total = $record['total'];
  }
  $query = " SELECT * FROM webform_submitted_data WHERE cid = {$cid} AND TRIM(data) <> '' ";
  if ($offset) {
    $query .= " LIMIT {$offset}, 10 ";
  }
  else {
   $query .= " LIMIT 10 ";
  }
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $values[$record['sid']][$record['cid']][$record['no']] = $record;
  }
  $output .= '<h2>' . ucfirst($component['type']) . ': ' . $component['name'] . '</h2>';
  switch ($component['type']) {
    case 'select':
      $extra = unserialize($component['extra']);
      $options_code = explode("\n",$extra['items']);
      $options = array();
      foreach ($options_code AS $option_code) {
        $kv = explode("|",$option_code);
        $options[$kv[0]] = $kv[1];
      }
      foreach ($options AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      break;
    case 'textfield':
      #$output .= 'Freitext (einzeilig)';
      break;
    case 'textarea':
      #$output .= 'Freitext (mehrzeilig)';
      break;
    case 'email':
      #$output .= 'E-Mail';
      break;
    case 'number':
      #$output .= 'Zahl';
      break;
    case 'grid':
      #$output .= 'Grid';
      #$output .= '<pre>' . print_r($component,1) . '</pre>';
      $extra = unserialize($component['extra']);
      $options_code = explode("\n",$extra['options']);
      $options = array();
      foreach ($options_code AS $option_code) {
        $kv = explode("|",$option_code);
        $options[$kv[0]] = $kv[1];
      }
      $questions_code = explode("\n",$extra['questions']);
      $questions = array();
      foreach ($questions_code AS $question_code) {
        $kv = explode("|",$question_code);
        $questions[$kv[0]] = $kv[1];
      }
      $output .= "<u>Fragen</u><br>";
      foreach ($questions AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      $output .= "<u>Antworten</u><br>";
      foreach ($options AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      break;
    case 'fieldset':
      #$output .= '<h4>' . $component['name'] . '</h4>';
  }
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  $output .= '<form id="adamant-form-component-categorize-'.$cid.'" class="adamant-form-component-categorize" method="post" action="/adamant/form/submit/component/categorize/'.$cid.'">';
  $output .= '<input type="hidden" name="offset" value="'.$offset.'" />';
  $output .= '<table>';
  foreach ($values AS $sid => $sdata) {
    if (!in_array($component['type'],array('markup','pagebreak'))) {
      $output .= '<tr>';
      #$output .= '<td><strong><a href="/adamant/submission/'.$sid.'">'.$sid.'</a></strong></td>';
      $output .= '<td>';
      if (isset($values[$sid][$cid])) {
        $acount = 0;
        $output .= '<table>';
        foreach($values[$sid][$cid] AS $answer) {
          if (!isset($answer['data']) || is_null($answer['data']) || $answer['data'] == '') {
            continue;
          }
          $acount++;
          $output .= '<tr class="cc-original">';
          #$output .= '<td rowspan="2">' . $answer['no'] . '</td>';
          $output .= '<td width="20%"><strong>Originalantwort</strong></td><td width="80%">';
          #$output .= $answer['no'] . ': ';
          if (strpos($answer['no'],'#') !== FALSE) {
            $multi_no = explode('#', $answer['no']);
            $no = array_pop($multi_no);
            $multi_par = explode('|',array_pop($multi_no));
            $multi_index = array_shift($multi_par);
            $output .= "<strong>[" . $multi_index . "]</strong> ";
          }
          elseif ($cid == 6) {
            $no = $answer['no'];
            $output .= "<strong>[" . $no . "]</strong> ";
          }
          else {
            $no = $answer['no'];
          }
          switch ($component['type']) {
            case 'select':
              $output .= $options[$answer['data']] . '<br>';
              break;
            case 'grid':
              $output .= $questions[$no] . '<br><em>' . $options[$answer['data']] . '</em><br>';
              break;
            default:
              $output .= $answer['data'] . '<br>';
          }

          $options = array();
          $dbid = array();
          $simplified = array();
          $query = " SELECT id, delta, simplified FROM adamant_component_{$cid} WHERE sid = {$sid} AND no = {$no} ";
          $result = db_query($query);
          while ($record = $result->fetchAssoc()) {
            $options[$record['id']] = $record['simplified'];
            $dbid[$record['delta']] = $record['id'];
            $simplified[$record['delta']] = $record['simplified'];
          }
          $query = " SELECT id, simplified FROM adamant_component_{$cid} WHERE simplified NOT IN (:simplified) GROUP BY simplified ORDER BY simplified ASC ";
          $dbv = array(
            ':simplified' => "'".implode("','",$simplified)."'"
          );
          $result = db_query($query, $dbv);
          while ($record = $result->fetchAssoc()) {
            $options[$record['id']] = $record['simplified'];
          }
          $output .= '</td><td><a href="/adamant/submission/'.$sid.'">' . $sid . '</a>';
          $output .= '<input type="hidden" name="values['.$sid.'][sid]" value="'.$sid.'" />';
          $output .= '<input type="hidden" name="values['.$sid.'][no]" value="'.$answer['no'].'" />';
          $output .= '<input type="hidden" name="values['.$sid.'][original]" value="'.$answer['data'].'" />';
          foreach ($dbid AS $delta => $value) {
            $output .= '<input type="hidden" name="values['.$sid.'][dbid]['.$delta.']" value="'.$value.'" />';
          }
          foreach ($simplified AS $delta => $value) {
            $output .= '<input type="hidden" name="values['.$sid.'][db_simplified]['.$delta.']" value="'.$value.'" />';
          }
          $output .= '</td></tr><tr class="cc-simple"><td width="20%"><strong>Vereinfachte Antwort(en)</strong>';
          if (count($dbid) > 0) {
            $output .= '<br><span class="dbinfo saved">'.count($dbid).' '.(count($dbid)==1?'Datensatz':'Datensätze').' bereits in der Datenbank.</span><br><img src="/misc/message-24-ok.png" />';
          }
          else {
            $output .= '<br><span class="dbinfo not-saved">Keine Datensätze in der Datenbank.</span><br><img src="/misc/message-24-error.png" />';
          }
          $output .= '</td><td width="80%" colspan="2">';
          $instances = max(count($dbid)+1,3);
          $output .= '<input type="hidden" name="values['.$sid.'][instances]" value="'.$instances.'" />';
          for ($i = 0; $i < $instances; $i++) {
            $output .= '<div class="categorize-section"><em>Neuen Kategorisierungsbegriff anlegen</em><br><input type="text" name="values['.$sid.'][simplified]['.$i.']" value="'.(isset($dbid[$i])?$simplified[$i]:'').'" /><br><em>- oder -</em><br><select name="values['.$sid.'][simplified_select]['.$i.']"><option value="0">Existierenden Kategorisierungsbegriff auswählen</option><option value="0">Neuen Kategorisierungsbegriff eingeben</option><option value="0" disabled="disabled">---</option><option value="-1">Kategorisierungsbegriff löschen</option><option value="0" disabled="disabled">---</option>';
            foreach ($options AS $id => $simple) {
              $output .= '<option value="'.$id.'"'.(isset($simplified[$i]) && $simple == $simplified[$i] ? ' selected="selected"':'').'>'.$simple.'</option>';
            }
            $output .= '</select></div>';
          }
          $output .= '</td></tr>';
        }
        $output .= '</table>';
      }
      $output .= '</td>';
      $output .= '</tr>';
    }
  }
  $output .= '</table>';
  $output .= '<input type="checkbox" name="gotonext" value="1"> Nach dem Speichern zur nächsten Seite wechseln<br><input type="submit" value="Speichern" /></form>';

  // pager
  $output .= adamant_pager($total, $offset, 10, "/adamant/component/[cid]/categorize/[offset]", array('cid' => $cid));

  return $output;
}

function adamant_component_categorize_duplex($cid, $offset = 0) {
  $output = '';
  $offset = 10 * floor($offset / 10);
  $values = $component = array();
  $query = " SELECT * FROM webform_component WHERE nid = 89 AND cid = {$cid} ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $component = $record;
  }
  $showform = false;
  $query = " SHOW TABLES LIKE 'adamant_component_".$cid."'";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $showform = true;
  }
  $query = " SELECT COUNT(*) AS total FROM webform_submitted_data WHERE cid = {$cid} AND TRIM(data) <> '' ";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $total = $record['total'];
  }
  $query = " SELECT * FROM webform_submitted_data WHERE cid = {$cid} AND TRIM(data) <> '' ";
  if ($offset) {
    $query .= " LIMIT {$offset}, 10 ";
  }
  else {
   $query .= " LIMIT 10 ";
  }
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $values[$record['sid']][$record['cid']][$record['no']] = $record;
  }
  $output .= '<h2>' . ucfirst($component['type']) . ': ' . $component['name'] . '</h2>';
  switch ($component['type']) {
    case 'select':
      $extra = unserialize($component['extra']);
      $options_code = explode("\n",$extra['items']);
      $options = array();
      foreach ($options_code AS $option_code) {
        $kv = explode("|",$option_code);
        $options[$kv[0]] = $kv[1];
      }
      foreach ($options AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      break;
    case 'textfield':
      #$output .= 'Freitext (einzeilig)';
      break;
    case 'textarea':
      #$output .= 'Freitext (mehrzeilig)';
      break;
    case 'email':
      #$output .= 'E-Mail';
      break;
    case 'number':
      #$output .= 'Zahl';
      break;
    case 'grid':
      #$output .= 'Grid';
      #$output .= '<pre>' . print_r($component,1) . '</pre>';
      $extra = unserialize($component['extra']);
      $options_code = explode("\n",$extra['options']);
      $options = array();
      foreach ($options_code AS $option_code) {
        $kv = explode("|",$option_code);
        $options[$kv[0]] = $kv[1];
      }
      $questions_code = explode("\n",$extra['questions']);
      $questions = array();
      foreach ($questions_code AS $question_code) {
        $kv = explode("|",$question_code);
        $questions[$kv[0]] = $kv[1];
      }
      $output .= "<u>Fragen</u><br>";
      foreach ($questions AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      $output .= "<u>Antworten</u><br>";
      foreach ($options AS $key => $name) {
        $output .= $key . ': ' . $name . '<br>';
      }
      break;
    case 'fieldset':
      #$output .= '<h4>' . $component['name'] . '</h4>';
  }
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  $output .= '<form id="adamant-form-component-categorize-'.$cid.'" class="adamant-form-component-categorize" method="post" action="/adamant/form/submit/component/categorize/'.$cid.'">';
  $output .= '<input type="hidden" name="offset" value="'.$offset.'" />';
  $output .= '<table>';
  foreach ($values AS $sid => $sdata) {
    if (!in_array($component['type'],array('markup','pagebreak'))) {
      $output .= '<tr>';
      #$output .= '<td><strong><a href="/adamant/submission/'.$sid.'">'.$sid.'</a></strong></td>';
      $output .= '<td>';
      if (isset($values[$sid][$cid])) {
        $acount = 0;
        $output .= '<table>';
        foreach($values[$sid][$cid] AS $answer) {
          if (!isset($answer['data']) || is_null($answer['data']) || $answer['data'] == '') {
            continue;
          }
          $acount++;
          $output .= '<tr class="cc-original">';
          #$output .= '<td rowspan="2">' . $answer['no'] . '</td>';
          $output .= '<td width="20%"><strong>Originalantwort</strong></td><td colspan="2" width="80%">';
          #$output .= $answer['no'] . ': ';
          if (strpos($answer['no'],'#') !== FALSE) {
            $multi_no = explode('#', $answer['no']);
            $no = array_pop($multi_no);
            $multi_par = explode('|',array_pop($multi_no));
            $multi_index = array_shift($multi_par);
            $output .= "<strong>[" . $multi_index . "]</strong> ";
          }
          elseif ($cid == 6) {
            $no = $answer['no'];
            $output .= "<strong>[" . $no . "]</strong> ";
          }
          else {
            $no = $answer['no'];
          }
          switch ($component['type']) {
            case 'select':
              $output .= $options[$answer['data']] . '<br>';
              break;
            case 'grid':
              $output .= $questions[$no] . '<br><em>' . $options[$answer['data']] . '</em><br>';
              break;
            default:
              $output .= $answer['data'] . '<br>';
          }

          $options = array();
          $dbid = array();
          $simplified = $simplified_category = array();
          $query = " SELECT id, delta, simplified, simplified_category FROM adamant_component_{$cid} WHERE sid = {$sid} AND no = {$no} ";
          $result = db_query($query);
          while ($record = $result->fetchAssoc()) {
            $options[$record['id']] = $record['simplified'];
            $dbid[$record['delta']] = $record['id'];
            $simplified[$record['delta']] = $record['simplified'];
            $simplified_category[$record['delta']] = $record['simplified_category'];
          }
          $query = " SELECT id, simplified FROM adamant_component_{$cid} WHERE simplified NOT IN (:simplified) GROUP BY simplified ORDER BY simplified ASC ";
          $dbv = array(
            ':simplified' => "'".implode("','",$simplified)."'"
          );
          $result = db_query($query, $dbv);
          while ($record = $result->fetchAssoc()) {
            $options[$record['id']] = $record['simplified'];
          }
          $output .= '</td><td><a href="/adamant/submission/'.$sid.'">' . $sid . '</a>';
          $output .= '<input type="hidden" name="values['.$sid.'][sid]" value="'.$sid.'" />';
          $output .= '<input type="hidden" name="values['.$sid.'][no]" value="'.$answer['no'].'" />';
          $output .= '<input type="hidden" name="values['.$sid.'][original]" value="'.$answer['data'].'" />';
          foreach ($dbid AS $delta => $value) {
            $output .= '<input type="hidden" name="values['.$sid.'][dbid]['.$delta.']" value="'.$value.'" />';
          }
          foreach ($simplified AS $delta => $value) {
            $output .= '<input type="hidden" name="values['.$sid.'][db_simplified]['.$delta.']" value="'.$value.'" />';
          }
          $output .= '</td></tr><tr class="cc-simple"><td width="20%"><strong>Extrahierte Antwort(en)</strong>';
          if (count($dbid) > 0) {
            $output .= '<br><span class="dbinfo saved">'.count($dbid).' '.(count($dbid)==1?'Datensatz':'Datensätze').' bereits in der Datenbank.</span><br><img src="/misc/message-24-ok.png" />';
          }
          else {
            $output .= '<br><span class="dbinfo not-saved">Keine Datensätze in der Datenbank.</span><br><img src="/misc/message-24-error.png" />';
          }
          $output .= '</td><td width="80%" colspan="2">';
          $instances = max(count($dbid)+1,3);
          $output .= '<input type="hidden" name="values['.$sid.'][instances]" value="'.$instances.'" />';
          for ($i = 0; $i < $instances; $i++) {
            $output .= '<div class="categorize-section"><em>Neuen Begriff anlegen</em><br><input type="text" name="values['.$sid.'][simplified]['.$i.']" value="'.(isset($dbid[$i])?$simplified[$i]:'').'" /><br><em>- oder -</em><br><select name="values['.$sid.'][simplified_select]['.$i.']"><option value="0">Existierenden Begriff auswählen</option><option value="0">Neuen Begriff eingeben</option><option value="0" disabled="disabled">---</option><option value="-1">Begriff löschen</option><option value="0" disabled="disabled">---</option>';
            foreach ($options AS $id => $simple) {
              $output .= '<option value="'.$id.'"'.(isset($simplified[$i]) && $simple == $simplified[$i] ? ' selected="selected"':'').'>'.$simple.'</option>';
            }
            $output .= '</select><br>';
            $output .= '<select name="values['.$sid.'][simplified_category]['.$i.']">';
            $cats = array(
              1 => 'Gartenbücher',
              2 => 'Gartenzeitschriften',
              3 => 'Gartenportale im Internet',
              4 => 'Diskussionsforen im Internet',
              5 => 'sonstige Internetquellen',
              6 => 'Gärtnerei / Gartenpflegedienst',
              7 => 'Beratungsstellen',
              8 => 'Fachberatung im Gartenverein',
              9 => 'Gartenmarkt',
              10 => 'Baumarkt',
              11 => 'Nachbarschaft, Bekanntenkreis, Familie',
              12 => 'Sonstiges',
            );
            foreach ($cats AS $catid => $cat) {
              $output .= '<option value="'.$catid.'"'.(isset($simplified_category[$i]) && $catid == $simplified_category[$i] ? ' selected="selected"':'').'>'.$cat.'</option>';
            }
            $output .= '</select>';
            $output .= '</div>';
          }
          $output .= '</td></tr>';
        }
        $output .= '</table>';
      }
      $output .= '</td>';
      $output .= '</tr>';
    }
  }
  $output .= '</table>';
  $output .= '<input type="checkbox" name="gotonext" value="1"> Nach dem Speichern zur nächsten Seite wechseln<br><input type="submit" value="Speichern" /></form>';

  // pager
  $output .= adamant_pager($total, $offset, 10, "/adamant/component/[cid]/categorize/[offset]", array('cid' => $cid));

  return $output;
}


function adamant_component_categorize_form_submit($cid, $offset = 0) {
  if (in_array($cid, array())) {
    return adamant_component_categorize_form_submit_single($cid, $offset);
  }
  elseif (in_array($cid, array(21,23,24,30,33,42,50,69))) {
    return adamant_component_categorize_form_submit_multi($cid, $offset);
  }
  elseif (in_array($cid, array(38))) {
    return adamant_component_categorize_form_submit_duplex($cid, $offset);
  }
  else {
    return 'Für diese Komponente steht noch keine Auswertung zur Verfügung';
  }
}

function adamant_component_categorize_form_submit_single($cid) {
  #$output = '<pre>' . print_r($_POST,1) . '</pre>';
  #return 'debug';
  $form_data = $_POST;
  $form_values = $form_data['values'];
  $offset = $form_data['offset'];
  foreach($form_values AS $sid => $data) {
    if ($data['dbid'] == 0) {
      $simple = null;
      if ($data['simplified'] != '' && $data['simplified_select'] == 0) {
        $simple = $data['simplified'];
      }
      elseif ($data['simplified'] == '' && $data['simplified_select'] > 0) {
        $query = " SELECT simplified FROM adamant_component_{$cid} WHERE id = {$data['simplified_select']} ";
        $result = db_query($query);
        if ($record = $result->fetchAssoc()) {
          $simple = $record['simplified'];
        }
      }
      if ($simple) {
        $query = " INSERT INTO adamant_component_{$cid} VALUES (null, :sid, :no, 0, :original, :simplified) ";
        $dbv = array(
            ':sid' => $sid,
            ':no' => $data['no'],
            ':original' => $data['original'],
            ':simplified' => $simple
          );
        $result = db_query($query, $dbv);
      }
    }
    else {
      $simple = null;
      if ($data['simplified_select'] == -1) {
        $query = " DELETE FROM adamant_component_{$cid} WHERE id = {$dbid} ";
        $result = db_query($query);
      }
      elseif ($data['simplified'] != '' && $data['simplified'] != $data['db_simplified'] && ($data['simplified_select'] == 0 || $data['simplified_select'] == $data['dbid'])) {
        $simple = $data['simplified'];
      }
      elseif (($data['simplified'] == '' || $data['simplified'] == $data['db_simplified']) && $data['simplified_select'] > 0 && $data['simplified_select'] != $data['dbid']) {
        $query = " SELECT simplified FROM adamant_component_{$cid} WHERE id = {$data['simplified_select']} ";
        $result = db_query($query);
        if ($record = $result->fetchAssoc()) {
          $simple = $record['simplified'];
        }
      }
      if ($simple) {
        $query = " UPDATE adamant_component_{$cid} SET simplified = :simple WHERE id = :id ";
        $dbv = array(
            ':simplified' => $simple,
            ':id' => $data['dbid']
          );
        $result = db_query($query, $dbv);
      }
    }

  }
  drupal_set_message('Eingabe wurden verarbeitet.');
  drupal_goto('adamant/component/'.$cid.'/categorize/'.(isset($form_data['gotonext'])?$offset+10:$offset));
  #return $output;
}

function adamant_component_categorize_form_submit_multi($cid) {
  $output = '<pre>' . print_r($_POST,1) . '</pre>';
  #return $output;
  $form_data = $_POST;
  $form_values = $form_data['values'];
  $offset = $form_data['offset'];
  foreach($form_values AS $sid => $data) {
    $instances = $data['instances'];
    for ($i = 0; $i < $instances; $i++) {
      if (!isset($data['dbid'][$i]) || $data['dbid'][$i] == 0) {
        $simple = null;
        if ($data['simplified'][$i] != '' && $data['simplified_select'][$i] == 0) {
          $simple = $data['simplified'][$i];
        }
        elseif (((isset($data['simplified'][$i]) && $data['simplified'][$i] == '') || !isset($data['simplified'][$i])) && $data['simplified_select'][$i] > 0) {
          $query = " SELECT simplified FROM adamant_component_{$cid} WHERE id = {$data['simplified_select'][$i]} ";
          $result = db_query($query);
          if ($record = $result->fetchAssoc()) {
            $simple = $record['simplified'];
          }
        }
        if ($simple) {
          $query = " INSERT INTO adamant_component_{$cid} VALUES (null, :sid, :no, :delta, :original, :simplified) ";
          $dbv = array(
            ':sid' => $sid,
            ':no' => $data['no'],
            ':delta' => $i,
            ':original' => $data['original'],
            ':simplified' => $simple
          );
          $result = db_query($query, $dbv);
        }
      }
      else {
        $simple = null;
        if ($data['simplified_select'][$i] == -1) {
          $query = " DELETE FROM adamant_component_{$cid} WHERE id = {$data['dbid'][$i]} ";
          $result = db_query($query);
        }
        elseif ($data['simplified'][$i] != '' && $data['simplified'][$i] != $data['db_simplified'][$i] && ($data['simplified_select'][$i] == 0 || (isset($data['dbid'][$i]) && $data['simplified_select'][$i] == $data['dbid'][$i]))) {
          $simple = $data['simplified'][$i];
        }
        elseif (($data['simplified'][$i] == '' || $data['simplified'][$i] == $data['db_simplified'][$i]) && $data['simplified_select'][$i] > 0 && (isset($data['dbid'][$i]) && $data['simplified_select'][$i] != $data['dbid'])) {
          $query = " SELECT simplified FROM adamant_component_{$cid} WHERE id = {$data['simplified_select'][$i]} ";
          $result = db_query($query);
          if ($record = $result->fetchAssoc()) {
            $simple = $record['simplified'];
          }
        }
        if ($simple) {
          $query = " UPDATE adamant_component_{$cid} SET simplified = :simplified WHERE id = {$data['dbid'][$i]} ";
          $dbv = array(
            ':simplified' => $simple
          );
          $result = db_query($query, $dbv);
        }
      }
    }

  }
  drupal_set_message('Eingabe wurden verarbeitet.');
  drupal_goto('adamant/component/'.$cid.'/categorize/'.(isset($form_data['gotonext'])?$offset+10:$offset));
  #return $output;
}

function adamant_component_categorize_form_submit_duplex($cid) {
  $output = '<pre>' . print_r($_POST,1) . '</pre>';
  #return $output;
  $form_data = $_POST;
  $form_values = $form_data['values'];
  $offset = $form_data['offset'];
  foreach($form_values AS $sid => $data) {
    $instances = $data['instances'];
    for ($i = 0; $i < $instances; $i++) {
      if (!isset($data['dbid'][$i]) || $data['dbid'][$i] == 0) {
        $simple = null;
        if ($data['simplified'][$i] != '' && $data['simplified_select'][$i] == 0) {
          $simple = $data['simplified'][$i];
        }
        elseif (((isset($data['simplified'][$i]) && $data['simplified'][$i] == '') || !isset($data['simplified'][$i])) && $data['simplified_select'][$i] > 0) {
          $query = " SELECT simplified FROM adamant_component_{$cid} WHERE id = {$data['simplified_select'][$i]} ";
          $result = db_query($query);
          if ($record = $result->fetchAssoc()) {
            $simple = $record['simplified'];
          }
        }
        if ($simple) {
          $query = " INSERT INTO adamant_component_{$cid} VALUES (null, :sid, :no, :delta, :original, :simplified, :simplified_category) ";
          $dbv = array(
            ':sid' => $sid,
            ':no' => $data['no'],
            ':delta' => $i,
            ':original' => $data['original'],
            ':simplified' => $simple,
            ':simplified_category' => $data['simplified_category'][$i]
          );
          $result = db_query($query, $dbv);
        }
      }
      else {
        $simple = null;
        if ($data['simplified_select'][$i] == -1) {
          $query = " DELETE FROM adamant_component_{$cid} WHERE id = {$data['dbid'][$i]} ";
          $result = db_query($query);
        }
        elseif ($data['simplified'][$i] != '' && $data['simplified'][$i] != $data['db_simplified'][$i] && ($data['simplified_select'][$i] == 0 || (isset($data['dbid'][$i]) && $data['simplified_select'][$i] == $data['dbid'][$i]))) {
          $simple = $data['simplified'][$i];
        }
        elseif (($data['simplified'][$i] == '' || $data['simplified'][$i] == $data['db_simplified'][$i]) && $data['simplified_select'][$i] > 0 && (isset($data['dbid'][$i]) && $data['simplified_select'][$i] != $data['dbid'])) {
          $query = " SELECT simplified FROM adamant_component_{$cid} WHERE id = {$data['simplified_select'][$i]} ";
          $result = db_query($query);
          if ($record = $result->fetchAssoc()) {
            $simple = $record['simplified'];
          }
        }
        if ($simple) {
          $query = " UPDATE adamant_component_{$cid} SET simplified = :simplified, simplified_category = :simplified_category WHERE id = {$data['dbid'][$i]} ";
          $dbv = array(
            ':simplified' => $simple,
            ':simplified_category' => $data['simplified_category'][$i]
          );
          $result = db_query($query, $dbv);
        }
      }
    }

  }
  drupal_set_message('Eingabe wurden verarbeitet.');
  drupal_goto('adamant/component/'.$cid.'/categorize/'.(isset($form_data['gotonext'])?$offset+10:$offset));
  #return $output;
}

function adamant_pager($total, $offset, $step, $path, $options = array()) {
  foreach ($options AS $token => $rtext) {
    $path = str_replace('['.$token.']', $rtext, $path);
  }
  $output = '<div class="pager">';
  $total = floor($total/$step) * $step;
  if ($offset > 0) {
    $output .= '<span class="pager-link-wrapper"><a href="'.str_replace('[offset]', 0, $path).'">&lt;&lt; Anfang</a></span>';
    $output .= '<span class="pager-link-wrapper"><a href="'.str_replace('[offset]', $offset - $step, $path).'">&lt; Zurück</a></span>';
  }
  if ($offset == 0) {
    $output .= '<span class="pager-link-wrapper"><strong>1</strong></span>';
  }
  else {
    $output .= '<span class="pager-link-wrapper"><a href="'.str_replace('[offset]', 0, $path).'">1</a></span>';
  }
  for ($cstep = $offset - 6*$step; $cstep < $offset; $cstep += $step) {
    if ($cstep == ($offset - 6*$step) && $cstep > 0) {
      $output .= '<span class="pager-link-wrapper">...</span>';
    }
    elseif ($cstep > 0) {
      $output .= '<span class="pager-link-wrapper"><a href="'.str_replace('[offset]', $cstep, $path).'">'.($cstep/$step + 1).'</a></span>';
    }
  }
  if ($offset > 0 && $offset < $total) {
    $output .= '<span class="pager-link-wrapper"><strong>'.($offset/$step + 1).'</strong></span>';
  }
  for ($cstep = $offset + $step; $cstep <= ($offset + $step * 6); $cstep += $step) {
    if ($cstep == ($offset + 6*$step) && $cstep < $total - $step) {
      $output .= '<span class="pager-link-wrapper">...</span>';
    }
    elseif ($cstep < $total) {
      $output .= '<span class="pager-link-wrapper"><a href="'.str_replace('[offset]', $cstep, $path).'">'.($cstep/$step + 1).'</a></span>';
    }
  }
  if ($offset == $total) {
    $output .= '<span class="pager-link-wrapper"><strong>'.($total/$step + 1).'</strong></span>';
  }
  else {
    $output .= '<span class="pager-link-wrapper"><a href="'.str_replace('[offset]', $total, $path).'">'.($total/$step + 1).'</a></span>';
  }
  if ($offset < $total) {
    $output .= '<span class="pager-link-wrapper"><a href="'.str_replace('[offset]', ($offset + $step), $path).'">Weiter &gt;</a></span>';
    $output .= '<span class="pager-link-wrapper"><a href="'.str_replace('[offset]', $total, $path).'">Ende &gt;&gt;</a></span>';
  }
  return $output;
}

function adamant_complex_categorize($pid, $offset = 0) {
  drupal_add_js(drupal_get_path('module', 'adamant') .'/adamant_complex_copy.js', 'file');
  $output = '';
  $output .= '<style>
.container {
  width: 1200px;
}
.container .sixteen.columns {
width: 1180px;
}
.widespace th, .widespace td {
  padding: 5px;
}
  </style>';
  $component_tree = array(
    1 => array(
      'cids' => array(70, 71, 72, 6, 74),
      'trueparent' => 2,
    ),
  );
  $values = $component = $components = array();
  $query = " SELECT * FROM webform_component WHERE nid = 89 AND cid = {$pid} ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $parent_component = $record;
  }
  $query = " SELECT * FROM webform_component WHERE nid = 89 AND pid = {$component_tree[$pid]['trueparent']} AND cid IN (".implode(',',$component_tree[$pid]['cids']).") ORDER BY weight ASC ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $components[$record['cid']] = $record;
  }
  $showform = false;
  $query = " SHOW TABLES LIKE 'adamant_component_".$pid."'";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $showform = true;
  }

  $cids = $component_tree[$pid]['cids'];
  $indicator_cid = reset($cids);
  $query = " SELECT COUNT(DISTINCT(sid)) AS total FROM webform_submitted_data WHERE cid = {$indicator_cid} AND TRIM(data) <> '' ";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $total = $record['total'];
  }
  $query = " SELECT DISTINCT(sid) FROM webform_submitted_data WHERE cid = {$indicator_cid} AND TRIM(data) <> '' ";
  if ($offset) {
    $query .= " LIMIT {$offset}, 1 ";
  }
  else {
   $query .= " LIMIT 1 ";
  }
  $result = db_query($query);
  $sid = null;
  if ($record = $result->fetchAssoc()) {
    $sid = $record['sid'];
  }
  if ($sid) {
    foreach ($cids AS $cid) {
      $query = " SELECT * FROM webform_submitted_data WHERE sid = {$sid} AND cid = {$cid} ";
      $result = db_query($query);
      while ($record = $result->fetchAssoc()) {
        if (strpos($record['no'], '#') !== FALSE) {
          $noid = explode('#', $record['no']);
          $noid = explode('|', $noid[1]);
          $no = $noid[0];
        }
        else {
          $no = $record['no'];
        }
        $values[$record['cid']][$no] = $record;
      }
    }
  }
  else {
    return 'Ungültige SID.';
  }
  #return '<pre>' . print_r($values, 1) . '</pre>';
  $output .= '<h2>' . $parent_component['name'] . '</h2>';
  $output .= '<h4>Submission: <a href="/adamant/submission/' . $sid . '" target="_blank">' . $sid . '</a></h4>';
  $output .= '<form id="adamant-form-component-categorize-'.$pid.'" class="adamant-form-component-categorize" method="post" action="/adamant/form/submit/complex/categorize/'.$pid.'">';
  $output .= '<input type="hidden" name="offset" value="'.$offset.'" />';
  $output .= '<input type="hidden" name="sid" value="'.$sid.'" />';
  $output .= '<table><thead>';
  $thead1 = $thead2 = '';
  foreach ($components AS $component) {
    $thead1 .= '<th>' . $component['name'] . '</th>';
    $thead2 .= '<td>';
    switch ($component['type']) {
      case 'select':
        $extra = unserialize($component['extra']);
        $options_code = explode("\n",$extra['items']);
        $options[$component['cid']] = array();
        foreach ($options_code AS $option_code) {
          $kv = explode("|",$option_code);
          $options[$component['cid']][$kv[0]] = $kv[1];
        }
        foreach ($options[$component['cid']] AS $key => $name) {
          $thead2 .= $key . ': ' . $name . '<br>';
        }
        break;
      case 'textfield':
        #$output .= 'Freitext (einzeilig)';
        break;
      case 'textarea':
        #$output .= 'Freitext (mehrzeilig)';
        break;
      case 'email':
        #$output .= 'E-Mail';
        break;
      case 'number':
        #$output .= 'Zahl';
        break;
      case 'grid':
        #$output .= 'Grid';
        #$output .= '<pre>' . print_r($component,1) . '</pre>';
        $extra = unserialize($component['extra']);
        $options_code = explode("\n",$extra['options']);
        $options[$component['cid']] = array();
        foreach ($options_code AS $option_code) {
          $kv = explode("|",$option_code);
          $options[$component['cid']][$kv[0]] = $kv[1];
        }
        $questions_code = explode("\n",$extra['questions']);
        $questions[$component['cid']] = array();
        foreach ($questions_code AS $question_code) {
          $kv = explode("|",$question_code);
          $questions[$component['cid']][$kv[0]] = $kv[1];
        }
        $thead2 .= "<u>Fragen</u><br>";
        foreach ($questions[$component['cid']] AS $key => $name) {
          $thead2 .= $key . ': ' . $name . '<br>';
        }
        $thead2 .= "<u>Antworten</u><br>";
        foreach ($options[$component['cid']] AS $key => $name) {
          $thead2 .= $key . ': ' . $name . '<br>';
        }
        break;
      case 'fieldset':
        #$output .= '<h4>' . $component['name'] . '</h4>';
    }
    $thead2 .= '</td>';
  }
  $output .= '<tr><th>Problem</th>' . $thead1 . '</tr>';
  #$output .= '<tr>' . $thead2 . '</tr>';
  $output .= '</thead><tbody>';
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  #$output .= '<pre>' . print_r($options,1) . '</pre>';



  foreach ($values[$indicator_cid] AS $no => $data) {
    $output .= '<tr class="cc-original"><td>'.$no.'</td>';
    foreach ($components AS $cid => $component) {
      $output .= '<td>';
      if (isset($values[$cid][$no])) {
        $answer = $values[$cid][$no];
        $output .= '<input type="hidden" name="original['.$no.']['.$cid.']" value="'.$answer['data'].'" />';
        switch ($component['type']) {
          case 'select':
            $output .= $options[$cid][$answer['data']];
            break;
          case 'grid':
            $output .= $options[$cid][$answer['data']];
            break;
          default:
            $output .= $answer['data'];
        }
      }
      else {
        $output .= '<input type="hidden" name="original['.$no.']['.$cid.']" value="" />';
      }
      $output .= '</td>';
    }
    $output .= '</tr>';
  }
  $output .= '</table>';
  $output .= '<table class="widespace"><tr><th></th><th>Original-<br>problem<hr>Kategorie</th><th>Vereinheitlichter Name<br>Schädling / Krankheit / Unkraut</th><th>Vereinheitlichter Name<br>Kultur / Standort</th><th>Stärke<hr>Häufigkeit</th><th>Behandlung</th><th>Vereinheitlichte Beschreibung<br>Maßnahme</th><th>Kategorie<br>Maßnahme</th></tr>';

  $query = " SELECT MAX(delta) AS delta FROM adamant_complex_{$pid} WHERE sid = {$sid} ";
  $result = db_query($query);
  if ($record = $result->fetchAssoc()) {
    $new_data_rows = max(5, $record['delta'] + 3);
    #$output .= '<pre>'.print_r($record,1).'</pre>';
  }
  else {
    $new_data_rows = 5;
  }
  for ($n = 0; $n < $new_data_rows; $n++) {
    $output .= '<tr>';

    $options = array();
    $dbid = null;
    $simplified = null;
    $query = " SELECT * FROM adamant_complex_{$pid} WHERE sid = {$sid} AND delta = {$n} ";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
      foreach (array('delta', 'original', 'category', 'name', 'location', 'amount', 'recurrence', 'treated', 'treatment', 'treatment_category') AS $column) {
        $options[$column][$record['id']] = $record[$column];
        $simplified[$record['delta']][$column] = $record[$column];
      }
      $dbid[$record['delta']] = $record['id'];
    }
    foreach (array('delta', 'original', 'category', 'name', 'location', 'amount', 'recurrence', 'treated', 'treatment', 'treatment_category') AS $column) {
      if (!isset($options[$column])) {
        $options[$column] = array();
      }
      if (!isset($simplified[$record['delta']][$column]) && !is_null($record['delta'])) {
          $simplified[$record['delta']][$column] = 0;
      }
      $query = " SELECT id, {$column} FROM adamant_complex_{$pid} WHERE {$column} NOT IN (:column) GROUP BY {$column} ORDER BY {$column} ASC ";
      $dbv = array(
        ':column' => isset($simplified[$n])?$simplified[$n][$column]:''
      );
      $result = db_query($query, $dbv);
      while ($record = $result->fetchAssoc()) {
        $options[$column][$record['id']] = $record[$column];
      }
    }
    #$output .= '<pre>'.print_r($simplified,1).'</pre>';
    // Originalnummer :: original
    $output .= '<td><strong>'.($n + 1).'</strong></td><td><select name="problems['.$n.'][original]">';
    foreach ($values[$indicator_cid] AS $no => $data) {
      $output .= '<option value="'.$no.'"'.(isset($simplified[$n])&&$simplified[$n]['original']==$no?' selected="selected"':'').'>'.$no.'</option>';
    }
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][dbid]" value="'.(isset($dbid[$n])?$dbid[$n]:0).'" />';
    $output .= '<input type="hidden" name="problems['.$n.'][db_original]" value="'.(isset($simplified[$n])?$simplified[$n]['original']:'').'" />';
    #$output .= '</td>';
    $output .= '<hr>';

    // Kategorie :: category
    #$output .= '<td>';
    $output .= '<select name="problems['.$n.'][category]">';
    $output .= '<option value="0">-</option><option value="1"'.(isset($simplified[$n])&&$simplified[$n]['category']==1?' selected="selected"':'').'>Schädling</option><option value="2"'.(isset($simplified[$n])&&$simplified[$n]['category']==2?' selected="selected"':'').'>Krankheit</option><option value="3"'.(isset($simplified[$n])&&$simplified[$n]['category']==3?' selected="selected"':'').'>Unkraut</option>';
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][db_category]" value="'.(isset($simplified[$n])?$simplified[$n]['category']:'').'" />';
    $output .='</td>';

    // Name :: name
    $output .= '<td><input type="text" name="problems['.$n.'][name]" value="'.(isset($simplified[$n])&&$simplified[$n]['name']!=''?$simplified[$n]['name']:'').'" /><br>';
    $output .= '<select name="problems['.$n.'][name_select]"><option value="0">-</option>';
    foreach ($options['name'] AS $name_dbid => $name_value)
      $output .= '<option value="'.$name_dbid.'"'.(isset($simplified[$n])&&$simplified[$n]['name']==$name_value?' selected="selected"':'').'>'.$name_value.'</option>';
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][db_name]" value="'.(isset($simplified[$n])?$simplified[$n]['name']:'').'" />';
    $output .= '<input type="hidden" name="problems['.$n.'][db_name_select]" value="'.($dbid[$n]?$dbid[$n]:'').'" />';
    $output .= '</td>';

    // Standort/Kultur :: location
    $output .= '<td><input type="text" name="problems['.$n.'][location]" value="'.(isset($simplified[$n])&&$simplified[$n]['location']!=''?$simplified[$n]['location']:'').'" /><br>';
    $output .= '<select name="problems['.$n.'][location_select]"><option value="0">-</option>';
    foreach ($options['location'] AS $location_dbid => $location_value)
      $output .= '<option value="'.$location_dbid.'"'.(isset($simplified[$n])&&$simplified[$n]['location']==$location_value?' selected="selected"':'').'>'.$location_value.'</option>';
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][db_location]" value="'.(isset($simplified[$n])?$simplified[$n]['location']:'').'" />';
    $output .= '<input type="hidden" name="problems['.$n.'][db_location_select]" value="'.($dbid[$n]?$dbid[$n]:'').'" />';$output .= '</td>';

    // Stärke :: amount
    $output .= '<td><select name="problems['.$n.'][amount]">';
    $output .= '<option value="0">-</option><option value="1"'.(isset($simplified[$n])&&$simplified[$n]['amount']==1?' selected="selected"':'').'>gering</option><option value="2"'.(isset($simplified[$n])&&$simplified[$n]['amount']==2?' selected="selected"':'').'>mittel</option><option value="3"'.(isset($simplified[$n])&&$simplified[$n]['amount']==3?' selected="selected"':'').'>stark</option>';
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][db_amount]" value="'.(isset($simplified[$n])?$simplified[$n]['amount']:'').'" />';
    #$output .= '</td>';
    $output .= '<hr>';

    // Häufigkeit :: recurrence
    #$output .= '<td>';
    $output .= '<select name="problems['.$n.'][recurrence]">';
    $output .= '<option value="0">-</option><option value="1"'.(isset($simplified[$n])&&$simplified[$n]['recurrence']==1?' selected="selected"':'').'>einmal</option><option value="2"'.(isset($simplified[$n])&&$simplified[$n]['recurrence']==2?' selected="selected"':'').'>selten</option><option value="3"'.(isset($simplified[$n])&&$simplified[$n]['recurrence']==3?' selected="selected"':'').'>häufig</option><option value="4"'.(isset($simplified[$n])&&$simplified[$n]['recurrence']==4?' selected="selected"':'').'>regelmäßig</option>';
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][db_recurrence]" value="'.(isset($simplified[$n])?$simplified[$n]['recurrence']:'').'" />';
    $output .= '</td>';

    // Behandelt :: treated
    $output .= '<td><select name="problems['.$n.'][treated]">';
    $output .= '<option value="0">-</option><option value="1"'.(isset($simplified[$n])&&$simplified[$n]['treated']==1?' selected="selected"':'').'>Nein</option><option value="2"'.(isset($simplified[$n])&&$simplified[$n]['treated']==2?' selected="selected"':'').'>Ja</option>';
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][db_treated]" value="'.(isset($simplified[$n])?$simplified[$n]['treated']:'').'" />';
    $output .= '</td>';

    // Behandlung :: treatment
    $output .= '<td><input type="text" name="problems['.$n.'][treatment]" value="'.(isset($simplified[$n])&&$simplified[$n]['treatment']!=''?$simplified[$n]['treatment']:'').'" /><br>';
    $output .= '<select name="problems['.$n.'][treatment_select]"><option value="0">-</option>';
    foreach ($options['treatment'] AS $treatment_dbid => $treatment_value)
      $output .= '<option value="'.$treatment_dbid.'"'.(isset($simplified[$n])&&$simplified[$n]['treatment']==$treatment_value?' selected="selected"':'').'>'.$treatment_value.'</option>';
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][db_treatment]" value="'.(isset($simplified[$n])?$simplified[$n]['treatment']:'').'" />';
    $output .= '<input type="hidden" name="problems['.$n.'][db_treatment_select]" value="'.($dbid[$n]?$dbid[$n]:'').'" />';
    $output .= '</td>';

    // Kategorie Behandlung :: treatment_category
    $output .= '<td><input type="text" name="problems['.$n.'][treatment_category]" value="'.(isset($simplified[$n])&&$simplified[$n]['treatment_category']!=''?$simplified[$n]['treatment_category']:'').'" /><br>';
    $output .= '<select name="problems['.$n.'][treatment_category_select]"><option value="0">-</option>';
    foreach ($options['treatment_category'] AS $treatment_category_dbid => $treatment_category_value)
      $output .= '<option value="'.$treatment_category_dbid.'"'.(isset($simplified[$n])&&$simplified[$n]['treatment_category']==$treatment_category_value?' selected="selected"':'').'>'.$treatment_category_value.'</option>';
    $output .= '</select>';
    $output .= '<input type="hidden" name="problems['.$n.'][db_treatment_category]" value="'.(isset($simplified[$n])?$simplified[$n]['treatment_category']:'').'" />';
    $output .= '<input type="hidden" name="problems['.$n.'][db_treatment_category_select]" value="'.($dbid[$n]?$dbid[$n]:'').'" />';
    $output .= '</td>';

    $output .= '</tr>';
    if ($n < $new_data_rows - 1) {
      $output .= '<tr><td colspan="10"><span class="adamant-copy-row-link" data-s="'.$n.'" data-t="'.($n + 1).'">▼ Werte in die nächste Zeile kopieren ▼ <span>Achtung: Überschreibt vorhandene Werte!</span></span></td></tr>';
    }
  }
  $output .= '</table>';


  $output .= '<input type="checkbox" name="gotonext" value="1"> Nach dem Speichern zur nächsten Seite wechseln<br><input type="submit" value="Speichern" /></form>';
  // pager
  $output .= adamant_pager($total, $offset, 1, "/adamant/complex/[pid]/categorize/[offset]", array('pid' => $pid));

  return $output;
}

function adamant_complex_categorize_form_submit($pid, $offset = 0) {
  $debug = 0;
  $output = '';
  $form_data = $_POST;
  $form_values = $form_data['problems'];
  $offset = $form_data['offset'];
  $sid = $form_data['sid'];
  $schema = array(
    'original' => 0,
    'category' => 0,
    'name' => '',
    'location' => '',
    'amount' => 0,
    'recurrence' => 0,
    'treated' => 0,
    'treatment' => '',
    'treatment_category' => '',
  );
  foreach($form_values AS $delta => $data) {
    $output .= '<pre>DB ID: '.print_r($data['dbid'],1).'</pre>';
    if ((int) $data['dbid'] == 0) {
      $simple = null;
      if ($data['name'] != '' && $data['name_select'] == 0) {
        $simple = 1;
      }
      elseif ($data['name'] == '' && $data['name_select'] > 0) {
        $simple = 2;
      }
      elseif ($data['name'] != '' && $data['name_select'] > 0) {
        // Copied row
        $simple = 3;
      }

      if ($simple) {
        $dbv = array(
          ':id' => null,
          ':sid' => $sid,
          ':delta' => $delta,
        );
        foreach ($schema AS $field => $default) {
          if ($default === 0) {
            if (isset($data[$field])) {
              $dbv[':'.$field] = $data[$field];
            }
            else {
              $dbv[':'.$field] = $default;
            }
          }
          elseif ($default === '') {
            if ((trim($data[$field]) != '' && $data[$field.'_select'] == 0)) {
              $dbv[':'.$field] = $data[$field];
            }
            elseif ($data[$field.'_select'] > 0) { //$data[$field] == '' &&
              $query = " SELECT {$field} FROM adamant_complex_{$pid} WHERE id = {$data[$field.'_select']} ";
              $result = db_query($query);
              if ($record = $result->fetchAssoc()) {
                $dbv[':'.$field] = $record[$field];
              }
              else {
                $dbv[':'.$field] = $default;
              }
            }
            else {
              $dbv[':'.$field] = $default;
            }
          }
        }
        $output .= '<pre>DB values: '.print_r($dbv,1).'</pre>';
        $query = " INSERT INTO adamant_complex_{$pid} VALUES (:id, :sid, :delta, :original, :category, :name, :location, :amount, :recurrence, :treated, :treatment, :treatment_category) ";
        $result = db_query($query, $dbv);
      }
    }
    else {
      $check = $update = array();
      if ($data['original'] == -1) {
        $query = " DELETE FROM adamant_complex_{$pid} WHERE id = {$data['dbid']} ";
        $result = db_query($query);
      }
      else {
        foreach ($schema AS $field => $default) {
          if ($data[$field] != $data['db_'.$field]) {
            $update[$field] = array(
              'old' => $data['db_'.$field],
              'new' => $data[$field],
            );
          }
        }
        foreach (array('name','location','treatment','treatment_category') AS $field) {
          if ($data[$field.'_select'] > 0 && $data[$field.'_select'] != $data['db_'.$field.'_select']) {
            $query = " SELECT {$field} FROM adamant_complex_{$pid} WHERE id = {$data[$field.'_select']} ";
            $result = db_query($query);
            if ($record = $result->fetchAssoc()) {
              $update[$field]['new'] = $record[$field];
            }
          }
        }
        if (count($update) > 0) {
          $set = $dbvset = array();
          foreach($update AS $field => $fdat) {
            $set[] = " {$field} = :{$field} ";
            $dbvset[':'.$field] = $fdat['new'];
          }
          $query = " UPDATE adamant_complex_{$pid} SET ".(implode(', ', $set))." WHERE id = :id ";
          $dbv = array(
            ':id' => $data['dbid']
          );
          $dbv = array_merge($dbv, $dbvset);
          $result = db_query($query, $dbv);
        }
      }
    }

  }
  if ($debug) {
    return $output . '<br><hr><br><pre>'.print_r($_POST,1).'</pre>';
  }
  else {
    drupal_set_message('Eingabe wurden verarbeitet.');
    drupal_goto('adamant/complex/'.$pid.'/categorize/'.(isset($form_data['gotonext'])?$offset+1:$offset));
  }
}

function adamant_download_file($nid) {
  global $base_url;
  //this is the XLS header:
  $xlshead=pack("s*", 0x809, 0x8, 0x0, 0x10, 0x0, 0x0);
  //this is the XLS footer:
  $xlsfoot=pack("s*", 0x0A, 0x00);

  $codes = db_select('adamant_codes', 'c')
  ->fields('c')
  ->condition('nid', $nid, '=')
  ->execute();
  $node = node_load($nid);
  $data = "";
  $row = 0;
  while ($code = $codes->fetchAssoc()) {
    $data .= adamant_xlsCell($row, 0, $base_url."/".drupal_get_path_alias("node/".$nid).'?code='.$code['code']);
    $row++;
  }
  $filename="codes-".$nid.".xls";
  header("Content-Type: application/force-download");
  header("Content-Type: application/octet-stream");
  header("Content-Type: application/download");;
  header("Content-Disposition: attachment;filename=$filename");
  header("Content-Transfer-Encoding: binary ");
  echo $xlshead . $data . $xlsfoot;
  exit; //this is important!
}

function adamant_xlsCell($row,$col,$val) {
  $len=strlen($val);
  return pack("s*",0x204,8+$len,$row,$col,0x0,$len).$val;
}

function adamant_user_view_alter(&$build) {
  #dsm($build);
  if (isset($build['field_gkz_main'])) {
    $gkz = (string) $build['field_gkz_main']['#items'][0]['value'];
    if ($gvdata = adamant_get_gv_data_from_gkz($gkz)) {
      unset($build['field_gkz_main']);
      $build['field_gkz_main_info'] = array(
        '#markup' => '<div id="gv-data"><h3>Daten aus dem Gemeindeverzeichnis</h3><p>'.$gvdata.'</p></div>',
            '#weight' => 2,
          );
          $build['#group_children']['field_gkz_main_info'] = 'group_grantee';
    }
  }
  if (isset($build['field_gkz'])) {
    $gkzs = $build['field_gkz']['#items'];
    unset($build['field_gkz']);
    foreach ($gkzs AS $id => $gkz) {
      if ($gvdata = adamant_get_gv_data_from_gkz((string) $gkz['value'])) {
        $build['field_gkz_info_'.$id] = array(
          '#markup' => '<div id="gv-data"><h3>Daten aus dem Gemeindeverzeichnis</h3><p>'.$gvdata.'</p></div>',
              '#weight' => (30 + $id),
            );
            $build['#group_children']['field_gkz_info_'.$id] = 'group_grantee';
      }
    }
  }
}

function adamant_answer_output($fid, $gid, $title, $answer) {
  $output = '';
  $output .= '<a name="'.$fid.'-'.$gid.'"></a>';
  $output .= "<h2>".($fid ? 'Frage '.$fid.': ':'')."{$title}</h2>";
  $output .= "<p>Antwort: <strong>{$answer}.</strong></p>";
  return $output;
}

function adamant_table_output($fid, $gid, $title, $answers) {
  $output = '';
  $output .= '<a name="'.$fid.'-'.$gid.'"></a>';
  $output .= "<h2>".($fid ? 'Frage '.$fid.': ':'')."{$title}</h2>";
  $output .= "<table border='1'>";
  foreach ($answers AS $val => $key) {
    $output .= "<tr><td>".$key."</td><td>".$val."</td></tr>";
  }
  $output .= "</table>";
  return $output;
}



function adamant_gradients() {
  return "<script>
  function CreateGradient (obj, color) {
    return RGraph.radialGradient(obj, 400, 250, 145, 400, 250, 175, color, 'black');
  }
  function CreatePieGradient (obj, color) {
    return RGraph.radialGradient(obj, 160, 132, 145, 160, 132, 175, color, 'black');
  }
</script>";
}

function adamant_charts() {
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.core.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.dynamic.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.tooltips.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.context.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.effects.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.key.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.rect.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.pie.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.bar.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.hbar.js', 'file');
  $output = '';
  $outscript = array();
  $output .= adamant_gradients();

  $output .= "<p>Die auf dieser Seite angezeigten Diagramme veranschaulichen die Rohdaten der Eingaben, d.h. es handelt sich um reine Häufigkeitsverteilungen für die Fragen mit vorgegebenen Antworten (Multiple-Choice, Auswahl). Texteingaben bzw. die aggregierten Werte bei Berücksichtigung der Angaben unter 'Sonstiges' werden hier nicht dargestellt.</p>";

  // ### Frage 0
  // submissions per day
  $fid = 0;
  $gid = 0;
  $title = "Tagesverteilung der Fragebogen-Teilnehmer";
  $axes = array(
    'x' => 'Datum',
    'y' => 'Anzahl der Teilnehmer');
  $labels = array();
  $values = array();
  $query = " SELECT submitted FROM webform_submissions WHERE nid = 89 ORDER BY submitted DESC ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = date('Ymd', $record['submitted']);
    if (!isset($values[$ind])) {
      $values[$ind] = 1;
    }
    else {
      $values[$ind]++;
    }
    $first = $record['submitted'];
  }
  $datestring = '';
  while ($datestring != '04.07.') {
    $datestring = date('d.m.', $first);
    $labels[date('Ymd', $first)] = $datestring;
    if (!isset($values[date('Ymd', $first)])) {
      $values[date('Ymd', $first)] = 0;
    }
    $first += 86400;
  }
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('colorful' => 0));
  $outscript[] = "DrawChartBarGradient{$gid}();";

  // ### Frage 1
  // Bundesländer
  $fid = 1;
  $gid = 1;
  $title = "Verteilung der Gärten auf die Bundesländer";
  $axes = array(
    'x' => 'Anzahl der Gärten');
  $labels = array(
    '01' => 'Schleswig-Holstein',
    '02' => 'Hamburg',
    '03' => 'Niedersachsen',
    '04' => 'Bremen',
    '05' => 'Nordrhein-Westfalen',
    '06' => 'Hessen',
    '07' => 'Rheinland-Pfalz',
    '08' => 'Baden-Württemberg',
    '09' => 'Bayern',
    '10' => 'Saarland',
    '11' => 'Berlin',
    '12' => 'Brandenburg',
    '13' => 'Mecklenburg-Vorpommern',
    '14' => 'Sachsen',
    '15' => 'Sachsen-Anhalt',
    '16' => 'Thüringen',
    '99' => 'Nicht in Deutschland'
  );
  $labels = array(
    '08' => 'Baden-Württemberg',
    '09' => 'Bayern',
    '11' => 'Berlin',
    '12' => 'Brandenburg',
    '04' => 'Bremen',
    '02' => 'Hamburg',
    '06' => 'Hessen',
    '13' => 'Mecklenburg-Vorpommern',
    '03' => 'Niedersachsen',
    '05' => 'Nordrhein-Westfalen',
    '07' => 'Rheinland-Pfalz',
    '10' => 'Saarland',
    '14' => 'Sachsen',
    '15' => 'Sachsen-Anhalt',
    '01' => 'Schleswig-Holstein',
    '16' => 'Thüringen',
    '99' => 'Nicht in Deutschland'
  );
  $values = array();
  foreach ($labels AS $lid => $name) {
    $values[$lid] = 0;
  }
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 14 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $bl_ind = sprintf('%02d', $record['data']);
    if ($bl_ind != '00') {
      if (!isset($values[$bl_ind])) {
        $values[$bl_ind] = 1;
      }
      else {
        $values[$bl_ind]++;
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, $axes, array('vmargin' => 3, 'show_values' => true, 'no_sort' => true));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ### Frage 2
  // Garten
  $fid = 2;
  $gid = 2;
  $title = "Arten von Gärten";
  $labels = array(
    '01' => 'Hausgarten',
    '02' => 'Klein- bzw. Schrebergarten',
    '03' => 'Terrasse, Balkon, Dachgarten',
    '04' => 'Sonstiges',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 16 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if (!isset($values[$ind])) {
      $values[$ind] = 1;
    }
    else {
      $values[$ind]++;
    }
  }

  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 3
  // Garten
  $fid = 3;
  $gid = 3;
  $title = "Nutzung von Gärten";
  $axes = array(
    'x' => 'Anzahl der Nennungen');
  $labels = array(
    '01' => 'Ziergarten',
    '02' => 'Nutzgarten',
    '03' => "Kinderspiel- oder Liegewiese",
    '04' => 'Auslauf für Haustiere',
    '05' => 'Biotop für Wildtiere',
    '06' => 'Sonstiges',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 15 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if (!isset($values[$ind])) {
      $values[$ind] = 1;
    }
    else {
      $values[$ind]++;
    }
  }
  arsort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, $axes, array('colorful' => 1, 'no_sort' => true, 'show_values' => true));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ### Frage 4
  // Erfahrung
  $fid = 4;
  $gid = 4;
  $title = "Erfahrung in der Gartenarbeit";
  $labels = array(
    '01' => 'Anfänger (< 2 Jahre)',
    '02' => 'Fortgeschrittene Anfänger (2 - 5 Jahre)',
    '03' => 'Fortgeschrittene (5 - 10 Jahre)',
    '04' => 'Langjährige Hobbygärtner (> 10 Jahre)',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 10 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if (!isset($values[$ind])) {
      $values[$ind] = 1;
    }
    else {
      $values[$ind]++;
    }
  }

  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 6
  // Bewusst gegen cPSM
  $fid = 6;
  $gid = 6;
  $title = "Einsatz chemischer PSM";
  $labels = array(
    '01' => 'in Einzelfällen bewusst dagegen entschieden',
    '02' => 'nicht bewusst dagegen entschieden',
    '03' => 'grundsätzlich kein Einsatz chemischer PSM',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 20 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }

  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 7
  // Unsicherheit
  $fid = 7;
  $gid = 7;
  $title = "Unsicherheit bzgl. der Diagnose";
  $labels = array(
    '01' => 'nie',
    '02' => 'selten',
    '03' => 'öfter',
    '04' => 'häufig',
    '05' => 'immer'
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 67 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 8
  // Diagnose falsch
  $fid = 8;
  $gid = 8;
  $title = "Diagnose im Nachhinein falsch";
  $labels = array(
    '01' => 'nein',
    '02' => 'ja',
    '03' => 'weiß ich nicht',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 29 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 9
  // Ärger
  $fid = 9;
  $gid = 9;
  $title = "Bekämpfung um Ärger zu vermeiden";
  $labels = array(
    '01' => 'nein',
    '02' => 'ja',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 32 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }

  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 10
  // Zufriedenheit
  $fid = 10;
  $gid = 10;
  $title = "Zufriedenheit mit Beratung/Lösungen";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '00' => 'nicht genutzt',
    '01' => 'sehr zufrieden',
    '02' => 'eher zufrieden',
    '03' => 'eher unzufrieden',
    '04' => 'sehr unzufrieden'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array(),
    9 => array(),
    10 => array(),
    11 => array(),
    12 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Gartenbücher',
    2 => 'Gartenzeit-\r\nschriften',
    3 => 'Gartenportale\r\nim Internet',
    4 => 'Diskussionsforen\r\nim Internet',
    5 => 'sonstige\r\nInternetquellen',
    6 => 'Gärtnerei /\r\nGartenpflegedienst',
    7 => 'Beratungsstellen',
    8 => 'Fachberatung\r\nim Gartenverein',
    9 => 'Gartenmarkt',
    10 => 'Baumarkt',
    11 => 'Nachbarschaft,\r\nBekanntenkreis,\r\nFamilie',
    12 => 'Sonstiges'
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 37 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if (!isset($values[$record['no']][$ind])) {
      $values[$record['no']][$ind] = 1;
    }
    else {
      $values[$record['no']][$ind]++;
    }

  }

  $order_values = $values;
  uasort($order_values, 'adamant_cmp_basic_10');
  $order = array_keys($order_values);
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('grouped' => true, 'groups' => $groups, 'label_below' => true, 'order' => $order, 'key.position.x' => 30, 'key.position.y' => 20));
  $outscript[] = "DrawChartBarGradient{$gid}();";

  // ### Frage 11
  // Zufriedenheit
  $fid = 11;
  $gid = 11;
  $title = "Zufriedenheit mit bekanntem Informationsangebot";
  $labels = array(
    '01' => 'sehr zufrieden',
    '02' => 'eher zufrieden',
    '03' => 'eher unzufrieden',
    '04' => 'sehr unzufrieden'
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 68 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 12
  // bekannte PSM
  $fid = 12;
  $gid = 12;
  $title = "Bekanntheit alternativer PSM";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '03' => 'selbst angewendet',
    '02' => 'bekannt',
    '01' => 'nicht bekannt'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array(),
    9 => array(),
    10 => array(),
    11 => array(),
    12 => array(),
    13 => array(),
    14 => array(),
    15 => array(),
    16 => array(),
    17 => array(),
    18 => array(),
    #19 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Pflanzen und Standort aufeinander abstimmen',
    2 => 'ausgewogene Düngung',
    3 => 'Sortenwahl',
    4 => 'Anbaueignung',
    5 => 'Fruchtfolge',
    6 => 'Mischkultur',
    7 => 'Erkrankte Pflanzenteile entfernen und vernichten',
    8 => 'Kulturschutznetze und -vliese',
    9 => 'mechanische Fallen',
    10 => 'Lockstofffallen',
    11 => 'Verwirrmethode',
    12 => 'Nematoden',
    13 => 'Präparate auf Basis von Viren oder Bakterien gegen Schädlinge',
    14 => 'Pflanzenstärkungsmittel',
    15 => 'Nützlingsnisthilfen',
    16 => 'Vogelnistkästen',
    17 => 'mechanische Maßnahmen zur Unkrautbekämpfung',
    18 => 'Unkrautvlies, Mulchfolie',
    #19 => 'Sonstige',
  );
  $group_labels = array(
    1 => 'Pflanzen und Standort\r\naufeinander abstimmen',
    2 => 'ausgewogene Düngung',
    3 => 'Sortenwahl',
    4 => 'Anbaueignung',
    5 => 'Fruchtfolge',
    6 => 'Mischkultur',
    7 => 'Erkrankte Pflanzenteile\r\nentfernen und vernichten',
    8 => 'Kulturschutznetze\r\nund -vliese',
    9 => 'mechanische Fallen',
    10 => 'Lockstofffallen',
    11 => 'Verwirrmethode',
    12 => 'Nematoden',
    13 => 'Präparate auf Basis von Viren\r\no. Bakterien gegen Schädlinge',
    14 => 'Pflanzenstärkungsmittel',
    15 => 'Nützlingsnisthilfen',
    16 => 'Vogelnistkästen',
    17 => 'mechanische Maßnahmen\r\nzur Unkrautbekämpfung',
    18 => 'Unkrautvlies, Mulchfolie',
    #19 => 'Sonstige',
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 45 AND no < 19 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$record['no']][$ind])) {
        $values[$record['no']][$ind] = 1;
      }
      else {
        $values[$record['no']][$ind]++;
      }
    }

  }
  $order_values = $values;
  uasort($order_values, 'adamant_cmp_basic_12');
  $order = array_keys($order_values);
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('grouped' => true, 'groups' => $group_labels, 'label_below' => true, 'gutter.bottom' => 215, 'gutter.left' => 40, 'order' => $order, 'key.position.y' => 20, 'ch' => 400, 'colors' => array('#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303','#a9c30c','#1a33b0','#fc0303'), 'colorful' => true, 'ymax' => 1200));
  $outscript[] = "DrawChartBarGradient{$gid}();";

  // ### Frage 13
  // Sorge
  $fid = 13;
  $gid = 13;
  $title = "Sorge wegen Nebenwirkungen chemischer PSM";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '00' => 'keine Sorge',
    '01' => 'etwas Sorge',
    '02' => 'viel Sorge',
    '03' => 'sehr viel Sorge',
    '04' => 'weiß nicht'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array(),
    9 => array(),
    10 => array(),
    11 => array(),
    12 => array(),
    #13 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Boden',
    2 => 'Gewässer',
    3 => 'Grundwasser /\r\nTrinkwasser',
    4 => 'Schädigung\r\nbenachbarter\r\nPflanzen',
    5 => 'Artensterben',
    6 => 'Schädigung von\r\nBodenorganismen',
    7 => 'Schädigung von\r\nInsekten',
    8 => 'Schädigung von\r\nVögeln',
    9 => 'Schädigung von\r\nSäugetieren',
    10 => 'Schädigung von\r\nHaustieren',
    11 => 'Belastung von\r\nLebensmitteln',
    12 => 'Schädigung der\r\nmenschlichen\r\nGesundheit',
    #13 => 'Sonstiges'
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 49 AND no < 13 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    if ($record['data'] != '') {
      $ind = sprintf('%02d', $record['data']);
      if (!isset($values[$record['no']][$ind])) {
        $values[$record['no']][$ind] = 1;
      }
      else {
        $values[$record['no']][$ind]++;
      }
    }
  }
  $order_values = $values;
  uasort($order_values, 'adamant_cmp_basic_12');
  $order = array_keys($order_values);
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('grouped' => true, 'groups' => $groups, 'label_below' => true, 'order' => $order, 'key.position.y' => 20, 'key.position.x' => 445));
  $outscript[] = "DrawChartBarGradient{$gid}();";

  // ### Frage 14
  // Zustimmung
  $fid = 14;
  $gid = 14;
  $title = "Persönliche Zustimmung";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '00' => 'stimme nicht zu',
    '01' => 'stimme eher nicht zu',
    '02' => 'stimme eher zu',
    '03' => 'stimme zu',
    '04' => 'weiß nicht'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Nach Vorschrift eingesetzt\r\nist die Anwendung von chemischen\r\nPflanzenschutzmitteln für Umwelt\r\nund Gesundheit unbedenklich.',
    2 => 'Umweltschäden durch chemischen Pflanzenschutz werden in den Medien oft übertrieben dargestellt.',
    3 => 'Alternative Maßnahmen erfüllen ihren Zweck ebenso gut wie die Anwendung chemischer Mittel.',
    4 => 'Gesundheitsschäden durch chemischen Pflanzenschutz werden in den Medien oft übertrieben dargestellt.',
    5 => 'Der Einsatz chemischer Pflanzenschutzmittel ist effektiver als alternative Maßnahmen.',
    6 => 'Die Behörden verharmlosen die Umweltrisiken chemischer Pflanzenschutzmittel.',
    7 => 'Die Zulassungsverfahren für chemische Pflanzenschutzmittel sind nicht streng genug.',
    8 => 'Schädlinge und Krankheiten, die die Pflanze nicht nachhaltig schädigen, sollten toleriert werden.'
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 52 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
      if (!isset($values[$record['no']][$ind])) {
        $values[$record['no']][$ind] = 1;
      }
      else {
        $values[$record['no']][$ind]++;
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('grouped' => true, 'groups' => $groups, 'label_below' => true, 'gutter.left' => 40, 'key.position.x' => 250, 'key.position.y' => 15));
  $outscript[] = "DrawChartBarGradient{$gid}();";

  // ### Frage 16
  // Alter
  $fid = 16;
  $gid = 16;
  $title = "Alter der Teilnehmer";
  $axes = array(
    'x' => 'Anzahl der Teilnehmer'
  );
  $labels = array();
  for ($i = 3; $i < 17; $i++) {
    $labels[sprintf('%02d', $i)] = ($i*5) . '-' . ($i*5+4) . ' Jahre';
  }
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 59 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', floor($record['data']/5));
    if ($ind != '00' && $ind != '20') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  #$output .= '<pre>'.print_r($labels,1).'</pre>';
  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, $axes, array('vmargin' => 3, 'show_values' => true, 'gutter.left' => 90));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ### Frage 17
  // Geschlecht
  $fid = 17;
  $gid = 17;
  $title = "Geschlecht der Teilnehmer";
  $labels = array(
    '01' => 'männlich',
    '02' => 'weiblich',
    '03' => 'keine Angabe'
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 60 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### XX Final

  $output .= '<script>
        jQuery(document).ready(function ()
        {'.implode(" \n",$outscript).'})
  </script>';

  return $output;
}

function adamant_charts_combined() {
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.core.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.dynamic.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.tooltips.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.context.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.effects.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.key.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.rect.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.pie.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.bar.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.hbar.js', 'file');
  $output = '';
  $outscript = array();
  $output .= adamant_gradients();

  $output .= "<p>Die auf dieser Seite angezeigten Diagramme veranschaulichen die Eingaben, es handelt sich dabei um reine Häufigkeitsverteilungen für die Fragen mit vorgegebenen Antworten (Multiple-Choice, Auswahl). Texteingaben bzw. die aggregierten Werte bei Berücksichtigung der Angaben unter 'Sonstiges' sind in diesen Grafiken enthalten.  </p>";

  /*
  // ### Frage 2
  // Garten
  $fid = 2;
  $gid = 2;
  $title = "Arten von Gärten";
  $labels = array(
    '01' => 'Hausgarten',
    '02' => 'Klein- bzw. Schrebergarten',
    '03' => 'Terrasse, Balkon, Dachgarten',
    '04' => 'Sonstiges',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 16 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if (!isset($values[$ind])) {
      $values[$ind] = 1;
    }
    else {
      $values[$ind]++;
    }
  }

  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 3
  // Garten
  $fid = 3;
  $gid = 3;
  $title = "Nutzung von Gärten";
  $axes = array(
    'x' => 'Anzahl der Nennungen');
  $labels = array(
    '01' => 'Ziergarten',
    '02' => 'Nutzgarten',
    '03' => "Kinderspiel- oder Liegewiese",
    '04' => 'Auslauf für Haustiere',
    '05' => 'Biotop für Wildtiere',
    '06' => 'Sonstiges',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 15 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if (!isset($values[$ind])) {
      $values[$ind] = 1;
    }
    else {
      $values[$ind]++;
    }
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, $axes);
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ### Frage 4
  // Erfahrung
  $fid = 4;
  $gid = 4;
  $title = "Erfahrung in der Gartenarbeit";
  $labels = array(
    '01' => 'Anfänger (< 2 Jahre)',
    '02' => 'Fortgeschrittene Anfänger (2 - 5 Jahre)',
    '03' => 'Fortgeschrittene (5 - 10 Jahre)',
    '04' => 'Langjährige Hobbygärtner (> 10 Jahre)',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 10 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if (!isset($values[$ind])) {
      $values[$ind] = 1;
    }
    else {
      $values[$ind]++;
    }
  }

  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";
*/
  // ### Frage 6
  // Bewusst gegen cPSM
  $fid = 6;
  $gid = 6;
  $title = "Bewusster Einsatz ncPSM";
  $labels = array();
  $values = array();
  $query = " SELECT s.simplified, COUNT(s.simplified) AS ccount FROM adamant_component_21 s INNER JOIN webform_submitted_data w ON s.sid = w.sid AND s.no = w.no AND w.cid = 20 WHERE w.data = 1 GROUP BY s.simplified ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    if (trim($record['simplified']) != '' && !in_array($record['simplified'],array("Beweggrund fehlt","falsch zugeordnet"))) {
      $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['simplified']));
      if (!isset($labels[$ind])) {
        $labels[$ind] = $record['simplified'];
      }
      $values[$ind] = $record['ccount'];
    }
  }
  asort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 3, 'gutter.left' => 400, 'show_values' => true, 'no_sort' => true, 'colorful' => 1));
  $outscript[] = "DrawChartHBarGradient{$gid}();";
/*
  // ### Frage 7
  // Unsicherheit
  $fid = 7;
  $gid = 7;
  $title = "Unsicherheit bzgl. der Diagnose";
  $labels = array(
    '01' => 'nie',
    '02' => 'selten',
    '03' => 'öfter',
    '04' => 'häufig',
    '05' => 'immer'
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 67 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 8
  // Diagnose falsch
  $fid = 8;
  $gid = 8;
  $title = "Diagnose im Nachhinein falsch";
  $labels = array(
    '01' => 'nein',
    '02' => 'ja',
    '03' => 'weiß ich nicht',
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 29 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";
*/
  // ### Frage 9
  // Ärger
  $fid = 9;
  $split = array(
    1 => 'Problem',
    2 => 'Sozialer Druck',
    3 => 'Methode',
  );
  foreach ($split AS $s => $cat) {
    $gid = 90 + $s;
    $title = "Bekämpfung um Ärger zu vermeiden: " . $cat;
    $labels = array();
    $values = array();
    $query = " SELECT simplified, COUNT(simplified) AS ccount FROM adamant_component_33 WHERE simplified LIKE '{$cat}:%' GROUP BY simplified ";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
      if (trim($record['simplified']) != '') {
        $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),substr($record['simplified'],(strlen($cat) + 1))));
        if (!isset($labels[$ind])) {
          $labels[$ind] = substr($record['simplified'],(strlen($cat) + 1));
        }
        $values[$ind] = $record['ccount'];
      }
    }

    $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
    $outscript[] = "DrawChartPieGradient{$gid}();";
  }
/*
  // ### Frage 10
  // Zufriedenheit
  $fid = 10;
  $gid = 10;
  $title = "Zufriedenheit mit Beratung/Lösungen";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '00' => 'nicht genutzt',
    '01' => 'sehr zufrieden',
    '02' => 'eher zufrieden',
    '03' => 'eher unzufrieden',
    '04' => 'sehr unzufrieden'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array(),
    9 => array(),
    10 => array(),
    11 => array(),
    12 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Gartenbücher',
    2 => 'Gartenzeit-\r\nschriften',
    3 => 'Gartenportale\r\nim Internet',
    4 => 'Diskussionsforen\r\nim Internet',
    5 => 'sonstige\r\nInternetquellen',
    6 => 'Gärtnerei /\r\nGartenpflegedienst',
    7 => 'Beratungsstellen',
    8 => 'Fachberatung\r\nim Gartenverein',
    9 => 'Gartenmarkt',
    10 => 'Baumarkt',
    11 => 'Nachbarschaft,\r\nBekanntenkreis,\r\nFamilie',
    12 => 'Sonstiges'
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 37 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if (!isset($values[$record['no']][$ind])) {
      $values[$record['no']][$ind] = 1;
    }
    else {
      $values[$record['no']][$ind]++;
    }

  }
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('grouped' => true, 'groups' => $groups, 'label_below' => true));
  $outscript[] = "DrawChartBarGradient{$gid}();";
*/
  // ### Frage 11
  // Zufriedenheit
  /*
  "Unzu.: Informationsangebot unübersichtlich/schlecht zugänglich"
  "Unzu.: kein Erfolg der Maßnahmen", "Unzu.: Mangelnde Information über Gefahren von PSM"
  "Unzu.: Mangelnde wissenschaftliche Fundierung"
  "Unzu.: Unseriöse Herstellerinformationen"
  "Unzu.: zu wenig Informationen zu alternativen PS-Maßnahmen"
  "Zu.: Erfolg der Maßnahmen"
  "Zu.: Informationen zu alternativen PS-Maßnahmen" (bitte umbenennen in: "Zu.: Ausreichend Informationen zu alternativen PS-Maßnahmen")
  "Zu.: Seriöse Herstellerinformationen"

   alt: "Unzu.: Informationsangebot unübersichtlich/schlecht zugänglich";
neu: "Das Informationsangebot ist unübersichtlich bzw. schlecht zugänglich."
- alt: "Unzu.: kein Erfolg der Maßnahmen"; neu: "Die vorgeschlagenen
Maßnahmen waren nicht erfolgreich."
- alt: "Unzu.: Mangelnde Informationen über Gefahren von PSM"; neu: "Es
gibt zu wenig Informationen über Gefahren und Nebenwirkungen von PSM
(sowohl chemische als auch nicht-chemische)."
- alt: "Unzu.: Mangelnde wissenschaftliche Fundierung"; neu:
"Informationen über Pflanzenschutz sind nicht ausreichend
wissenschaftlich fundiert."
- alt: "Unzu.: Unseriöse Herstellerinformationen"; neu: "Ich vertraue
den Informationen der Hersteller nicht."
- alt: "Unzu.: zu wenig Informationen zu alternativen PS-Maßnahmen";
neu: "Es gibt zu wenig Informationen zu alternativen PS-Maßnahmen."
- alt: "Zu.: Ausreichend Informationen zu alternativen PS-Maßnahmen";
neu: "Es gibt genügend Informationen zu alternativen PS-Maßnahmen."
- alt: "Zu.: Erfolg der Maßnahmen";  neu: "Die vorgeschlagenen Maßnahmen
waren erfolgreich."
- alt: "Zu.: Seriöse Herstellerinformationen"; neu: "Die Hersteller
stellen hilfreiche Informationen zur Verfügung."
   */
  $fid = 11;
  $gid = 111;
  $title = "Zufriedenheit";
  $nice_labels = array(
      "Das Informationsangebot ist unübersichtlich bzw. schlecht zugänglich." => "Das Informationsangebot ist unübersichtlich\\r\\nbzw. schlecht zugänglich.",
      "Die vorgeschlagenen Maßnahmen waren nicht erfolgreich." => "Die vorgeschlagenen Maßnahmen\\r\\nwaren nicht erfolgreich.",
      "Es gibt zu wenig Informationen über Gefahren und Nebenwirkungen von PSM (sowohl chemische als auch nicht-chemische)." => "Es gibt zu wenig Informationen über\\r\\nGefahren und Nebenwirkungen von PSM\\r\\n(sowohl chemische als auch nicht-chemische).",
      "Informationen über Pflanzenschutz sind nicht ausreichend wissenschaftlich fundiert." => "Informationen über Pflanzenschutz sind\\r\\nnicht ausreichend wissenschaftlich fundiert.",
      "Ich vertraue den Informationen der Hersteller nicht." => "Ich vertraue den Informationen\\r\\nder Hersteller nicht.",
      "Es gibt zu wenig Informationen zu alternativen PS-Maßnahmen." => "Es gibt zu wenig Informationen\\r\\nzu alternativen PS-Maßnahmen.",
      "Die vorgeschlagenen Maßnahmen waren erfolgreich." => "Die vorgeschlagenen Maßnahmen\\r\\nwaren erfolgreich.",
      "Es gibt genügend Informationen zu alternativen PS-Maßnahmen." => "Es gibt genügend Informationen\\r\\nzu alternativen PS-Maßnahmen.",
      "Die Hersteller stellen hilfreiche Informationen zur Verfügung." => "Die Hersteller stellen hilfreiche\\r\\nInformationen zur Verfügung.",
      "Es gibt nicht genug Informationen über die Gefahren von PSM." => "Es gibt nicht genug Informationen\\r\\nüber die Gefahren von PSM.",
      "Ich bin unzufrieden mit den Gebrauchsanweisungen von PSM." => "Ich bin unzufrieden mit den\\r\\nGebrauchsanweisungen von PSM.");
  $values = $labels = array();
  $query = " SELECT s.simplified, COUNT(s.simplified) AS ccount FROM adamant_component_42 s GROUP BY s.simplified ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    if (trim($record['simplified']) != '' && in_array($record['simplified'],array(
      "Das Informationsangebot ist unübersichtlich bzw. schlecht zugänglich.",
      "Die vorgeschlagenen Maßnahmen waren nicht erfolgreich.",
      "Es gibt zu wenig Informationen über Gefahren und Nebenwirkungen von PSM (sowohl chemische als auch nicht-chemische).",
      "Informationen über Pflanzenschutz sind nicht ausreichend wissenschaftlich fundiert.",
      "Ich vertraue den Informationen der Hersteller nicht.",
      "Es gibt zu wenig Informationen zu alternativen PS-Maßnahmen.",
      "Die vorgeschlagenen Maßnahmen waren erfolgreich.",
      "Es gibt genügend Informationen zu alternativen PS-Maßnahmen.",
      "Die Hersteller stellen hilfreiche Informationen zur Verfügung.",
      "Es gibt nicht genug Informationen über die Gefahren von PSM.",
      "Ich bin unzufrieden mit den Gebrauchsanweisungen von PSM."))) {
      $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['simplified']));
      if (!isset($labels[$ind])) {
        $labels[$ind] = $record['simplified'];
      }
      $values[$ind] = $record['ccount'];
    }
  }
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  asort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $nice_labels[$unsorted_labels[$key]];
  }
  $colors = array('#ABD874','#ABD874','#E18D87','#E18D87','#ABD874','#E18D87','#E18D87','#E18D87','#E18D87','#E18D87','#E18D87');

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 3, 'gutter.left' => 320, 'show_values' => true, 'no_sort' => true, 'colors' => $colors));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  $gid = 112;
  $title = "Zufriedenheit (alle)";
  $labels = array();
  $values = array();
  $query = " SELECT s.simplified, COUNT(s.simplified) AS ccount FROM adamant_component_42 s GROUP BY s.simplified ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    if (trim($record['simplified']) != '') {
      $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['simplified']));
      if (!isset($labels[$ind])) {
        $labels[$ind] = $record['simplified'];
      }
      $values[$ind] = $record['ccount'];
    }
  }
  asort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 3, 'gutter.left' => 320, 'show_values' => true, 'no_sort' => true, 'colorful' => true));
  $outscript[] = "DrawChartHBarGradient{$gid}();";


  // ### Frage 12
  // bekannte PSM
  $fid = 12;
  $gid = 12;
  $title = "Bekanntheit alternativer PSM";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '03' => 'selbst angewendet',
    '02' => 'bekannt',
    '01' => 'nicht bekannt'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array(),
    9 => array(),
    10 => array(),
    11 => array(),
    12 => array(),
    13 => array(),
    14 => array(),
    15 => array(),
    16 => array(),
    17 => array(),
    18 => array(),
    19 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Pflanzen und Standort aufeinander abstimmen',
    2 => 'ausgewogene Düngung',
    3 => 'Sortenwahl',
    4 => 'Anbaueignung',
    5 => 'Fruchtfolge',
    6 => 'Mischkultur',
    7 => 'Erkrankte Pflanzenteile entfernen und vernichten',
    8 => 'Kulturschutznetze und -vliese',
    9 => 'mechanische Fallen',
    10 => 'Lockstofffallen',
    11 => 'Verwirrmethode',
    12 => 'Nematoden',
    13 => 'Präparate auf Basis von Viren oder Bakterien gegen Schädlinge',
    14 => 'Pflanzenstärkungsmittel',
    15 => 'Nützlingsnisthilfen',
    16 => 'Vogelnistkästen',
    17 => 'mechanische Maßnahmen zur Unkrautbekämpfung',
    18 => 'Unkrautvlies, Mulchfolie',
    19 => 'Sonstige',
  );
  $group_labels = array(
    1 => 'Pflanzen und Standort\r\naufeinander abstimmen',
    2 => 'ausgewogene Düngung',
    3 => 'Sortenwahl',
    4 => 'Anbaueignung',
    5 => 'Fruchtfolge',
    6 => 'Mischkultur',
    7 => 'Erkrankte Pflanzenteile\r\nentfernen und vernichten',
    8 => 'Kulturschutznetze\r\nund -vliese',
    9 => 'mechanische Fallen',
    10 => 'Lockstofffallen',
    11 => 'Verwirrmethode',
    12 => 'Nematoden',
    13 => 'Präparate auf Basis von Viren\r\noder Bakterien gegen Schädlinge',
    14 => 'Pflanzenstärkungsmittel',
    15 => 'Nützlingsnisthilfen',
    16 => 'Vogelnistkästen',
    17 => 'mechanische Maßnahmen zur\r\nUnkrautbekämpfung',
    18 => 'Unkrautvlies, Mulchfolie',
    19 => 'Sonstige',
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 45 ";
  $result = db_query($query);
  $sother = array();
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($record['no'] != 19) {
      if ($ind != '00') {
        if (!isset($values[$record['no']][$ind])) {
          $values[$record['no']][$ind] = 1;
        }
        else {
          $values[$record['no']][$ind]++;
        }
      }
    }
    else {
      $squery = " SELECT simplified FROM adamant_component_69 WHERE sid = {$record['sid']} ";
      $sresult = db_query($squery);
      while ($srecord = $sresult->fetchAssoc()) {
        $sgroup = trim($srecord['simplified']);
        if ($sgroup == 'Sonstiges-Sonstiges') {
          $sgroup = "Sonstige";
        }
        if (in_array($sgroup, $groups)) {
          $sno = array_search($sgroup, $groups);
        }
        else {
          /*$groups[] = $sgroup;
          $sno = array_search($sgroup, $groups);
          $values[$sno] = array(
            '03' => 0,
            '02' => 0,
            '01' => 0,
          );
          */
         if (!isset($sother[$sgroup])) {
          $sother[$sgroup] = 0;
         }
         $sother[$sgroup]++;
          $sgroup = "Sonstige";
          $sno = array_search($sgroup, $groups);
        }
        if ($ind != '00') {
          if (!isset($values[$sno][$ind])) {
            $values[$sno][$ind] = 1;
          }
          else {
            $values[$sno][$ind]++;
          }
        }
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('grouped' => true, 'groups' => $group_labels, 'label_below' => true, 'gutter.bottom' => 215));
  $outscript[] = "DrawChartBarGradient{$gid}();";

  $output .= '<h4>Liste der sonstigen Nennungen</h4><table><tr><th>Beschreibung</th><th>Anzahl Nennungen</th></tr>';
  foreach ($sother AS $sn => $sc) {
    $output .= '<tr><td>'.$sn.'</td><td>'.$sc.'</td></tr>';
  }
  $output .= '</table>';

/*
  // ### Frage 13
  // Sorge
  $fid = 13;
  $gid = 13;
  $title = "Sorge wegen Nebenwirkungen chemischer PSM";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '00' => 'keine Sorge',
    '01' => 'etwas Sorge',
    '02' => 'viel Sorge',
    '03' => 'sehr viel Sorge',
    '04' => 'weiß nicht'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array(),
    9 => array(),
    10 => array(),
    11 => array(),
    12 => array(),
    13 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Boden',
    2 => 'Gewässer',
    3 => 'Grundwasser /\r\nTrinkwasser',
    4 => 'Schädigung\r\nbenachbarter\r\nPflanzen',
    5 => 'Artensterben',
    6 => 'Schädigung von\r\nBodenorganismen',
    7 => 'Schädigung von\r\nInsekten',
    8 => 'Schädigung von\r\nVögeln',
    9 => 'Schädigung von\r\nSäugetieren',
    10 => 'Schädigung von\r\nHaustieren',
    11 => 'Belastung von\r\nLebensmitteln',
    12 => 'Schädigung der\r\nmenschlichen Gesundheit',
    13 => 'Sonstiges'
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 45 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
      if (!isset($values[$record['no']][$ind])) {
        $values[$record['no']][$ind] = 1;
      }
      else {
        $values[$record['no']][$ind]++;
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('grouped' => true, 'groups' => $groups, 'label_below' => true));
  $outscript[] = "DrawChartBarGradient{$gid}();";

  // ### Frage 14
  // Zustimmung
  $fid = 14;
  $gid = 14;
  $title = "Persönliche Zustimmung";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '00' => 'stimme nicht zu',
    '01' => 'stimme eher nicht zu',
    '02' => 'stimme eher zu',
    '03' => 'stimme zu',
    '04' => 'weiß nicht'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Nach Vorschrift eingesetzt\r\nist die Anwendung von chemischen\r\nPflanzenschutzmitteln für Umwelt\r\nund Gesundheit unbedenklich.',
    2 => 'Umweltschäden durch chemischen Pflanzenschutz werden in den Medien oft übertrieben dargestellt.',
    3 => 'Alternative Maßnahmen erfüllen ihren Zweck ebenso gut wie die Anwendung chemischer Mittel.',
    4 => 'Gesundheitsschäden durch chemischen Pflanzenschutz werden in den Medien oft übertrieben dargestellt.',
    5 => 'Der Einsatz chemischer Pflanzenschutzmittel ist effektiver als alternative Maßnahmen.',
    6 => 'Die Behörden verharmlosen die Umweltrisiken chemischer Pflanzenschutzmittel.',
    7 => 'Die Zulassungsverfahren für chemische Pflanzenschutzmittel sind nicht streng genug.',
    8 => 'Schädlinge und Krankheiten, die die Pflanze nicht nachhaltig schädigen, sollten toleriert werden.'
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 52 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
      if (!isset($values[$record['no']][$ind])) {
        $values[$record['no']][$ind] = 1;
      }
      else {
        $values[$record['no']][$ind]++;
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'bar', $values, $title, $labels, $axes, array('grouped' => true, 'groups' => $groups, 'label_below' => true));
  $outscript[] = "DrawChartBarGradient{$gid}();";

  // ### Frage 16
  // Alter
  $fid = 16;
  $gid = 16;
  $title = "Alter der Teilnehmer";
  $axes = array(
    'x' => 'Anzahl der Teilnehmer'
  );
  $labels = array();
  for ($i = 3; $i < 20; $i++) {
    $labels[sprintf('%02d', $i)] = ($i*5) . '-' . ($i*5+4) . ' Jahre';
  }
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 59 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', floor($record['data']/5));
    if ($ind != '00' && $ind != '20') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, $axes, array('vmargin' => 3, 'show_values' => true));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ### Frage 17
  // Geschlecht
  $fid = 17;
  $gid = 17;
  $title = "Geschlecht der Teilnehmer";
  $labels = array(
    '01' => 'männlich',
    '02' => 'weiblich',
    '03' => 'keine Angabe'
  );
  $values = array();
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 60 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
    if ($ind != '00') {
      if (!isset($values[$ind])) {
        $values[$ind] = 1;
      }
      else {
        $values[$ind]++;
      }
    }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";
*/
  // ### XX Final

  $output .= '<script>
        jQuery(document).ready(function ()
        {'.implode(" \n",$outscript).'})
  </script>';

  return $output;
}

// Comparison function
function adamant_cmp_basic_12($a, $b) {
    if ($a['03'] == $b['03']) {
        return 0;
    }
    return ($a['03'] > $b['03']) ? -1 : 1;
}
function adamant_cmp_basic_10($a, $b) {
    if ($a['01'] == $b['01']) {
        return 0;
    }
    return ($a['01'] > $b['01']) ? -1 : 1;
}

function adamant_charts_extra_14() {
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.core.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.dynamic.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.tooltips.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.context.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.effects.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.key.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.rect.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.pie.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.bar.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.hbar.js', 'file');
  $output = '';
  $outscript = array();
  $output .= adamant_gradients();

  $output .= "<p>Diese Seite zeigt ausschließlich die einzelnen Diagramme zur Antwortverteilung der Einzelaussagen von Frage 14.</p>";

  // ### Frage 14
  // Zustimmung
  $fid = 14;
  $gid = 14;
  $title = "Persönliche Zustimmung";
  $axes = array(
    'y' => 'Anzahl der Nennungen'
  );
  $labels = array(
    '00' => 'stimme nicht zu',
    '01' => 'stimme eher nicht zu',
    '02' => 'stimme eher zu',
    '03' => 'stimme zu',
    '04' => 'weiß nicht'
  );
  $values = array(
    1 => array(),
    2 => array(),
    3 => array(),
    4 => array(),
    5 => array(),
    6 => array(),
    7 => array(),
    8 => array()
  );
  foreach ($values AS $vid => $vdata) {
    foreach ($labels AS $lid => $lname) {
      $values[$vid][$lid] = 0;
    }
  }
  $groups = array(
    1 => 'Nach Vorschrift eingesetzt ist die Anwendung von chemischen Pflanzenschutzmitteln für Umwelt und Gesundheit unbedenklich.',
    2 => 'Umweltschäden durch chemischen Pflanzenschutz werden in den Medien oft übertrieben dargestellt.',
    3 => 'Alternative Maßnahmen erfüllen ihren Zweck ebenso gut wie die Anwendung chemischer Mittel.',
    4 => 'Gesundheitsschäden durch chemischen Pflanzenschutz werden in den Medien oft übertrieben dargestellt.',
    5 => 'Der Einsatz chemischer Pflanzenschutzmittel ist effektiver als alternative Maßnahmen.',
    6 => 'Die Behörden verharmlosen die Umweltrisiken chemischer Pflanzenschutzmittel.',
    7 => 'Die Zulassungsverfahren für chemische Pflanzenschutzmittel sind nicht streng genug.',
    8 => 'Schädlinge und Krankheiten, die die Pflanze nicht nachhaltig schädigen, sollten toleriert werden.'
  );
  $query = " SELECT * FROM webform_submitted_data WHERE cid = 52 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $ind = sprintf('%02d', $record['data']);
      if (!isset($values[$record['no']][$ind])) {
        $values[$record['no']][$ind] = 1;
      }
      else {
        $values[$record['no']][$ind]++;
      }
  }
  foreach ($groups AS $group => $title) {
    $ngid = $gid * 10 + $group;
    $output .= adamant_charts_single_output($fid, $ngid, 'bar', $values[$group], $title, $labels, $axes, array('colorful' => true, 'label_below' => true, 'gutter.bottom' => 150, 'gutter.left' => 40, 'longtitle' => true, 'ymax' => 600, 'cw' => 250));
    $outscript[] = "DrawChartBarGradient{$ngid}();";
  }

  // ### XX Final

  $output .= '<script>
        jQuery(document).ready(function ()
        {'.implode(" \n",$outscript).'})
  </script>';

  return $output;
}

function adamant_charts_extra_5() {
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.core.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.dynamic.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.tooltips.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.context.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.effects.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.key.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.rect.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.pie.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.bar.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.hbar.js', 'file');
  $output = '';
  $outscript = array();
  $output .= adamant_gradients();

  $output .= "<p>Auf dieser Seite werden Auswertungen zu Fragenkomplex 5 (Problembeschreibungen) dargestellt. Die angezeigten Werte sind bereits die aggregierten Daten.</p>";

  // ### Frage 5
  // Probleme
  $fid = 5;
  $gid = 1;
  $title = "Problemverteilung";
  $labels = array();
  $values = array();
  $threshold = 25;
  $query = " SELECT name, COUNT(*) AS name_count FROM adamant_complex_1 GROUP BY name ORDER BY name_count DESC";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if (trim($record['name']) != '' && $record['name_count'] > ($threshold - 1)) {
        $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['name']));
        if (!isset($labels[$ind])) {
          $labels[$ind] = $record['name'];
        }
        $values[$ind] = $record['name_count'];
      }
      elseif (trim($record['name']) != '') {
        $ind = 'misc';
        if (!isset($labels[$ind])) {
          $labels[$ind] = 'Sonstiges';
          $values[$ind] = 0;
        }
        $values[$ind] += $record['name_count'];
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $output .= '<p>Probleme mit weniger als '.$threshold.' Nennungen sind unter Sonstiges zusammengefasst.</p>';
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 5
  // Kategorie
  $fid = 5;
  $gid = 2;
  $title = "Problemkategorieverteilung";
  $labels = array(
    1 => 'Schädling',
    2 => 'Krankheit',
    3 => 'Unkraut',
  );
  $values = array();
  $query = " SELECT category, COUNT(*) AS cat_count FROM adamant_complex_1 GROUP BY category ORDER BY cat_count DESC";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['category'] > 0) {
        $ind = $record['category'];
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cat_count'];
        }
        else {
          $values[$ind] += $record['cat_count'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 5
  // Probleme
  $cats = array(
    1 => 'Schädling',
    2 => 'Krankheit',
    3 => 'Unkraut',
  );
  $fid = 5;
  foreach ($cats AS $cat => $catname) {
    $gid = 30 + $cat;
    $title = "Problemverteilung in der Kategorie {$catname}";
    $labels = array();
    $values = array();
    $threshold = 10;
    $query = " SELECT name, COUNT(*) AS name_count FROM adamant_complex_1 WHERE category = {$cat} GROUP BY name ORDER BY name_count DESC";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
        if (trim($record['name']) != '' && $record['name_count'] > ($threshold - 1)) {
          $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['name']));
          if (!isset($labels[$ind])) {
            $labels[$ind] = $record['name'];
          }
          $values[$ind] = $record['name_count'];
        }
        elseif (trim($record['name']) != '') {
          $ind = 'misc';
          if (!isset($labels[$ind])) {
            $labels[$ind] = 'Sonstiges';
            $values[$ind] = 0;
          }
          $values[$ind] += $record['name_count'];
        }
    }
    $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
    $output .= '<p>Probleme mit weniger als '.$threshold.' Nennungen sind unter Sonstiges zusammengefasst.</p>';
    $outscript[] = "DrawChartPieGradient{$gid}();";
  }

  // ### Frage 5
  // Standort Kultur
  $fid = 5;
  $gid = 4;
  $title = "Betroffene Standorte / Kulturen";
  $labels = array();
  $values = array();
  $threshold = 20;
  $query = " SELECT location, COUNT(*) AS loc_count FROM adamant_complex_1 GROUP BY location ORDER BY loc_count DESC";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if (trim($record['location']) != '' && $record['loc_count'] > ($threshold - 1)) {
        $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['location']));
        if (!isset($labels[$ind])) {
          $labels[$ind] = $record['location'];
        }
        $values[$ind] = $record['loc_count'];
      }
      elseif (trim($record['location']) != '') {
        $ind = 'misc';
        if (!isset($labels[$ind])) {
          $labels[$ind] = 'Sonstiges';
          $values[$ind] = 0;
        }
        $values[$ind] += $record['loc_count'];
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $output .= '<p>Probleme mit weniger als '.$threshold.' Nennungen sind unter Sonstiges zusammengefasst.</p>';
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 5
  // Stärke des Befalls
  $fid = 5;
  $gid = 5;
  $title = "Stärke des Befalls";
  $labels = array(
    1 => 'gering',
    2 => 'mittel',
    3 => 'stark',
  );
  $values = array();
  $query = " SELECT amount, COUNT(*) AS cat_count FROM adamant_complex_1 GROUP BY amount ORDER BY cat_count DESC";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['amount'] > 0) {
        $ind = $record['amount'];
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cat_count'];
        }
        else {
          $values[$ind] += $record['cat_count'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 5
  // Häufigkeit des Befalls
  $fid = 5;
  $gid = 6;
  $title = "Häufigkeit des Befalls";
  $labels = array(
    1 => 'einmal',
    2 => 'selten',
    3 => 'häufig',
    4 => 'regelmäßig',
  );
  $values = array();
  $query = " SELECT recurrence, COUNT(*) AS cat_count FROM adamant_complex_1 GROUP BY recurrence ORDER BY cat_count DESC";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['recurrence'] > 0) {
        $ind = $record['recurrence'];
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cat_count'];
        }
        else {
          $values[$ind] += $record['cat_count'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 5
  // Behandlung
  $fid = 5;
  $gid = 7;
  $title = "Wurde das Problem behandelt?";
  $labels = array(
    1 => 'Nein',
    2 => 'Ja',
  );
  $values = array();
  $query = " SELECT treated, COUNT(*) AS cat_count FROM adamant_complex_1 GROUP BY treated ORDER BY cat_count DESC";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['treated'] > 0) {
        $ind = $record['treated'];
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cat_count'];
        }
        else {
          $values[$ind] += $record['cat_count'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";


  // ### Frage 5
  // Maßnahmen
  $fid = 5;
  $gid = 8;
  $title = "Behandelnde Maßnahmen";
  $labels = array();
  $values = array();
  $threshold = 20;
  $query = " SELECT treatment, COUNT(*) AS name_count FROM adamant_complex_1 GROUP BY treatment ORDER BY name_count DESC";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if (trim($record['treatment']) != '' && $record['name_count'] > ($threshold - 1)) {
        $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['treatment']));
        if (!isset($labels[$ind])) {
          $labels[$ind] = $record['treatment'];
        }
        $values[$ind] = $record['name_count'];
      }
      elseif (trim($record['treatment']) != '') {
        $ind = 'misc';
        if (!isset($labels[$ind])) {
          $labels[$ind] = 'Sonstiges';
          $values[$ind] = 0;
        }
        $values[$ind] += $record['name_count'];
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $output .= '<p>Maßnahmen mit weniger als '.$threshold.' Nennungen sind unter Sonstiges zusammengefasst.</p>';
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 5
  // Kategorie
  $fid = 5;
  $gid = 9;
  $title = "Maßnahmenkategorieverteilung";
  $labels = array();
  $values = array();
  $query = " SELECT treatment_category, COUNT(*) AS cat_count FROM adamant_complex_1 GROUP BY treatment_category ORDER BY cat_count DESC";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if (trim($record['treatment_category']) != '') {
        $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['treatment_category']));
        if (!isset($labels[$ind])) {
          $labels[$ind] = $record['treatment_category'];
        }
        $values[$ind] = $record['cat_count'];
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ### Frage 5
  // Probleme
  $cats = array();
  $query = " SELECT DISTINCT(treatment_category) FROM adamant_complex_1 ORDER BY treatment_category ASC ";
  $result = db_query($query);
  $t = 1;
  while ($record = $result->fetchAssoc()) {
    if (trim($record['treatment_category']) != '') {
      $cats[$t] = $record['treatment_category'];
      $t++;
    }
  }
  $fid = 5;
  foreach ($cats AS $cat => $catname) {
    $gid = 100 + $cat;
    $title = "Maßnahmenverteilung in der Kategorie {$catname}";
    $labels = array();
    $values = array();
    $threshold = $catname == 'biologisch' ? 1 : 2;
    $query = " SELECT treatment, COUNT(*) AS name_count FROM adamant_complex_1 WHERE treatment_category = '{$catname}' GROUP BY treatment ORDER BY name_count DESC";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
        if (trim($record['treatment']) != '' && $record['name_count'] > ($threshold - 1)) {
          $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['treatment']));
          if (!isset($labels[$ind])) {
            $labels[$ind] = $record['treatment'];
          }
          $values[$ind] = $record['name_count'];
        }
        elseif (trim($record['treatment']) != '') {
          $ind = 'misc';
          if (!isset($labels[$ind])) {
            $labels[$ind] = 'Sonstiges';
            $values[$ind] = 0;
          }
          $values[$ind] += $record['name_count'];
        }
    }
    $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels);
    $output .= '<p>Maßnahmen mit weniger als '.$threshold.' Nennungen sind unter Sonstiges zusammengefasst.</p>';
    $outscript[] = "DrawChartPieGradient{$gid}();";
  }


  // ### XX Final

  $output .= '<script>
        jQuery(document).ready(function ()
        {'.implode(" \n",$outscript).'})
  </script>';

  return $output;
}

function adamant_charts_final_5() {
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.core.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.dynamic.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.tooltips.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.context.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.effects.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.common.key.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.drawing.rect.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.pie.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.bar.js', 'file');
  drupal_add_js(drupal_get_path('module', 'adamant') .'/RGraph/libraries/RGraph.hbar.js', 'file');
  $output = '';
  $outscript = array();
  $output .= adamant_gradients();

  $output .= "<p>Auf dieser Seite werden Auswertungen zu Fragenkomplex 5 (Problembeschreibungen) dargestellt. Die angezeigten Werte sind bereits die aggregierten Daten.</p>";

  // ###
  $fid = $gid = 1;
  $title = "Wie viele Probleme wurden insgesamt benannt?";
  $labels = array();
  $values = array();
  $threshold = 25;
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 GROUP BY CONCAT(sid,pro)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $output .= adamant_answer_output($fid, $gid, $title, $answer);
  $total_pro = $answer;

  // ###
  $fid = $gid = 29;
  $title = "Wie viele Probleme wurden nicht behandelt?";
  $labels = array();
  $values = array();
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b WHERE tnt = '' GROUP BY CONCAT(b.sid,b.pro)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' ('.(round(($record['cc']/$total_pro*100),2)).'%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 2;
  $title = "Wie verteilen sich die genannten Probleme auf Krankheiten/ Schädlinge/ Unkraut/ Lästlinge?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c1, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.c1 FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.c1 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c1'] != '') {
        $ind = $record['c1'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 3;
  $title = "Wie verteilen sich die Krankheiten auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.c2 FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Krankheit' GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.c2 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 4;
  $title = "Welches sind die drei am häufigsten genannten Krankheiten?";
  $answers = array();
  $threshold = 25;
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Krankheit' GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.name ORDER BY cc DESC LIMIT 15 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['cc']] = $record['name'];
  }
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 5;
  $title = "Wie verteilen sich die Schädlinge auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $threshold = 12;
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.c2 FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Schädling' GROUP BY CONCAT(b.sid,b.pro) ORDER BY cc ASC) x GROUP BY x.c2 ORDER BY cc DESC ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if ($record['cc'] <= $threshold) {
          $ind = 'Sonstige/unklar';
        }
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  #$output .= '<pre>'.print_r($values,1).'</pre>';
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 6;
  $title = "Wie verteilen sich die Insekten auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c3, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.c3 FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Schädling' AND p.c2 = 'Insekt' GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.c3 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c3'] != '') {
        $ind = $record['c3'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  arsort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }
  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 3, 'gutter.left' => 120, 'show_values' => true, 'no_sort' => true, 'colorful' => true, 'longtitle' => true));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ###
  $fid = $gid = 7;
  $title = "Welches sind die drei am häufigsten genannten Schädlinge?";
  $answers = array();
  $threshold = 25;
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Schädling' GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.name ORDER BY cc DESC LIMIT 15 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['cc']] = $record['name'];
  }
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 8;
  $title = "Wie verteilen sich die Unkräuter auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.c2 FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Unkraut' GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.c2 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 9;
  $title = "Welches sind die drei am häufigsten genannten Unkräuter?";
  $answers = array();
  $threshold = 25;
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Unkraut' GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.name ORDER BY cc DESC LIMIT 10 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['cc']] = $record['name'];
  }
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 10;
  $title = "Wie viele verschiedene Kulturen werden als von Schädlingen befallen genannt?";
  $labels = array();
  $values = array();
  $threshold = 25;
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Schädling' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 IN ('Zierpflanze','Nutzpflanze') GROUP BY CONCAT(b.pro,b.ort)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 11;
  $title = "Wie viele verschiedene Kulturen werden als von Krankheiten befallen genannt?";
  $labels = array();
  $values = array();
  $threshold = 25;
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Krankheit' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 IN ('Zierpflanze','Nutzpflanze') GROUP BY CONCAT(b.pro,b.ort)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 12;
  $title = "Wie verteilen sich die von Schädlingen und Krankheiten befallenen Kulturen auf Nutz- und Zierpflanzen?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c1, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.c1 FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 IN ('Krankheit','Schädling') INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 IN ('Zierpflanze','Nutzpflanze') GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.c1 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c1'] != '') {
        $ind = $record['c1'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 13;
  $title = "Wie verteilen sich die von Schädlingen und Krankheiten befallenen Nutzpflanzen auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.c2 FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 IN ('Krankheit','Schädling') INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.c2 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 14;
  $title = "Wie verteilen sich die von Schädlingen und Krankheiten befallenen Zierpflanzen auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.c2 FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 IN ('Krankheit','Schädling') INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Zierpflanze' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.c2 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 15;
  $title = "Welche fünf Einzelkulturen werden am häufigsten als von Schädlingen oder Krankheiten befallen genannt?";
  $answers = array();
  $threshold = 25;
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 IN ('Krankheit','Schädling') INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 IN ('Zierpflanze','Nutzpflanze') GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.name ORDER BY cc DESC LIMIT 10 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['cc']] = $record['name'];
  }
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 16;
  $title = "Welche Standorte werden für Unkraut genannt?";
  $labels = array();
  $values = array();
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 = 'Unkraut' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = '' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.name ORDER BY cc ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    if (trim($record['name']) != '') {
      $ind = strtolower(str_replace(array(' ','ä','ö','ü','ß','Ä','Ö','Ü','/',"'",'"'),array('_','ae','oe','ue','ss','Ae','Oe','Ue','-','',''),$record['name']));
      if (!isset($labels[$ind])) {
        $labels[$ind] = $record['name'];
      }
      $values[$ind] = $record['cc'];
    }
  }
  arsort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 8, 'gutter.left' => 120, 'show_values' => true, 'no_sort' => true, 'colorful' => true));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ###
  $fid = $gid = 17;
  $title = "Wie viele verschiedene Einzelmaßnahmen werden insgesamt genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name GROUP BY CONCAT(b.sid,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 18;
  $title = "Wie verteilen sich die genannten Maßnahmen auf die Kategorien vorbeugend, mechanisch, biologisch etc.?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c1, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, t.c1 FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.c1 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c1'] != '') {
        $ind = $record['c1'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 19;
  $title = "Wie verteilen sich die genannten chemischen Maßnahmen auf die Kategorien Herbizid, Insektizid etc.?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, t.c2 FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.c2 ORDER BY cc ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  arsort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 8, 'gutter.left' => 230, 'show_values' => true, 'no_sort' => true, 'colorful' => true, 'longtitle' => true, 'xmax' => 500));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ###
  $fid = $gid = 20;
  $title = "Wie verteilen sich die genannten mechanischen Maßnahmen auf die Unterkategorien Bodenbearbeitung, Vergrämen etc.?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, t.c2 FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name AND t.c1 = 'mechanisch' GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.c2 ORDER BY cc ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  arsort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 8, 'gutter.left' => 230, 'show_values' => true, 'no_sort' => true, 'colorful' => true, 'longtitle' => true, 'xmax' => 500));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ###
  $fid = $gid = 21;
  $title = "Wie verteilen sich die genannten Hausmittel auf die Unterkategorien Asche, Backpulter etc.?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, t.c2 FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name AND t.c1 = 'Hausmittel' GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.c2 ORDER BY cc ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  arsort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 8, 'gutter.left' => 230, 'show_values' => true, 'no_sort' => true, 'colorful' => true, 'longtitle' => true, 'xmax' => 500));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ###
  $fid = $gid = 22;
  $title = "Wie verteilen sich die genannten biologischen Maßnahmen auf die Unterkategorien biotechnologisch, Nützlingseinsatz etc.?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, t.c2 FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name AND t.c1 = 'biologisch' GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.c2 ORDER BY cc ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  arsort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 8, 'gutter.left' => 230, 'show_values' => true, 'no_sort' => true, 'colorful' => true, 'longtitle' => true, 'xmax' => 500));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ###
  $fid = $gid = 23;
  $title = "Wie verteilen sich die genannten vorbeugenden Maßnahmen auf die Unterkategorien Kulturmaßnahme, Sortenwahl etc.?";
  $labels = array();
  $values = array();
  $query = " SELECT x.c2, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, t.c2 FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name AND t.c1 = 'vorbeugend' GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.c2 ORDER BY cc ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['c2'] != '') {
        $ind = $record['c2'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  arsort($values);
  $unsorted_labels = $labels;
  $labels = array();
  foreach (array_keys($values) AS $key) {
    $labels[$key] = $unsorted_labels[$key];
  }

  $output .= adamant_charts_single_output($fid, $gid, 'hbar', $values, $title, $labels, array('x' => 'Anzahl der Nennungen'), array('vmargin' => 8, 'gutter.left' => 230, 'show_values' => true, 'no_sort' => true, 'colorful' => true, 'longtitle' => true, 'xmax' => 500));
  $outscript[] = "DrawChartHBarGradient{$gid}();";

  // ###
  $fid = $gid = 24;
  $title = "Welche fünf Probleme werden am häufigsten als \"Stark\" bezeichnet?";
  $answers = array();
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name WHERE b.amount = 3 GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.name ORDER BY cc DESC LIMIT 5 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['cc']] = $record['name'];
  }
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 25;
  $title = "Welche fünf Probleme werden am häufigsten als \"regelmäßig\" bezeichnet?";
  $answers = array();
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name WHERE b.recurrence = 4 GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.name ORDER BY cc DESC LIMIT 5 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['cc']] = $record['name'];
  }
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 26;
  $title = "Welche fünf Probleme werden am häufigsten nicht behandelt?";
  $answers = array();
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name WHERE b.tnt = '' GROUP BY CONCAT(b.sid,b.pro)) x GROUP BY x.name ORDER BY cc DESC LIMIT 5 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['name']] = $record['cc'];
  }
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 27;
  $title = "Welche Kulturen werden am häufigsten chemisch behandelt?";
  $answers = array();
  $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.name FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 IN ('Krankheit','Schädling') INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 IN ('Zierpflanze','Nutzpflanze') INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.name ORDER BY cc DESC LIMIT 10 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['name']] = $record['cc'];
  }
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 28;
  $title = "Welche Kultur/Problem-Kombinationen werden am häufigsten chemisch behandelt?";
  $answers = array();
  $query = " SELECT x.pro, x.ort, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, p.name AS pro, o.name AS ort FROM adamant_f5 b INNER JOIN adamant_f5_pro p ON b.pro = p.name AND p.c1 IN ('Krankheit','Schädling') INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 IN ('Zierpflanze','Nutzpflanze') INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid,b.pro,b.ort)) x GROUP BY CONCAT(x.pro,x.ort) ORDER BY cc DESC LIMIT 50 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $answers[$record['ort'] . ' - ' . $record['pro']] = $record['cc'];
  }
  array_flip($answers);
  $output .= adamant_table_output($fid, $gid, $title, $answers);

  // ###
  $fid = $gid = 30;
  $title = "Wie viele Einzelmaßnahmen werden insgesamt von Hausgärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 1 GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 31;
  $title = "Wie viele chemische Einzelmaßnahmen werden insgesamt von Hausgärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 1 INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 32;
  $title = "Wie viele Befragte bezeichnen sich als Hausgärtner?";
  $answer = 762;
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 33;
  $title = "Wie viele Befragte bezeichnen sich als Hausgärtner und setzen chemische Maßnahmen ein?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 1 INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 34;
  $title = "Wie viele Einzelmaßnahmen werden insgesamt von Kleingärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 2 GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 35;
  $title = "Wie viele chemische Einzelmaßnahmen werden insgesamt von Kleingärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 2 INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 36;
  $title = "Wie viele Befragte bezeichnen sich als Kleingärtner?";
  $answer = 276;
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 37;
  $title = "Wie viele Befragte bezeichnen sich als Kleingärtner und setzen chemische Maßnahmen ein?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 2 INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 38;
  $title = "Wie viele Einzelmaßnahmen werden insgesamt von Balkongärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 3 GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 39;
  $title = "Wie viele chemische Einzelmaßnahmen werden insgesamt von Balkongärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 3 INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 40;
  $title = "Wie viele Befragte bezeichnen sich als Balkongärtner?";
  $answer = 77;
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 41;
  $title = "Wie viele Befragte bezeichnen sich als Balkongärtner und setzen chemische Maßnahmen ein?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 3 INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 42;
  $title = "Wie viele Einzelmaßnahmen werden insgesamt von sonstigen Gärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 4 GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 43;
  $title = "Wie viele chemische Einzelmaßnahmen werden insgesamt von sonstigen Gärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 4 INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 44;
  $title = "Wie viele Befragte bezeichnen sich als sonstige Gärtner?";
  $answer = 68;
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 45;
  $title = "Wie viele Befragte bezeichnen sich als sonstige Gärtner und setzen chemische Maßnahmen ein?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND d.data = 4 INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 46;
  $title = "Wie viele Einzelmaßnahmen werden insgesamt von unbekannten Gärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND (d.data = 0) GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 47;
  $title = "Wie viele chemische Einzelmaßnahmen werden insgesamt von unbekannten Gärtnern genannt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN webform_submitted_data d ON b.sid = d.sid AND d.cid = 16 AND (d.data = 0) INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' GROUP BY CONCAT(b.sid,tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];// . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 48;
  $title = "Wie verteilen sich die genannten chemischen Maßnahmen auf die Gärtner?";
  $labels = array();
  $values = array();
  $query = " SELECT x.data, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, d.data FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name AND t.c1 = 'chemisch' INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 16 GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.data ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['data'] != '') {
        $ind = $record['data'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 49;
  $title = "Wie verteilen sich die genannten, nicht kategorisierten Maßnahmen auf die Gärtner?";
  $labels = array();
  $values = array();
  $query = " SELECT x.data, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, d.data FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name AND t.c1 = '' INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 16 GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.data ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['data'] != '') {
        $ind = $record['data'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 50;
  $title = "Wie viele Einzelmaßnahmen werden insgesamt an Zierpflanzen durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Zierpflanze' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 51;
  $title = "Wie viele chemische Einzelmaßnahmen werden insgesamt an Zierpflanzen durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Zierpflanze' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 52;
  $title = "Wie viele Einzelmaßnahmen werden insgesamt an Nutzpflanzen durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 53;
  $title = "Wie viele chemische Einzelmaßnahmen werden insgesamt an Nutzpflanzen durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 54;
  $title = "Wie viele chemische Einzelmaßnahmen wurden insgesamt an Zier- und Nutzpflanzen durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 IN ('Zierpflanze','Nutzpflanze') GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 55;
  $title = "Wie viele chemische Einzelmaßnahmen wurden davon an Zierpflanzen durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Zierpflanze' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 56;
  $title = "Wie viele chemische Einzelmaßnahmen wurden davon an Nutzpflanzen durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 57;
  $title = "Wie viele chemische Einzelmaßnahmen wurden insgesamt an Standorten durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = '' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 58;
  $title = "Wie oft wurde Unkraut auf befestigten Flächen chemisch behandelt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_pro p ON p.name = b.pro AND p.c1 = 'Unkraut' WHERE b.ort = 'Befestigte Fläche' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 59;
  $title = "Wie verteilen sich die genannten Maßnahmen auf die Erfahrungsgruppen?";
  $labels = array();
  $values = array();
  $query = " SELECT x.data, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, d.data FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.data ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['data'] != '') {
        $ind = $record['data'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 60;
  $title = "Wie verteilen sich die genannten chemischen Maßnahmen auf die Erfahrungsgruppen?";
  $labels = array();
  $values = array();
  $query = " SELECT x.data, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, d.data FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON b.tnt = t.name AND t.c1 = 'chemisch' INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 GROUP BY CONCAT(b.sid,b.tnt)) x GROUP BY x.data ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['data'] != '') {
        $ind = $record['data'];
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  $fid = $gid = 61;
  $title = "Wie viele Befragte bezeichnen sich als Anfänger?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 AND d.data = 1 GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 62;
  $title = "Wie viele Befragte bezeichnen sich als Anfänger und setzen chemische Maßnahmen ein?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 AND d.data = 1 GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 63;
  $title = "Wie viele Befragte bezeichnen sich als Fortgeschritten?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 AND d.data = 2 GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 64;
  $title = "Wie viele Befragte bezeichnen sich als Fortgeschritten und setzen chemische Maßnahmen ein?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 AND d.data = 2 GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 65;
  $title = "Wie viele Befragte bezeichnen sich als Erfahren?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 AND d.data = 3 GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 66;
  $title = "Wie viele Befragte bezeichnen sich als Erfahren und setzen chemische Maßnahmen ein?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 AND d.data = 3 GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 67;
  $title = "Wie viele Befragte bezeichnen sich als Profis?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 AND d.data = 4 GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 68;
  $title = "Wie viele Befragte bezeichnen sich als Profis und setzen chemische Maßnahmen ein?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN webform_submitted_data d ON d.sid = b.sid AND d.cid = 10 AND d.data = 4 GROUP BY CONCAT(b.sid)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);


  // ###
  $fid = $gid = 69;
  $title = "Wie verteilen sich die in Problemen genannten Obstkulturen auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $orte = array();
  $threshold = 20;
  $query = " SELECT x.data, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.c3 AS data FROM adamant_f5 b INNER JOIN adamant_f5_ort o ON b.ort = o.name AND o.c2 = 'Obst' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.data ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['data'] != '') {
        $orte[] = $record['data'];
        $ind = $record['data'];
        $output .= $ind;
        if ($record['cc'] <= $threshold) {
          $ind = 'Sonstige/unklar';
        }
        if ($ind == "unklar") {
          $ind = 'Sonstige/unklar';
        }
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true, 'nosort' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  foreach ($orte AS $o => $on) {
    $fid = $gid = 70 + $o;
    $title = "Welches sind die fünf häufigsten Kulturen in der Kategorie \"".$on."\"?";
    $answers = array();
    $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.name FROM adamant_f5 b INNER JOIN adamant_f5_ort o ON b.ort = o.name AND o.c2 = 'Obst' AND o.c3 = '".$on."' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.name ORDER BY cc DESC LIMIT 5 ";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
      $answers[$record['name']] = $record['cc'];
    }
    $output .= adamant_table_output($fid, $gid, $title, $answers);
  }

  // ###
  $fid = $gid = 80;
  $title = "Wie verteilen sich die in Problemen genannten Gemüsekulturen auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $threshold = 20;
  $orte = array();
  $query = " SELECT x.data, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.c3 AS data FROM adamant_f5 b INNER JOIN adamant_f5_ort o ON b.ort = o.name AND o.c2 = 'Gemüse' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.data ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['data'] != '') {
        $orte[] = $record['data'];
        $ind = $record['data'];
        if ($record['cc'] <= $threshold) {
          $ind = 'Sonstige';
        }
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  foreach ($orte AS $o => $on) {
    $fid = $gid = 81 + $o;
    $title = "Welches sind die fünf häufigsten Kulturen in der Kategorie \"".$on."\"?";
    $answers = array();
    $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.name FROM adamant_f5 b INNER JOIN adamant_f5_ort o ON b.ort = o.name AND o.c2 = 'Gemüse' AND o.c3 = '".$on."' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.name ORDER BY cc DESC LIMIT 5 ";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
      $answers[$record['name']] = $record['cc'];
    }
    $output .= adamant_table_output($fid, $gid, $title, $answers);
  }

  // ###
  $fid = $gid = 91;
  $title = "Wie verteilen sich die in Problemen genannten Zierpflanzen auf die Unterkategorien?";
  $labels = array();
  $values = array();
  $orte = array();
  $threshold = 20;
  $query = " SELECT x.data, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.c2 AS data FROM adamant_f5 b INNER JOIN adamant_f5_ort o ON b.ort = o.name AND o.c1 = 'Zierpflanze' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.data ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
      if ($record['data'] != '') {
        $orte[] = $record['data'];
        $ind = $record['data'];
        if ($record['cc'] <= $threshold) {
          $ind = 'Sonstige';
        }
        if (!isset($values[$ind])) {
          $labels[$ind] = $ind;
        }
        if (!isset($values[$ind])) {
          $values[$ind] = $record['cc'];
        }
        else {
          $values[$ind] += $record['cc'];
        }
      }
  }
  $output .= adamant_charts_single_output($fid, $gid, 'pie', $values, $title, $labels, null, array('longtitle' => true, 'nosort' => true));
  $outscript[] = "DrawChartPieGradient{$gid}();";

  // ###
  foreach ($orte AS $o => $on) {
    $fid = $gid = 92 + $o;
    $title = "Welches sind die fünf häufigsten Kulturen in der Kategorie \"".$on."\"?";
    $answers = array();
    $query = " SELECT x.name, COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc, o.name FROM adamant_f5 b INNER JOIN adamant_f5_ort o ON b.ort = o.name AND o.c1 = 'Zierpflanze' AND o.c2 = '".$on."' GROUP BY CONCAT(b.sid,b.ort)) x GROUP BY x.name ORDER BY cc DESC LIMIT 5 ";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
      $answers[$record['name']] = $record['cc'];
    }
    $output .= adamant_table_output($fid, $gid, $title, $answers);
  }

  // ###
  $fid = $gid = 97;
  $title = "Wie viele chemische Einzelmaßnahmen wurden an Obst und Gemüse durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' AND o.c2 IN ('Obst','Gemüse') GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 98;
  $title = "Wie viele chemische Einzelmaßnahmen wurden an Nutzpflanzen (Obst) durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' AND o.c2 = 'Obst' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 99;
  $title = "Wie viele chemische Einzelmaßnahmen wurden an Nutzpflanzen (Gemüse) durchgeführt?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' AND o.c2 = 'Gemüse' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 100;
  $title = "Wie viele chemische Einzelmaßnahmen wurden an Obst und Gemüse durchgeführt, bei denen keine Schnecken das Problem darstellen?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' AND o.c2 IN ('Obst','Gemüse') INNER JOIN adamant_f5_pro p ON p.name = b.pro AND p.c2 <> 'Schnecke' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'];
  $cache = $answer;
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 101;
  $title = "Wie viele chemische Einzelmaßnahmen wurden an Nutzpflanzen (Obst) durchgeführt, bei denen keine Schnecken das Problem darstellen?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' AND o.c2 = 'Obst' INNER JOIN adamant_f5_pro p ON p.name = b.pro AND p.c2 <> 'Schnecke' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ###
  $fid = $gid = 102;
  $title = "Wie viele chemische Einzelmaßnahmen wurden an Nutzpflanzen (Gemüse) durchgeführt, bei denen keine Schnecken das Problem darstellen?";
  $query = " SELECT COUNT(x.cc) AS cc FROM (SELECT COUNT(*) AS cc FROM adamant_f5 b INNER JOIN adamant_f5_tnt t ON t.name = b.tnt AND t.c1 = 'chemisch' INNER JOIN adamant_f5_ort o ON o.name = b.ort AND o.c1 = 'Nutzpflanze' AND o.c2 = 'Gemüse' INNER JOIN adamant_f5_pro p ON p.name = b.pro AND p.c2 <> 'Schnecke' GROUP BY CONCAT(b.sid,b.ort,b.tnt)) x ";
  $result = db_query($query);
  $record = $result->fetchAssoc();
  $answer = $record['cc'] . ' (' . round($record['cc']/$cache*100,2) . '%)';
  $output .= adamant_answer_output($fid, $gid, $title, $answer);

  // ### XX Final

  $output .= '<script>
        jQuery(document).ready(function ()
        {'.implode(" \n",$outscript).'})
  </script>';

  return $output;
}

function adamant_stat_chart_pie_gradient($cid, $values, $title = null, $labels, $options = array()) {
  if (!isset($options['nosort'])) {
    ksort($values);
    ksort($labels);
  }
  $total = array_sum($values);
  foreach ($values AS $ind => $val) {
    /*$label_words = explode(' ', $labels[$ind]);
    $chartlabels[$ind] = '';
    $strlen = 0;
    $maxlen = 30;
    for ($i = 0; $i < count($label_words); $i++) {
      if ($strlen >= $maxlen) {
        $chartlabels[$ind] .= '\r\n';
        $maxlen += 30;
      }
      $chartlabels[$ind] .= $label_words[$i] . ' ';
      $strlen = strlen($chartlabels[$ind]);
    }
    $chartlabels[$ind] = trim($chartlabels[$ind]);
    */
    $chartlabels[$ind] = $labels[$ind];
    $tooltipps[$ind] = $labels[$ind] . ': ' . $val . ' (' . (round($val/$total*100)) . '%)';
    $shortlabels[$ind] = (round($val/$total*100)) . '%';
  }
  // colors
  $colors = array(
    '#a9c30c',
    '#1a33b0',
    '#fcea14',
    '#fc0303',
    '#400135',
  );
  if (count($labels) > 5) {
    $colors = array(
    '#a9c30c',
    '#1a33b0',
    '#fc7d01',
    '#400135',
    '#fcea14',
    '#fc0303',
  );
  }
  // gradients
  $gradients = array();
  foreach ($colors AS $color) {
    $gradients[] = "CreatePieGradient(pie".$cid.", '".$color."')";
  }

  $output = "<script>
        function DrawChartPieGradient".$cid." () {
          var pie".$cid." = new RGraph.Pie('canvaschart_".$cid."', [".implode(',',$values)."]);
          RGraph.Clear(pie".$cid.".canvas);
          pie".$cid.".set('colors', [".implode(',',$gradients)."])
                .set('shadow', false)
                .set('labels', ['".implode("','", $shortlabels)."'])
                .set('labels.sticks', false)
                .set('tooltips', ['".implode("','", $tooltipps)."'])
                .set('key', ['".implode("','", $chartlabels)."'])
                .set('key.colors', ['".implode("','", $colors)."'])
                .set('key.color.shape', 'circle')
                .set('key.interactive', true)
                .set('key.position.y', 170)
                .set('key.position.x', 0)
                .set('key.linewidth', .0001)
                .set('key.strokestyle', 'rgba(255,255,255,1)')
                .set('radius', 70)
                .set('gutter.top', -50)
                .set('gutter.left', -60)
                .set('highlight.style', 'explode')
                .set('strokestyle', 'rgba(255,255,255,1)')
                .set('linewidth', 2)
                .set('contextmenu', [['Diagramm als Bild', RGraph.showPNG],null,['Abbruch', function () {}]])
                .draw();
        }
    </script>";
    return $output;
}

function adamant_stat_chart_bar_gradient($cid, $values, $title = null, $axes = null, $labels, $options = array()) {
  $output = '';
  if (isset($options['order']) && isset($options['grouped'])) {
    $chartlabels = array();
    foreach ($options['order'] AS $gid) {
      $group = $options['groups'][$gid];
      $chartlabels[] = $group;
      $tooltipps_gid = array();
      foreach ($values[$gid] AS $ind => $val) {
        $tooltipps_gid[$ind] = $group . '<br>' . $labels[$ind].': '.$val;
      }
      $tooltipps[$gid] = $tooltipps_gid;
    }
  }
  elseif (isset($options['grouped'])) {
    foreach ($options['groups'] AS $gid => $group) {
      foreach ($values[$gid] AS $ind => $val) {
        $tooltipps[$gid][$ind] = $group . '<br>' . $labels[$ind].': '.$val;
      }
    }
    $chartlabels = $options['groups'];
  }
  elseif (isset($options['order'])) {
    foreach ($options['order'] AS $ind) {
      $val = $values[$ind];
      $chartlabels[$ind] = $labels[$ind];
      $tooltipps[$ind] = $labels[$ind].': '.$val;
    }
  }
  else {
    ksort($values);
    ksort($labels);
    foreach ($values AS $ind => $val) {
      $chartlabels[$ind] = $labels[$ind];
      $tooltipps[$ind] = $labels[$ind].': '.$val;
    }
  }
  // colors
  if (isset($options['colors'])) {
    $colors = $options['colors'];
  }
  elseif (isset($options['grouped']) && $options['grouped'] == true) {
    $colors = array(
     '#a9c30c',
    '#1a33b0',
    '#fcea14',
    '#fc0303',
    '#400135',

    '#ABD874',
      '#E18D87',
      '#599FD9',
      '#F4AD7C',
      '#D5BBE5',
      '#f5eba1',
      '#f4c3ea',
      '#97e8e1',
      '#9de7b2',
      '#ee7ea6',
      '#b0b1fd',
      '#fc8787',
      '#f3d07b',
      '#8fcaec',
      '#ac8c8c',
      '#c0d7b6',
      '#cccccc'
    );
    if (isset($options['colorful']) && $options['colorful'] == true) {
      $colors_temp = $colors;
      while (count($colors) < count($options['groups']) * count($labels)) {
        shuffle($colors_temp);
        $colors = array_merge($colors, $colors_temp);
      }
    }
    else {
      $colors_temp = array_slice($colors, 0, count($labels));
      $colors = $colors_temp;
      for ($i = 1; $i < count($options['groups']); $i++) {
        $colors = array_merge($colors, $colors_temp);
      }
    }
  }
  else {
    if (isset($options['colorful']) && $options['colorful'] == true) {
      $colors = array(
       '#a9c30c',
    '#1a33b0',
    '#fcea14',
    '#fc0303',
    '#400135',

    '#ABD874',
        '#E18D87',
        '#599FD9',
        '#F4AD7C',
        '#D5BBE5',
        '#f5eba1',
        '#f4c3ea',
        '#97e8e1',
        '#9de7b2',
        '#ee7ea6',
        '#b0b1fd',
        '#fc8787',
        '#f3d07b',
        '#8fcaec',
        '#ac8c8c',
        '#c0d7b6',
        '#cccccc'
      );
    }
    else {
      $colors = array(
        '#ABD874'
      );
    }
  }
  // gradients
  $gradients = array();
  if (isset($options['order']) && isset($options['grouped'])) {
    $canvas_values_groups = $canvas_tooltipps_groups = $canvas_chartlabels_groups = array();
    foreach ($options['order'] AS $gid) {
      $gname = $options['groups'][$gid];
      $canvas_values_groups[] = "[".implode(',',$values[$gid])."]";
      $canvas_tooltipps_groups[] = "'".implode("', '",$tooltipps[$gid])."'";
    }
    $canvas_values = "[".implode(',',$canvas_values_groups)."]";
    $canvas_tooltipps = "[".implode(',',$canvas_tooltipps_groups)."]";
    $canvas_chartlabels = "['".implode("', '",$chartlabels)."']";
  }
  elseif (isset($options['grouped'])) {
    $canvas_values_groups = $canvas_tooltipps_groups = $canvas_chartlabels_groups = array();
    foreach ($options['groups'] AS $gid => $gname) {
      $canvas_values_groups[] = "[".implode(',',$values[$gid])."]";
      $canvas_tooltipps_groups[] = "'".implode("', '",$tooltipps[$gid])."'";
    }
    $canvas_values = "[".implode(',',$canvas_values_groups)."]";
    $canvas_tooltipps = "[".implode(',',$canvas_tooltipps_groups)."]";
    $canvas_chartlabels = "['".implode("', '",$chartlabels)."']";
  }
  else {
    $canvas_values = "[".implode(',',$values)."]";
    $canvas_tooltipps = "['".implode("', '",$tooltipps)."']";
    $canvas_chartlabels = "['".implode("', '",$chartlabels)."']";
  }
  $output .= "<script>
        function DrawChartBarGradient".$cid." () {

          var bar".$cid." = new RGraph.Bar('canvaschart_".$cid."', ".$canvas_values.");
          RGraph.Clear(bar".$cid.".canvas);
          bar".$cid.".set('shadow', false)".
                (isset($options['label_below']) ?
                ".set('text.angle', 90)
                .set('hmargin', 3)
                .set('xlabels.offset', 20)
                .set('gutter.bottom', ".(isset($options['gutter.bottom'])?$options['gutter.bottom']:135).")"  :
                (isset($options['label_straight']) ?
                ".set('text.angle', 0)
                .set('xlabels.offset', 20)
                .set('gutter.bottom', ".(isset($options['gutter.bottom'])?$options['gutter.bottom']:135).")"  :
                ".set('text.angle', -90)
                .set('xlabels.offset', -20)")).
                ".set('background.grid.autofit.numvlines', ".(isset($options['grouped'])?count($options['groups']):count($labels)).")
                .set('colors', ['".implode("','", $colors)."'])
                .set('colors.sequential', true)
                .set('tooltips', ".$canvas_tooltipps.")
                .set('labels', ".$canvas_chartlabels.")
                .set('strokestyle', 'rgba(0,0,0,0)')
                ".(isset($options['gutter.right'])?".set('gutter.right', {$options['gutter.right']})":'')."
                ".(isset($options['gutter.left'])?".set('gutter.left', {$options['gutter.left']})":'')."
                ".(isset($options['key.position.x'])?".set('key.position.x', {$options['key.position.x']})":'')."
                ".(isset($options['key.position.y'])?".set('key.position.y', {$options['key.position.y']})":'')."
                ".(isset($options['grouped'])?".set('key', ['".implode("', '",$labels)."']).set('key.interactive', true)":'')."
                .set('contextmenu', [['Diagramm als Bild', RGraph.showPNG],null,['Abbruch', function () {}]])
                ".(isset($options['ymax'])?".set('ymax', {$options['ymax']})":'')."
                .draw();

        }
    </script>";
    #$output .= "<pre>".print_r($values,1)."</pre>";
    #
    /*
    ".($title?".set('title','{$title}').set('title.size','16').set('gutter.top', '40')":'')."
                ".(1==0 && isset($axes['x'])?".set('title.xaxis','{$axes["x"]}').set('gutter.bottom', '40')":'')."
                ".(isset($axes['y'])?".set('title.yaxis','{$axes["y"]}').set('gutter.left', '40')":'')."


     */
    return $output;
}

function adamant_stat_chart_hbar_gradient($cid, $values, $title = null, $axes = null, $labels, $options = array()) {
  if (!isset($options['no_sort'])) {
    ksort($values);
    ksort($labels);
  }
  foreach ($values AS $ind => $val) {
    $chartlabels[$ind] = $labels[$ind];
    $tooltipps[$ind] = $labels[$ind].': '.$val;
  }
  // colors
  if (isset($options['colors'])) {
    $colors = $options['colors'];
  }
  elseif (isset($options['grouped']) && $options['grouped'] == true) {
    $colors = array(
      '#fcea14',
      '#a9c30c',
      '#fc0303',
      '#1a33b0',
      '#400135',
      '#ABD874',
      '#E18D87',
      '#599FD9',
      '#F4AD7C',
      '#D5BBE5',
      '#f5eba1',
      '#f4c3ea',
      '#97e8e1',
      '#9de7b2',
      '#ee7ea6',
      '#b0b1fd',
      '#fc8787',
      '#f3d07b',
      '#8fcaec',
      '#ac8c8c',
      '#c0d7b6',
      '#cccccc'
    );
    if (isset($options['colorful']) && $options['colorful'] == true) {
      $colors_temp = $colors;
      while (count($colors) < count($options['groups']) * count($labels)) {
        shuffle($colors_temp);
        $colors = array_merge($colors, $colors_temp);
      }
    }
    else {
      $colors_temp = array_slice($colors, 0, count($labels));
      $colors = $colors_temp;
      for ($i = 1; $i < count($options['groups']); $i++) {
        $colors = array_merge($colors, $colors_temp);
      }
    }
  }
  else {
    if (isset($options['colorful']) && $options['colorful'] == true) {
      $colors = array(
        '#fcea14',
      '#a9c30c',
      '#fc0303',
      '#1a33b0',
      '#400135',
      '#ABD874',
        '#E18D87',
        '#599FD9',
        '#F4AD7C',
        '#D5BBE5',
        '#f5eba1',
        '#f4c3ea',
        '#97e8e1',
        '#9de7b2',
        '#ee7ea6',
        '#b0b1fd',
        '#fc8787',
        '#f3d07b',
        '#8fcaec',
        '#ac8c8c',
        '#c0d7b6',
        '#cccccc'
      );
    }
    else {
      $colors = array(
        '#a9c30c'
      );
    }
  }
  // gradients
  $gradients = array();
  $output = "<script>
        function DrawChartHBarGradient".$cid." () {

          var hbar".$cid." = new RGraph.HBar('canvaschart_".$cid."', [".implode(',',$values)."]);
          RGraph.Clear(hbar".$cid.".canvas);
          hbar".$cid.".set('shadow', false)
                .set('vmargin', 3)
                ".(isset($options['show_values'])?".set('labels.above', true)":'')."
                .set('background.grid.autofit.numhlines', ".count($labels).")
                .set('colors', ['".implode("','", $colors)."'])
                .set('colors.sequential', true)
                .set('tooltips', ['".implode("','", $tooltipps)."'])
                .set('labels', ['".implode("','", $chartlabels)."'])
                .set('strokestyle', 'rgba(0,0,0,0)')
                .set('contextmenu', [['Diagramm als Bild', RGraph.showPNG],null,['Abbruch', function () {}]])
                .set('gutter.left', ".(isset($options['gutter.left'])?$options['gutter.left']:200).")
                .set('gutter.top', 0)
                .set('yaxispos', 'left')
                ".(isset($axes['x'])?".set('title.xaxis','{$axes["x"]}').set('gutter.bottom', 40)":'')."
                ".(isset($axes['y'])?".set('title.yaxis','{$axes["y"]}')":'')."
                ".(isset($options['xmax'])?".set('xmax','{$options["xmax"]}')":'')."
                .draw();
        }
    </script>";
    return $output;
}

function adamant_table($cid, $re = 0, $complex = 0) {
  $output = '';
  if ($re == 0) {
    $output .= '<table>';
    $query = " SELECT sid, no, data FROM webform_submitted_data WHERE cid = '{$cid}' AND data <> '' ORDER BY sid ASC ";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
      $output .= '<tr><td>'.$record['sid'].'</td><td>'.$record['no'].'</td><td>'.$record['data'].'</td></tr>';
    }
    $output .= '</table>';
  }
  elseif ($complex == 0) {
    $output .= '<table>';
    $query = " SELECT * FROM adamant_component_{$cid} ORDER BY sid ASC ";
    $result = db_query($query);
    while ($record = $result->fetchAssoc()) {
      $output .= '<tr>';
      foreach ($record AS $key => $val) {
        if (!in_array($key,array('id','delta','no'))) {
          $output .= '<td>'.$val.'</td>';
        }
      }
      $output .= '</tr>';
    }
    $output .= '</table>';
  }
  elseif ($cid == 1 && $complex == 1) {
    $output .= '<table>';
    $query = " SELECT sid, delta, category, name FROM adamant_complex_1 ORDER BY sid ASC, delta ASC ";
    $result = db_query($query);
    $cats = array(
      0 => 'n/a',
      1 => 'Schädling',
      2 => 'Krankheit',
      3 => 'Unkraut'
    );
    while ($record = $result->fetchAssoc()) {
      $output .= '<tr><td>'.$record['sid'].'</td><td>'.$record['delta'].'</td><td>'.$cats[$record['category']].'</td><td>'.$record['name'].'</td></tr>';
    }
    $output .= '</table>';
  }
  elseif ($cid == 1 && $complex == 2) {
    foreach (array('name' => 'Probleme', 'location' => 'Standorte', 'treatment' => 'Behandlungen', 'treatment_category' => 'Behandlungskategorien') AS $key => $name) {
      $output .= '<table><tr><th>'.$name.'</th><th>Anzahl Vorkommen im Fragebogen</th><th>Kategorisierte Einzelprobleme</th></tr>';
      $query = " SELECT {$key}, COUNT(*) AS cc FROM adamant_complex_1 GROUP BY {$key} ORDER BY cc DESC ";
      $result = db_query($query);
      while ($record = $result->fetchAssoc()) {
        $q = " SELECT COUNT(DISTINCT(sid)) AS cc FROM adamant_complex_1 WHERE {$key} = :mysqlre ";
        #$output .= "<pre>".print_r($q,1)."</pre>";
        $r = db_query($q, array(':mysqlre' => $record[$key]))->fetchAssoc();
        $output .= '<tr><td>'.$record[$key].'</td><td>'.$r['cc'].'</td><td>'.$record['cc'].'</td></tr>';
      }
      $output .= '</table>';
    }
  }
  elseif ($cid == 1 && $complex == 3) {
    #
    $output .= '<table>';
    $query = " SELECT c.*, s.data AS problem, t.data AS method FROM `adamant_complex_1` c LEFT JOIN webform_submitted_data s ON c.sid = s.sid AND s.cid = 70 AND s.no LIKE CONCAT('%#',c.original,'|%') LEFT JOIN webform_submitted_data t ON c.sid = t.sid AND t.cid = 74 AND t.no LIKE CONCAT('%#',c.original,'|%') ORDER BY c.sid ASC, c.delta ASC ";
    $result = db_query($query);
    $category = array(0 => '', 1 => 'Schädling', 2 => 'Krankheit', 3 => 'Unkraut');
    $amount = array(0 => '', 1 => 'gering', 2 => 'mittel', 3 => 'stark');
    $recurrence = array(0 => '', 1 => 'einmal', 2 => 'selten', 3 => 'häufig', 4 => 'regelmäßig');
    $treated = array(0 => '', 1 => 'Nein', 2 => 'Ja');
    while ($record = $result->fetchAssoc()) {
      $output .= '<tr>';
      foreach ($record AS $key => $val) {
        switch ($key) {
          case 'id':
          case 'sid':
          case 'delta':
          case 'name':
          case 'location':
          case 'treatment':
          case 'treatment_category':
          case 'problem':
          case 'method':
            $output .= '<td>'.$val.'</td>';
            break;

          case 'category':
            $output .= '<td>'.$category[$val].'</td>';
            break;

          case 'amount':
            $output .= '<td>'.$amount[$val].'</td>';
            break;

          case 'recurrence':
            $output .= '<td>'.$recurrence[$val].'</td>';
            break;

          case 'treated':
            $output .= '<td>'.$treated[$val].'</td>';
            break;
        }
      }
      $output .= '</tr>';
    }
    $output .= '</table>';
  }
  return $output;
}

function adamant_db() {
  $output = "Don't do that.";
  return $output;
  // umbenennen
  $reps_42 = array( #42
    "Unzu.: Informationsangebot unübersichtlich/schlecht zugänglich" => "Das Informationsangebot ist unübersichtlich bzw. schlecht zugänglich.",
    "Unzu.: kein Erfolg der Maßnahmen" => "Die vorgeschlagenen Maßnahmen waren nicht erfolgreich.",
    "Unzu.: Mangelnde Informationen über Gefahren von PSM" => "Es gibt zu wenig Informationen über Gefahren und Nebenwirkungen von PSM (sowohl chemische als auch nicht-chemische).",
    "Unzu.: Mangelnde wissenschaftliche Fundierung" => "Informationen über Pflanzenschutz sind nicht ausreichend wissenschaftlich fundiert.",
    "Unzu.: Unseriöse Herstellerinformationen" => "Ich vertraue den Informationen der Hersteller nicht.",
    "Unzu.: zu wenig Informationen zu alternativen PS-Maßnahmen" => "Es gibt zu wenig Informationen zu alternativen PS-Maßnahmen.",
    "Zu.: Ausreichend Informationen zu alternativen PS-Maßnahmen" => "Es gibt genügend Informationen zu alternativen PS-Maßnahmen.",
    "Zu.: Erfolg der Maßnahmen" => "Die vorgeschlagenen Maßnahmen waren erfolgreich.",
    "Zu.: Seriöse Herstellerinformationen" => "Die Hersteller stellen hilfreiche Informationen zur Verfügung.",
    "Unzu.: Mangelnde Information über Gefahren von PSM" => "Es gibt nicht genug Informationen über die Gefahren von PSM.",
    "Unzu.: Anleitungen von PSM allgemein" => "Ich bin unzufrieden mit den Gebrauchsanweisungen von PSM.",
  );
  $reps_21 = array( #21
    "zu teuer" => "Chemische Pflanzenschutzmittel sind mir zu teuer.",
    "zu aufwendig" => "Chemischer Pflanzenschutz ist mir zu aufwendig.",
    "menschliche Gesundheit" => "Schutz der menschlichen Gesundheit",
    "ineffektiv" => "Chemische Pflanzenschutzmittel finde ich ineffektiv.",
    "Toleranz" => "Ich toleriere gewisse Pflanzenschäden bzw. Unkraut.",
    "Alternative und vorbeugende Maßnahmen ausreichend" => "Alternative und vorbeugende Maßnahmen halte ich für ausreichend.",
    );
  $cid = 42;
  $reps = ${"reps_".$cid};
  foreach ($reps AS $old => $new) {
    $items = array();
    $query = " SELECT id FROM adamant_component_{$cid} WHERE simplified = :old ";
    $result = db_query($query, array(':old' => $old));
    $output .= 'Suche nach: ' . $old . '<br>IDs: ';
    while ($record = $result->fetchAssoc()) {
      $items[] = $record['id'];
      $output .= ' '.$record['id'].' ';
    }
    if (count($items) > 0) {
      $query = " UPDATE adamant_component_{$cid} SET simplified = :new WHERE id IN (".(implode(',',$items)).") ";
      $result = db_query($query, array(':new' => $new));
      $output .= '<br>Ersetze mit: ' . $new . '<br><br>';
    }
    else {
      $output .= '<em>keine Ergebnisse</em><br>Keine Ersetzung durchgeführt.<br><br>';
    }
  }
  return $output;
}

function adamant_db5_base() {
  $output = '';
  #$srcs = array('pro', 'ort', 'tnt');
  $srcs = array('ort');
  $pro = $ort = $tnt = array();
  foreach ($srcs AS $src) {
    $fp = drupal_get_path('module', 'adamant') .'/f5/'.$src.'.csv';
    $csv = array_map('str_getcsv', file($fp));
    foreach ($csv AS $ds) {
      $name = $ds[1] != '' ? $ds[1] : $ds[0];
      $c1 = $ds[2];
      $c2 = $ds[3];
      $c3 = isset($ds[4]) ? $ds[4] : '';
      $query = " INSERT IGNORE INTO adamant_f5_{$src} VALUES (:name, :c1, :c2, :c3) ";
      $dbv = array(
          ':name' => $name,
          ':c1' => $c1,
          ':c2' => $c2,
          ':c3' => $c3
        );
      $result = db_query($query, $dbv);
    }
  }
  #$output .= "<pre>".print_r($csv,1)."</pre>";
  return $output;
}

function adamant_db5_data() {
  $output = '';
  $srcs = array('pro', 'ort', 'tnt');
  $pro = $ort = $tnt = array();
  foreach ($srcs AS $src) {
    $fp = drupal_get_path('module', 'adamant') .'/f5/'.$src.'.csv';
    $csv = array_map('str_getcsv', file($fp));
    foreach ($csv AS $ds) {
      $name = trim($ds[0]);
      ${$src}[$name] = trim($ds[1]) != '' ? trim($ds[1]) : $name;
    }
  }
  #$output .= "<pre>".print_r($pro,1)."</pre>";
  #/*
  $query = " SELECT * FROM adamant_complex_1 ";
  $result = db_query($query);
  while ($record = $result->fetchAssoc()) {
    $item = $record;

    $q = " INSERT IGNORE INTO adamant_f5 VALUES (:id, :sid, :delta, :original, :pro, :ort, :tnt, :amount, :recurrence) ";
    $dbv = array(
        ':id' => $item['id'],
        ':sid' => $item['sid'],
        ':delta' => $item['delta'],
        ':original' => $item['original'],
        ':pro' => trim($item['name']) != '' ? $pro[trim($item['name'])] : '',
        ':ort' => trim($item['location']) != '' ? $ort[trim($item['location'])] : '',
        ':tnt' => trim($item['treatment']) != '' ? $tnt[trim($item['treatment'])] : '',
        ':amount' => $item['amount'],
        ':recurrence' => $item['recurrence'],
      );
    $r = db_query($q, $dbv);
  }
  #*/
  #$output .= "<pre>".print_r($csv,1)."</pre>";
  return $output;
}

function adamant_db5_classes() {
  $output = '';
  $srcs = array('pro' => 'Probleme', 'ort' => 'Standort/Kulturen', 'tnt' => 'Behandlung');
  $pro = $ort = $tnt = array();
  foreach ($srcs AS $src => $label) {
    $output .= '<h2>'.$label.'</h2>';
    $output .= '<table>';
    $q = " SELECT * FROM adamant_f5_{$src} ";
    $r = db_query($q);
    while ($l = $r->fetchAssoc()) {
      $output .= '<tr>';
      foreach ($l as $key => $value) {
        $output .= '<td><span title="'.$key.'">' . $value . '</span></td>';
      }
      $output .= '</tr>';

    }
    $output .= "</table>";
  }

  return $output;
}

function adamant_cron() {
  $last_run = variable_get('adamant_cron_last_run', REQUEST_TIME);
  if (date('Yz',$last_run) < date('Yz') || $last_run === REQUEST_TIME || $last_run == 0) {
    #watchdog('adamant', 'Running cron for '. date('Y-m-d',(REQUEST_TIME + (14 * 86400))) . ', current time: ' . date('H:i:s'));
    /*
    $result = db_query("SELECT entity_id FROM {field_data_field_duedate} WHERE field_duedate_value LIKE ':remind'", array(
      ':remind' => date('Y-m-d',(REQUEST_TIME + (14 * 86400))) . '%',
    ));
    */
   $result = db_query("SELECT entity_id FROM {field_data_field_duedate} WHERE field_duedate_value LIKE '".date('Y-m-d',(REQUEST_TIME + (14 * 86400)))."%'");
    #watchdog('adamant', $result->rowcount(). ' Ergebnisse');
    $queue = DrupalQueue::get('adamant_duedate_reminder');
    foreach ($result as $duedate) {
      #watchdog('adamant', print_r($result,1));
      $queue->createItem($duedate);
    }
  }
  variable_set('adamant_cron_last_run', 0); //REQUEST_TIME);
}

function adamant_cron_queue_info() {
  #watchdog('adamant', 'Running queue');
  $queues['adamant_duedate_reminder'] = array(
    'worker callback' => 'adamant_duedate_reminder',
    'time' => 120,
  );
  return $queues;
}

function adamant_duedate_reminder($reminder) {
  #watchdog('adamant', print_r($reminder,1));
  if (is_numeric($reminder)) {
    $nid = $reminder;
  }
  else {
    $nid = $reminder->entity_id;
  }
  if ($node = node_load($nid)) {
    $uid = $node->field_fkz[$node->language][0]['target_id'];
    $user = user_load($uid);
    $message = array(
      'key' => 'duedate_reminder',
      'to' => 'webadmin@ecologic.eu', //$user->field_contact_email['und'][0]['value'],
      'fkz' => $user->name,
      'address' => $user->field_contact_address['und'][0]['value'],
      'name' => $user->field_contact_lastname['und'][0]['value'],
      'duedate' => date('d.m.Y',strtotime($node->field_duedate['und'][0]['value'])),
    );
    adamant_mail_send($message);
  }
}

function adamant_mail($key, &$message, $params) {
  global $user;

  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    // Send a simple message from the contact form.
    case 'duedate_reminder':
      $message['subject'] = 'Fälligkeitserinnerung für NKI-Bericht/Nachweise - FKZ '.$params['fkz'];
      // Note that the message body is an array, not a string.
      $message['body'][] = "Sehr geehrte".($params['address'] == "Herr" ? "r" : "")." ".$params['address']." ".$params['name'].",\nsehr geehrte Zuwendungsempfänger,\n\nfür Ihr Förderprojekt ".$params['fkz']." ist am ".$params['duedate']." ein Bericht/Nachweis einzureichen. Bitte loggen Sie sich unter http://adamant.nki-evaluierung.de/user/login ein. Unter \"Termine\" finden Sie entsprechende Hinweise.\n\nDie fristgerechte Einreichung der Dokumente (unterschrieben und auf dem Postweg) ist für die ordnungsgemäße Abwicklung des Fördervorhabens erforderlich.\n\nVielen Dank!\nMit freundlichen Grüßen\nIhre Betreuer vom Projektträger Jülich";
      break;
  }
}

function adamant_mail_send($values) {
  // All system mails need to specify the module and template key (mirrored from
  // hook_mail()) that the message they want to send comes from.
  $module = 'adamant';
  $key = $values['key'];

  // Specify 'to' and 'from' addresses.
  $to = $values['to'];
  $from = variable_get('site_mail', 'webadmin@ecologic.eu');
  $params = $values;
  $language = language_default();
  $send = TRUE;
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] == TRUE) {
    watchdog('adamant', 'Email sent: '.$key.' for '.$values['fkz']);
  }
  else {
    watchdog('adamant', 'Email NOT sent: '.$key.' for '.$values['fkz']);
  }

}

